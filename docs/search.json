[{"path":"/articles/example1.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of contents","title":"Space-time model hospital admissions from gastroenteritis","text":"Introduction Notation structure polynomial trend models structure dynamic regression models structure harmonic trend models structure autoregresive models structure overdispersed models Handling multiple structural blocks Handling multiple linear predictors Handling unknown components planning matrix FtF_t Special priors Normal case Poisson case Gamma case Multinomial case Handling multiple outcomes Filtering smoothing Extracting components Forecasting Intervention monitoring Tools sensibility analysis Sampling hyper parameter estimation Space-time model hospital admissions gastroenteritis","code":""},{"path":"/articles/example1.html","id":"applied-example-space-time-model-for-hospital-admissions-from-gastroenteritis","dir":"Articles","previous_headings":"","what":"Applied example: Space-time model for hospital admissions from gastroenteritis","title":"Space-time model hospital admissions from gastroenteritis","text":"example model number hospital admissions gastroenteritis Brazil 2010 2022 (Ministry Health, Brazil, 2023). kDGLM package provides gatroBR dataset pertinent data models, includes: UF: abbreviated state name. Date: date observation. Note day placeholder, dealing monthly reports. Admissions: number hospital admissions reported combination state date. Population: estimated population combination state date (used offset). Supplementary information can found documentation (see help(gastroBR))).","code":""},{"path":"/articles/example1.html","id":"initial-model-total-hospital-admissions","dir":"Articles","previous_headings":"","what":"Initial model: Total hospital admissions","title":"Space-time model hospital admissions from gastroenteritis","text":"start analysis model total number hospital admissions time Brazil, .e., temporal model consider hospital admissions state.  figure can see consistent trend (log) linear decay rate hospital admissions time, April 2020, abrupt reduction hospital admission due pandemic COVID-19 (Ribeiro et al., 2022), followed seems return previous level, although observations necessary sure. can also note data clear seasonal pattern, period 1212 months. begin simply model. Let YtY_t total number hospital admissions Brazil time tt. Assume : Yt|Œ∑t‚àºPoisson(Œ∑t)lnŒ∑t=Œªt=Œ∏1,tŒ∏1,t=Œ∏1,t‚àí1+Œ∏2,t‚àí1+œâ1,tŒ∏2,t=Œ∏2,t‚àí1+œâ2,t. \\begin{aligned} Y_t|\\eta_t &\\sim Poisson(\\eta_t)\\\\ \\ln{\\eta_t}&=\\lambda_t=\\theta_{1,t}\\\\ \\theta_{1,t}&=\\theta_{1,t-1}+\\theta_{2,t-1}+\\omega_{1,t}\\\\ \\theta_{2,t}&=\\theta_{2,t-1}+\\omega_{2,t}.\\\\ \\end{aligned} First define model structure: define outcome: fit model: Finally, can see model performed methods:  Clearly model described simple describe data. particular, take account form seasonal pattern. Let us proceed assuming following model: Yt|Œ∑t‚àºPoisson(Œ∑t)lnŒ∑t=Œªt=Œ∏1,t+Œ∏3,tŒ∏1,t=Œ∏1,t‚àí1+Œ∏2,t‚àí1+œâ1,tŒ∏2,t=Œ∏2,t‚àí1+œâ2,t,[Œ∏3,tŒ∏4,t]=R[Œ∏3,tŒ∏4,t]+[œâ3,tœâ4,t]R=[cos(2œÄ12)sin(2œÄ12)‚àísin(2œÄ12)cos(2œÄ12)] \\begin{aligned} Y_t|\\eta_t &\\sim Poisson(\\eta_t)\\\\ \\ln{\\eta_t}&=\\lambda_t=\\theta_{1,t}+\\theta_{3,t}\\\\ \\theta_{1,t}&=\\theta_{1,t-1}+\\theta_{2,t-1}+\\omega_{1,t}\\\\ \\theta_{2,t}&=\\theta_{2,t-1}+\\omega_{2,t},\\\\ \\begin{bmatrix}\\theta_{3,t}\\\\\\theta_{4,t}\\end{bmatrix}&=R\\begin{bmatrix}\\theta_{3,t}\\\\\\theta_{4,t}\\end{bmatrix}+\\begin{bmatrix}\\omega_{3,t}\\\\\\omega_{4,t}\\end{bmatrix}\\\\ R&=\\begin{bmatrix} \\cos(\\frac{2\\pi}{12})  &\\sin(\\frac{2\\pi}{12})\\\\ -\\sin(\\frac{2\\pi}{12}) & \\cos(\\frac{2\\pi}{12})\\end{bmatrix} \\end{aligned} RR rotation matrix angle 2œÄ12\\frac{2\\pi}{12}, R12R^{12} equal identity matrix. define structure model can use harmonic_block function alongside polynomial_block function: fit model (using previously defined outcome):  Notice change significantly improves metrics provided model summary, indicates going right direction. encourage reader test different orders harmonic block. previous model capture mean behavior series reasonably well. However, two deficiencies model standout: first, overconfidence predictions, evidenced particularly thin credibility interval; nnd second, difficulty model adapt pandemic period. first problem comes fact using Poisson model, implies Var[Yt|Œ∑t]=ùîº[Yt|Œ∑t]Var[Y_t|\\eta_t]=\\mathbb{E}[Y_t|\\eta_t], means Var[Yt]=ùîº[Var[Yt|Œ∑t]]+Var[ùîº[Yt|Œ∑t]]=ùîº[Œ∑t]+Var[Œ∑t]Var[Y_t]=\\mathbb{E}[Var[Y_t|\\eta_t]]+Var[\\mathbb{E}[Y_t|\\eta_t]]=\\mathbb{E}[\\eta_t]+Var[\\eta_t]. latter observations expect Var[Œ∑t]Var[\\eta_t] relatively small; , variance YtY_t close mean reasonable amount observations. scenario, coefficient variation, defined Var[Yt]ùîº[Yt]\\frac{\\sqrt{Var[Y_t]}}{\\mathbb{E}[Y_t]} goes 00 ùîº[Yt]\\mathbb{E}[Y_t] grows, particular, data scale working particular problem, expect low coefficient variation Poisson model adequate, observe. phenomena called well known problem literature . solve , can include block representing white noise added linear predictor time, affect previous future observation, capture overdipersion. case, assume following model: Yt|Œ∑t‚àºPoisson(Œ∑t)lnŒ∑t=Œªt=Œ∏1,t+Œ∏3,t+œµtŒ∏1,t=Œ∏1,t‚àí1+Œ∏2,t‚àí1+œâ1,tŒ∏2,t=Œ∏2,t‚àí1+œâ2,t,[Œ∏3,tŒ∏4,t]=R[Œ∏3,tŒ∏4,t]+[œâ3,tœâ4,t]œµt‚àºùí©(0,œÉt2) \\begin{aligned} Y_t|\\eta_t &\\sim Poisson(\\eta_t)\\\\ \\ln{\\eta_t}&=\\lambda_t=\\theta_{1,t}+\\theta_{3,t}+\\epsilon_t\\\\ \\theta_{1,t}&=\\theta_{1,t-1}+\\theta_{2,t-1}+\\omega_{1,t}\\\\ \\theta_{2,t}&=\\theta_{2,t-1}+\\omega_{2,t},\\\\ \\begin{bmatrix}\\theta_{3,t}\\\\\\theta_{4,t}\\end{bmatrix}&=R\\begin{bmatrix}\\theta_{3,t}\\\\\\theta_{4,t}\\end{bmatrix}+\\begin{bmatrix}\\omega_{3,t}\\\\\\omega_{4,t}\\end{bmatrix}\\\\ \\epsilon_t & \\sim \\mathcal{N}(0,\\sigma_t^2) \\end{aligned} structure can defined using function, alongside previously used functions: second problem, slow adaptation start pandemic. ideal approach make intervention, increasing uncertainty latent states beginning pandemic period allowing model quickly adapt new scenario (see West Harrison, 1997, Chapter 11). recommend approach already expect change behavior certain time, even looking data (exactly case). Still, didactic purposes, first present automated monitoring can also used solve problem. general, recommend automated monitoring approach known change behavior happened looking data, .e., known particular event expect impact outcome. Following presented Subsection Intervention monitoring, can use following code fit model: Notice set monitoring polynomial_block c(TRUE,TRUE). default, polynomial_block function activates monitoring first component (level), , visual analysis made beginning, clear pandemic affected level slope average number hospital admissions, , like monitor parameters.  summary presented shows massive improvement comparison metrics new changes introduced. Moreover, can see automated monitoring detected exact moment series YtY_t changed behavior, allowed model immediately adapt pandemic period. One aspect model may bother reader exceedingly high uncertainty first observations. behavior duo approach estimation variance white noise introduced noise_block function (see dos Santos et al., 2024 associated documentation details), can bit sensitive bad prior specification initial steps. , highly recommend user perform sensitivity analysis choose initial variance white noise: Notice , time around, chose make intervention beginning pandemic, instead automated approach. mentioned , approach preferable scenario, since aware pandemic affect outcome even looking data. , new changes improve comparison metrics even , leading conclusion last model best among presented now. highly encourage reader run example experiment options kDGLM package offers, explored, changing discount factors used block, order blocks, adding/removing structural components, etc..  last side note, user may like approach choosing specific value initial variance white noise introduced noise_block. Indeed, one may wish define prior distribution parameter estimate along others. detail approach sake brevity (since directly supported), like point offer tools facilitate procedure:","code":"structure <- polynomial_block(   rate = 1, order = 2, D = c(0.95, 0.975),   name = \"Trend\" ) outcome <- Poisson(   lambda = \"rate\",   data = data.year$Admissions,   offset = data.year$Population ) fitted.model <- fit_model(structure, outcome) summary(fitted.model) Fitted DGLM with 1 outcomes.  distributions:     Series.1: Poisson  --- No static coeficients. --- See the coef.fitted_dlm for the coeficients with temporal dynamic.  One-step-ahead prediction Log-likelihood        : -24696.03 Interval Score        :   52517.62411 Mean Abs. Scaled Error:       1.41602 --- plot(fitted.model, plot.pkg = \"base\") structure <- polynomial_block(   rate = 1, order = 2, D = c(0.95, 0.975),   name = \"Trend\" ) +   harmonic_block(     rate = 1, period = 12, D = 0.98,     name = \"Season\"   ) fitted.model <- fit_model(structure, outcome) summary(fitted.model) Fitted DGLM with 1 outcomes.  distributions:     Series.1: Poisson  --- No static coeficients. --- See the coef.fitted_dlm for the coeficients with temporal dynamic.  One-step-ahead prediction Log-likelihood        : -17262.59 Interval Score        :   40387.96454 Mean Abs. Scaled Error:       0.71032 --- plot(fitted.model, plot.pkg = \"base\") structure <- polynomial_block(   rate = 1, order = 2, D = c(0.95, 0.975),   name = \"Trend\" ) +   harmonic_block(     rate = 1, period = 12, D = 0.98,     name = \"Season\"   ) +   noise_block(rate = 1, name = \"Noise\") structure <- polynomial_block(   rate = 1, order = 2, D = c(0.95, 0.975),   name = \"Trend\", monitoring = c(TRUE, TRUE) ) +   harmonic_block(     rate = 1, period = 12, D = 0.98,     name = \"Season\"   ) +   noise_block(rate = 1, name = \"Noise\") # To activate the automated monitoring it is enough to set the p.monit argument to a valid value fitted.model <- fit_model(structure, outcome, p.monit = 0.05) summary(fitted.model) Fitted DGLM with 1 outcomes.  distributions:     Series.1: Poisson  --- No static coeficients. --- See the coef.fitted_dlm for the coeficients with temporal dynamic.  One-step-ahead prediction Log-likelihood        : -1260.715 Interval Score        :   12946.2270 Mean Abs. Scaled Error:       0.7108 --- plot(fitted.model, plot.pkg = \"base\") structure <- polynomial_block(   rate = 1, order = 2, D = c(0.95, 0.975),   name = \"Trend\" ) +   harmonic_block(     rate = 1, period = 12, D = 0.98,     name = \"Season\"   ) +   noise_block(rate = 1, R1 = \"H\", name = \"Noise\") # Setting the initial variance as a unknown parameter  structure <- structure |>   intervention(time = 124, var.index = c(1:2), D = 0.005)  search.model <- fit_model(   structure, outcome,   H = seq.int(0, 0.04, l = 101),   metric.cutoff = 0 ) fitted.model <- search.model$model summary(fitted.model) Fitted DGLM with 1 outcomes.  distributions:     Series.1: Poisson  --- No static coeficients. --- See the coef.fitted_dlm for the coeficients with temporal dynamic.  One-step-ahead prediction Log-likelihood        : -1223.8 Interval Score        :    7803.10638 Mean Abs. Scaled Error:       0.60274 --- plot(fitted.model, plot.pkg = \"base\") search.result <- search.model$search.data[order(search.model$search.data$H), ]  H.vals <- search.result$H log.prior <- dgamma(H.vals, 1, 1, log = TRUE) log.like <- search.result$log.like l.fx <- log.prior + log.like pre.fx <- exp(l.fx - max(l.fx)) fx <- pre.fx / sum(pre.fx * (H.vals[2] - H.vals[1])) plot(H.vals, fx,   type = \"l\", xlab = \"H\", ylab = \"Density\",   main = \"Posterior density for the unknown hyperparameter H\" )"},{"path":"/articles/example1.html","id":"advanced-model-hospital-admissions-by-state","dir":"Articles","previous_headings":"","what":"Advanced model: Hospital admissions by state","title":"Space-time model hospital admissions from gastroenteritis","text":"model, need geographic information Brazil, , use auxiliary packages, namely geobr, tidyverse, sf spdep, although kDGLM package depend :  Now proceed fitting model . Let YitY_{} number hospital admissions gastroenteritis time tt region ii, assume following model: Yit|Œ∑it‚àºPoisson(Œ∑it)ln{Œ∑it}=Œªit=Œ∏1,t+ui,t+Si,t+œµi,t,Œ∏1,t=Œ∏1,t‚àí1+Œ∏2,t‚àí1+œâ1,t,Œ∏2,t=Œ∏2,t‚àí1+œâ2,t,[ui,tvi,t]=R[ui,t‚àí1vi,t‚àí1]+[œâi,tuœâi,tu],œµt‚àºùí©(0,œÉt2),S1,1,...,Sr,1‚àºCAR(œÑ), \\begin{aligned} Y_{}|\\eta_{} &\\sim Poisson(\\eta_{})\\\\ \\ln\\{\\eta_{}\\}&= \\lambda_{}=\\theta_{1,t}+u_{,t}+S_{,t}+\\epsilon_{,t},\\\\ \\theta_{1,t}&= \\theta_{1,t-1}+\\theta_{2,t-1}+\\omega_{1,t},\\\\ \\theta_{2,t}&= \\theta_{2,t-1}+\\omega_{2,t},\\\\ \\begin{bmatrix}u_{,t}\\\\ v_{,t}\\end{bmatrix} &= R \\begin{bmatrix}u_{,t-1}\\\\ v_{,t-1}\\end{bmatrix} + \\begin{bmatrix} \\omega^{u}_{,t}\\\\ \\omega^{u}_{,t}\\end{bmatrix},\\\\ \\epsilon_t & \\sim \\mathcal{N}(0,\\sigma_t^2),\\\\ S_{1,1},...,S_{r,1} & \\sim CAR(\\tau),  \\end{aligned}  r=27r=27 number areas within dataset. Currently, kDGLM package offer support sequential estimation œÑ\\tau, parameter associated CAR prior. study developed address limitation. now, opt conduct sensitivity analysis determine optimal value tautau using tools presented Subsection Tools sensitivity analysis. optimal value found œÑ=0.005\\tau=0.005. Alternatively, real-time inference priority analyst, complete posterior œÑ\\tau can obtained adapting code Subsection Sampling hyper parameter estimation, without incurring high computational cost. Notice assuming similar model used initial_model, common effect (global effect) Œ∏1,t\\theta_{1,t} equally affects regions, local effect Si,tS_{,t} affects region ii evolves smoothly though time. chose vague CAR prior (Banerjee et al., 2014; Schmidt Nobre, 2018) Si,tS_{,t}. proposed model can fitted using following code: time series hospital admissions gastroenteritis Brazilian states 2010 2022. Notice proposed model can capture general behavior series, simultaneously capturing dependence regions shared component Œ∏1,t\\theta_{1,t} local effects SiS_i. log10\\log_{10} hospital admissions rate gastroenteritis Brazilian states 4 key moments: () January 2010, data begins; (b) March 2020, month first case COVID-19 registered Brazil public response; (c) April 2020, first month pandemic period; (d) December 2022, end period study roughly 2 years beginning pandemic. Notice () (b) 10 years passed see steady smoothly yearly reductions hospital admissions led significantly reduction rate hospital. contrast, (b) (c), 1 month passed, see reduction , proportionally, event greater () (b). Lastly, (c) (d), roughly 2 years, rate hospital admissions seems going back seen (c). Since 2727 regions, 156156 observations , reasonably show model performed every combination date location. limit show regions times regions times reader may use code provided document vignette fit model thoroughly examination results. Moreover, focus usage kDGLM package epidemiological aspect results. Finally, computational cost, initial model (total number hospital admissions time) took 0.11s0.11s fit advanced model took 4.24s4.24s, within expected range, since final model 2727 outcomes 110110 latent states , consider temporal dynamic, yields 17.16017.160 parameters, joint distribution obtained.","code":"require(geobr) require(tidyverse) require(sf) require(spdep)  br.base <- read_state(   year = 2019,   showProgress = FALSE )  plot.data <- br.base |>   left_join(     gastroBR |>       filter(format(Date, \"%Y\") == \"2019\") |>       select(UF, Population, Admissions) |>       group_by(UF) |>       summarize(         Population = max(Population),         Admissions = sum(Admissions)       ) |>       rename(abbrev_state = UF),     by = \"abbrev_state\"   )  (ggplot() +   geom_sf(data = plot.data, aes(fill = log10(Admissions / Population))) +   scale_fill_distiller(expression(log[10] * \"(admissions/population)\"),     limits = c(-4, -2.5),     palette = \"RdYlBu\",     labels = ~ round(., 2)   ) +   theme_void() +   theme(legend.position = \"bottom\")) adj.matrix <- br.base |>   poly2nb() |>   nb2mat(style = \"B\")  CAR.structure <- polynomial_block(rate = 1, D = 0.98, name = \"CAR\") |>   block_mult(27) |>   block_rename(levels(gastroBR$UF)) |>   zero_sum_prior() |>   CAR_prior(scale = \"Scale\", rho = 1, adj.matrix = adj.matrix)  shared.structure <- polynomial_block(   RO = 1, AC = 1, AM = 1, RR = 1, PA = 1, AP = 1,   TO = 1, MA = 1, PI = 1, CE = 1, RN = 1, PB = 1,   PE = 1, AL = 1, SE = 1, BA = 1, MG = 1, ES = 1,   RJ = 1, SP = 1, PR = 1, SC = 1, RS = 1, MS = 1,   MT = 1, GO = 1, DF = 1,   order = 2, D = c(0.95, 0.95),   name = \"Common\" ) |>   intervention(time = 124, var.index = c(1:2), D = 0.005)  base.structure <- (harmonic_block(rate = 1, order = 1, period = 12, D = 0.98, name = \"Season\") +   noise_block(rate = 1, R1 = 0.007, name = \"Noise\")) |>   block_mult(27) |>   block_rename(levels(gastroBR$UF))  inputs <- list(shared.structure, CAR.structure, base.structure) for (uf in levels(gastroBR$UF)) {   reg.data <- gastroBR |> filter(UF == uf)   inputs[[uf]] <- Poisson(lambda = uf, data = reg.data$Admissions, offset = reg.data$Population) } # inputs$Scale <- 10**seq.int(-5, 1, l = 21) inputs$Scale <- 0.01 model.search <- do.call(fit_model, inputs) # fitted.model <- model.search$model fitted.model <- model.search plot(fitted.model) (plot(fitted.model, outcomes = c(\"MG\", \"SP\", \"ES\", \"RJ\", \"CE\", \"BA\", \"RS\", \"SC\", \"AM\", \"AC\"), lag = 1, plot.pkg = \"ggplot2\") +   scale_color_manual(\"\", values = rep(\"black\", 10)) +   scale_fill_manual(\"\", values = rep(\"black\", 10)) +   facet_wrap(~Serie, ncol = 2, scale = \"free_y\") +   coord_cartesian(ylim = c(NA, NA)) +   guides(color = \"none\", fill = \"none\") +   theme(legend.position = \"top\")) ‚Ä©[1m‚Ä©[22mScale for ‚Ä©[32mcolour‚Ä©[39m is already present. Adding another scale for ‚Ä©[32mcolour‚Ä©[39m, which will replace the existing scale. ‚Ä©[1m‚Ä©[22mScale for ‚Ä©[32mfill‚Ä©[39m is already present. Adding another scale for ‚Ä©[32mfill‚Ä©[39m, which will replace the existing scale. ‚Ä©[1m‚Ä©[22mCoordinate system already present. Adding new coordinate system, which will replace the existing one. smoothed.values <- coef(fitted.model) plot.data <- data.frame() labels <- list(   \"2010-01-01\" = \"(a) January, 2010\",   \"2020-03-01\" = \"(b) March, 2020\",   \"2020-04-01\" = \"(c) April, 2020\",   \"2022-12-01\" = \"(d) December, 2022\" ) for (date in c(\"2010-01-01\", \"2020-03-01\", \"2020-04-01\", \"2022-12-01\")) {   index <- min(which(gastroBR$Date == date))   plot.data <- rbind(     plot.data,     cbind(       Date = labels[[date]],       Effect = smoothed.values$lambda.mean[order(order(levels(reg.data$UF))), index] / log(10),       br.base     )   ) }  (ggplot() +   geom_sf(data = plot.data, aes(fill = Effect)) +   facet_wrap(~Date, strip.position = \"bottom\") +   scale_fill_distiller(\"$\\\\log_{10}$ rate\",     limits = c(-6, -3),     palette = \"RdYlBu\",     labels = ~ round(., 2)   ) +   theme_void() +   theme(legend.position = \"bottom\")) labels <- list(   \"2015-01-01\" = \"January, 2015\",   \"2019-12-01\" = \"December, 2019\" ) plot.data <- data.frame() for (date in c(\"2015-01-01\", \"2019-12-01\")) {   index <- min(which(gastroBR$Date == date))    forecast.vals <- coef(fitted.model, lag = 3, t.eval = index, eval.pred = TRUE)    mean.pred <- forecast.vals$data$Prediction   reg.data <- gastroBR %>%     filter(Date == date) %>%     mutate(Tx = log10(Admissions / Population))    plot.data <- rbind(     plot.data,     cbind(       Date = labels[[date]],       Effect = log10(mean.pred) - log10(reg.data$Population),       br.base,       Label = \"Prediction\"     )   )   plot.data <- rbind(     plot.data,     cbind(       Date = labels[[date]],       Effect = reg.data$Tx, br.base,       Label = \"Observed\"     )   ) } plot.data$Label <- factor(plot.data$Label, levels = unique(plot.data$Label))  (ggplot() +   geom_sf(data = plot.data, aes(fill = Effect)) +   facet_wrap(Label ~ Date, strip.position = \"bottom\") +   scale_fill_distiller(\"log10 rate\",     limits = c(-5.5, -3.5),     palette = \"RdYlBu\",     labels = ~ round(., 2)   ) +   theme_void() +   theme(legend.position = \"bottom\"))"},{"path":[]},{"path":"/articles/fitting.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of contents","title":"Fitting and analysing models","text":"Introduction Notation structure polynomial trend models structure dynamic regression models structure harmonic trend models structure autoregresive models structure overdispersed models Handling multiple structural blocks Handling multiple linear predictors Handling unknown components planning matrix FtF_t Special priors Normal case Poisson case Gamma case Multinomial case Handling multiple outcomes Filtering smoothing Extracting components Forecasting Intervention monitoring Tools sensibility analysis Sampling hyper parameter estimation Space-time model hospital admissions gastroenteritis","code":""},{"path":"/articles/fitting.html","id":"fitting-and-analysing-models","dir":"Articles","previous_headings":"","what":"Fitting and analysing models","title":"Fitting and analysing models","text":"section briefly present usage fit_model function, along side auxiliary functions analyzing fitted model, summary, coef,plot, forecast simulate methods. deep dive details argument function, see documentation function /reference manual.","code":""},{"path":"/articles/fitting.html","id":"filtering-and-smoothing","dir":"Articles","previous_headings":"","what":"Filtering and smoothing","title":"Fitting and analysing models","text":"... argument receives dlm_block dlm_distr objects, creation described previous sections. particular, user gives dlm_distr object named argument, name used label outcome. argument smooth Boolean indicating smoothed distribution latent states evaluated. general, recommend users change value, computational cost smoothing usually negligible. p_monit controls sensitivity automated monitoring shall discuss usage subsection Intervention monitoring. Bellow present code fits Poisson model: first two lines create structural blocks representing random walk Œºt\\mu_t seasonal component described harmonics. fourth line creates Poisson outcome rate parameter lambda equal exp{rate}\\exp\\{\\text{rate}\\}, rate label given linear predictor creating structural blocks (see section Creating model structure details linear predictor). last line receives model structure Poisson outcome fits model, obtaining parameters filtered smoothed distribution latent states. user can see model fits data using plot method, syntax follows: model argument must fitted_dlm object (.e., output fit_model function). pred.cred must number 00 11 representing desired credibility predictions. lag must integer representing number steps ahead used predictions. lag<0<0, smoothed distribution used predictions , lag=0=0, filtered distribution used Instead. cutoff must integer representing number initial steps omitted plot. Usually, model still learning initial steps, predictions reliable. default value one tenth sample size rounded . Lastly plot.pkg must string specifying plot engine used. one 'auto', 'base', 'ggplot2' 'plotly'. 'auto' used, function tries use plotly package, fails, tries use ggplot2 packge , also fails, native functions provided R used.  remaining functions methods section similar usage plot.fitte_dlm method, , sake brevity, highlight unique arguments /behaviors function method present. strongly advise user consult reference manual documentation function detailed descriptions function. see summary fitted model, one can use summary method: Note static components model, .e.¬†without temporal dynamic, shown summary. unpratical show values latent states times summary, showing one specific time can lead misleading results unaware users. see latent states temporal dynamic, one must use coef plot methods. details usage summary method, see associated documentation (help(summary.fitted_dlm)).","code":"level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, period = 12, order = 2, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers))  fitted.model <- fit_model(   level, season, # Strucuture   AirPassengers = outcome ) # outcome plot.fitted_dlm(model, pred.cred = 0.95, lag = 1, cutoff = floor(model$t / 10), plot.pkg = \"auto\") plot(fitted.model, plot.pkg = \"base\") summary(fitted.model) Fitted DGLM with 1 outcomes.  distributions:     AirPassengers: Poisson  --- No static coeficients. --- See the coef.fitted_dlm for the coeficients with temporal dynamic.  One-step-ahead prediction Log-likelihood        : -580.2514 Interval Score        : 129.48462 Mean Abs. Scaled Error:   0.47013 ---"},{"path":"/articles/fitting.html","id":"extracting-components","dir":"Articles","previous_headings":"","what":"Extracting components","title":"Fitting and analysing models","text":"Naturally, user may want extract information posterior distribution parameters fitted model, thorough analysis may performed. extracting parameters distribution latent states, linear predictors observational model parameters, one can use coef method: object parameter must specified fitted_dlm object, represents model components extracted. t.eval parameter vector denotes time indices posterior evaluated. parameters lag pred.cred retain meanings analogous plot method fitted_dlm class. eval.pred parameter requires boolean value, indicating whether predictive distribution observations evaluated. Additionally, eval.pred parameter boolean specifying whether model comparison metrics computed. output function dlm_coef object containing: data: data frame model evaluated observed time. mt: n√óTn \\times T matrix representing mean latent states time, nn number latent states model TT length time series; Ct: 3D-array containing covariance matrix latent state time. Dimensions n√ón√óTn \\times n \\times T; ft: k√óTk \\times T matrix representing mean linear predictor time, kk number linear predictors model TT length time series; Qt: 3D-array containing covariance matrix linear predictor time. Dimensions k√ók√óTk \\times k \\times T; Several vectors metrics, including predictive log-likelihood, Mean Absolute Scaled Error (MASE, Hyndman Koehler, 2006) Interval Score (interval.score, Bracher, 2021). conj.param: list containing parameters conjugate distribution parameter observational model. important highlight , following method proposed Alves et al. (2024), joint distribution latent states linear predictors time Gaussian, mean vector covariance matrix completely define distribution. user may also want plot latent states, plot method dlm_coef class can used:  user wants see restricted set latent states, extra argument var can used specify label variables plot:  user may also plot linear predictors, specifying name linear predictor:  Lastly, although recommend , user may also extract information directly fitted_dlm object. strongly recommend every user consult documentation functions see full set features provided kDGLM package.","code":"coef(object, t.eval = seq_len(object$t), lag = -1, pred.cred = 0.95, eval.pred = FALSE, eval.metric = FALSE, ...) fitted.coef <- coef(fitted.model) plot(fitted.coef, plot.pkg = \"base\") plot(fitted.coef, \"Var.Poly.Level\", plot.pkg = \"base\") plot(fitted.coef, \"rate\", plot.pkg = \"base\")"},{"path":"/articles/fitting.html","id":"forecasting","dir":"Articles","previous_headings":"","what":"Forecasting","title":"Fitting and analysing models","text":"Notice methods functions presented previously restricted period model fitted. user wishes make predictions future observations, forecast method can used: object parameter required fitted_dlm object. t parameter specifies prediction window. plot parameter determines whether plot generated , applicable, engine use, akin plot method fitted_dlm class. pred.cred parameter signifies credibility confidence intervals. Additionally plot (optional), forecast method fitted_dlm class also provides similar set attributes dlm_coef class , specifically, predictive distribution latent states, linear predictors observational model parameters, along predictions future observations. relevant point external data necessary forecasting, models regressive blocks transfer functions, necessary pass values forecast method. scenario, user must pass new argument named variable ‚Äúmissing‚Äù model. See documentation see determine name missing values , practically, try use forecast method without necessary arguments, since name missing variables presented error message. present two examples model Multinomial outcome: One covariates properly passed another :  details usage function, see associated documentation.","code":"forecast(object,   t = 1,   plot = ifelse(requireNamespace(\"plotly\", quietly = TRUE), \"plotly\", ifelse(requireNamespace(\"ggplot2\", quietly = TRUE), \"ggplot2\", \"base\")),   pred.cred = 0.95,   ... ) forecast(fitted.model, t = 20, plot = \"base\")$plot structure <-   polynomial_block(p = 1, order = 2, D = 0.95) +   harmonic_block(p = 1, period = 12, D = 0.975) +   noise_block(p = 1, R1 = 0.1) +   regression_block(     p = chickenPox$date >= as.Date(\"2013-09-1\"),     # Vaccine was introduced in September of 2013     name = \"Vaccine\"   )  outcome <- Multinom(p = c(\"p.1\", \"p.2\"), data = chickenPox[, c(2, 3, 5)]) fitted.model <- fit_model(structure * 2, chickenPox = outcome)  forecast(fitted.model, t = 24, plot = \"base\") # Missing extra arguments Error in forecast.fitted_dlm(fitted.model, t = 24, plot = \"base\"): Error: Missing extra argument: Vaccine.1.Covariate forecast(fitted.model,   t = 24,   Vaccine.1.Covariate = rep(TRUE, 24), # Extra argument for covariate 1   Vaccine.2.Covariate = rep(TRUE, 24), plot = \"base\" ) # Extra argument for covariate 2"},{"path":"/articles/fitting.html","id":"updating-a-fitted-model","dir":"Articles","previous_headings":"","what":"Updating a fitted model","title":"Fitting and analysing models","text":"One major advantages sequential nature methodology proposed Alves et al. (2024) allows updating posterior distribution parameter new data arrives, without necessity reprocessing data previously observed. feature particularly useful problems involve monitoring real time inference phenomena. updating fitted_dlm object, user can use update method fitted_dlm class: object argument must fitted_dlm object. Moreover, ... argument must sequence named arguments containing new information observed. example: Note name argument containing new observations must label given outcome first fitting model. case, argument must named update, label used fit_model function label provided fitting model, default name used, consist string 'Series.' followed proper index outcome. update function may require extra arguments containing covariates, pulses (transfer function), offset, etc.. cases, syntax forecast method.","code":"update.fitted_dlm(object, ...) level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, period = 12, order = 2, D = 0.975) # Omitting the last 44 observations outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers)[1:100]) fitted.model <- fit_model(   level, season, # Strucuture   AirPassengers = outcome ) # outcome updated.fit <- update(fitted.model,   AirPassengers = list(data = c(AirPassengers)[101:144]) )"},{"path":"/articles/fitting.html","id":"intervention-and-monitoring","dir":"Articles","previous_headings":"","what":"Intervention and monitoring","title":"Fitting and analysing models","text":"key feature, kDGLM package support intervention automated monitoring. First, user aware specific time change time series part temporal dynamic, user provide information model structure. provide intervention function:  See documentation intervention function details arguments. Also, strongly recommend user consult West Harrison (1997), chapter 11 detailed discussion Feed-Foward Interventions. case user aware behavioral changes data, suspects may occurred unknown time, recommend use automated monitoring. fit model using automated monitoring, user must provide valid value p.monit argument fit_model function argument receives values 00 11, value interpreted prior probability (.e., probability observing data), given time, behavioral change series accommodated temporal dynamic.  approach used automated monitoring almost identical West Harrison (1997), chapter 11.4, using Bayes‚Äô factor, p.monit=0.05=0.05 yields threshold equivalent recommended West Harrison (1997).","code":"data <- c(AirPassengers) # Adding an artificial change, so that we can make an intervention on the data at that point # Obviously, one should NOT change their own data. data[60:144] <- data[60:144] + 100  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  # Reducing the discount factor so that the model can capture the expected change. level <- level |> intervention(time = 60, D = 0.005, var.index = 1) # Comment the line above to see the fit without the intervention  fitted.model <- fit_model(level, season,   AirPassengers = Poisson(lambda = \"rate\", data = data) )  plot(fitted.model, plot.pkg = \"base\") data <- c(AirPassengers) # Adding an artificial change, so that we can make an intervention on the data at that point # Obviously, one should NOT change their own data. data[60:144] <- data[60:144] + 100  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  fitted.model <- fit_model(level, season,   AirPassengers = Poisson(lambda = \"rate\", data = data),   p.monit = 0.05 )  plot(fitted.model, plot.pkg = \"base\")"},{"path":"/articles/fitting.html","id":"tools-for-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Tools for sensitivity analysis","title":"Fitting and analysing models","text":"situations, user may sure value use hyperparameter model (discount factor order block) inclusion structural block. , one might choose perform sensitivity analysis effect choices. motivational example, let us assume unsure value choose discount factor polynomial trend block Poisson model. First, defining model structure, must set discount factor string, used label unspecified parameter: setting discount factor string, structural block becomes partially : , block used fit_model function, unless value D1 specified: user can see error message , undefined dlm_block can used fit model, unless value missing hyper-parameters passed named arguments. Addionally, user may pass several sequence values missing hyper-parameter. case, fit_model function used fit set models, computing comparative metrics. argumetns ..., smooth p.monit discussed Subsection Filtering smoothing. Beyond dlm_blocks dlm_distr objects, ... argument also must containing, undefined parameter (exist), values tested. default, function test possible combinations undefined parameter. user wishes skip combinations, condition argument can used provide string criterion determine combinations shall evaluated. remaining options provide control comparative metrics. metric argument ('mase', 'log.like' 'interval.score') indicates metric use selecting best model (metrics calculated, matter value metric argument, best model chosen metric saved). lag argument indicates number steps ahead used predictions (00 indicates filtered predictions negative values indicate smoothed predictions). pred.cred argument indicates credibility intervals used computing Interval Score. metric.cutoff argument indicates number initial observations ignored computing metrics. evaluating valid combinations hyper parameters, fit_model function returns best model chosen metric, along data frame containing metrics model evaluated. important note hyper parameters can tested directly fit_model function, indeed, components associated FtF_t, DtD_t, hth_t, HtH_t, a1a_1 R1R_1 can treated undefined. Still, user wants test hyper parameter tested directly (order polynomial block period harmonic block), can create one block option perform sensitivity analysis inclusion/exclusion block:","code":"level <- polynomial_block(rate = 1, order = 2, D = \"D1\") summary(level) Basic DLM block. latent states:      Var.Poly: Level, Slope (2 variable(s))  Linear predictors:      rate  Status: undefined Serie length: 1 Interventions at:  Number of latent states: 2 Number of linear predictors: 1 # D1 is missing season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975) outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers)) fitted.model <- fit_model(level, season, AirPassengers = outcome) Error in fit_model(level, season, AirPassengers = outcome): Error: No model to test. Verify if the hyper-parameters are properly specified and if a valid value for condition argument is being passed. # D1 is set within the fit method season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975) outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers)) fitted.model <- fit_model(level, season, AirPassengers = outcome, D1 = 0.95) fit.dlm_block(...,   smooth = TRUE, p.monit = NA,   condition = \"TRUE\", metric = \"log.like\",   pred.cred = 0.95, metric.cutoff = NA, lag = 1 ) level <- polynomial_block(rate = 1, order = 2, D = \"D.level\") season <- harmonic_block(   rate = \"sazo.effect\", period = 12,   order = 2, D = \"D.sazo\" )  outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers))  fit_model(level, season, outcome,   sazo.effect = c(0, 1),   D.level = seq(0.8, 1, l = 11),   D.sazo = seq(0.95, 1, l = 11),   condition = \"sazo.effect==1 | D.sazo==1\" )$search.data |> head() # Creating a block for each order level <- polynomial_block(rate = \"pol.ord.1\", order = 1, D = 0.95) +   polynomial_block(rate = \"pol.ord.2\", order = 2, D = 0.95) +   polynomial_block(rate = \"pol.ord.3\", order = 3, D = 0.95) +   polynomial_block(rate = \"pol.ord.4\", order = 4, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers))  fit_model(level, season, outcome,   # Each block can be present (1) or absent (0).   pol.ord.1 = c(0, 1), pol.ord.2 = c(0, 1),   pol.ord.3 = c(0, 1), pol.ord.4 = c(0, 1),   condition = \"pol.ord.1+pol.ord.2+pol.ord.3+pol.ord.4==1\"   # Only test combinations with exactly one polynomial block. )$search.data |> head()"},{"path":"/articles/fitting.html","id":"sampling-and-hyper-parameter-estimation","dir":"Articles","previous_headings":"","what":"Sampling and hyper parameter estimation","title":"Fitting and analysing models","text":"Lastly, one may also want draw samples latent states, linear predictors /parameters Œ∑t\\eta_t observational model. can useful evaluate non-linear functions model parameters DGLM part bigger model, parameters estimated Gibbs Algorithm. important note , method proposed Alves et al. (2024), sampling posterior distribution latent states straight forward, allowing user obtain large independent (approximately independent, exactly independent) samples low computational cost. See West Harrison (1997), chapter 15, details sampling algorithm. kDGLM package offers simulate function, provides routine drawing independent samples fitted model: example , model 66 latent states 144144 observations (yields total 864864 parameters), takes approximately 0.30.3 seconds draw sample size 5.0005.000. Another useful feature kDGLM package provides approximate value Model likelihood f(y)=‚à´‚Ñùnf(y|Œ∏)f(Œ∏)dŒ∏f(y)= \\int_{\\mathbb{R}^{n}}f(y|\\theta)f(\\theta)d\\theta, yy represents values YtY_t tt Œ∏\\theta represents values Œ∏t\\theta_t tt. feature can used two main purposes: compare different models evaluate posterior distribution hyper parameter. compare different models, ‚Ñ≥1,...,‚Ñ≥k\\mathcal{M}_1,...,\\mathcal{M}_k , one can note f(‚Ñ≥i|y)‚àùf(y|‚Ñ≥i)f(‚Ñ≥i)f(\\mathcal{M}_i|y) \\propto f(y|\\mathcal{M}_i)f(\\mathcal{M}_i), f(y|‚Ñ≥i)=‚à´‚Ñùnf(y|Œ∏,‚Ñ≥i)f(Œ∏|‚Ñ≥i)dŒ∏f(y|\\mathcal{M}_i)= \\int_{\\mathbb{R}^{n}}f(y|\\theta,\\mathcal{M}_i)f(\\theta|\\mathcal{M}_i)d\\theta likelihood model ‚Ñ≥i\\mathcal{M}_i f(‚Ñ≥i)f(\\mathcal{M}_i) prior model ‚Ñ≥i\\mathcal{M}_i. evaluate f(y|‚Ñ≥i)f(y|\\mathcal{M}_i), one can make use coef method, eval_dlm_norm_const fit_model functions setting lag negative number (log likelihood metric lnf(y|‚Ñ≥i)\\ln f(y|\\mathcal{M}_i)). Similarly, user wants obtain marginal posterior distribution hyper parameter œÑ\\tau, can observe f(œÑ|y)‚àùf(y|œÑ)f(œÑ)f(\\tau|y) \\propto f(y|\\tau)f(\\tau), f(y|œÑ)f(y|\\tau) can evaluated using coef method, eval_dlm_norm_const fit_model functions.","code":"simulate(fitted.model, 5000) H.range <- seq.int(0, 2, l = 100) log.like.H <- seq_along(H.range) log.prior.H <- dlnorm(H.range, 0, 1, log = TRUE) for (i in seq_along(H.range)) {   level <- polynomial_block(rate = 1, order = 2, H = H.range[i])   season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)   # Using only 10 observations, for the sake of a pretty plot. For this particular application, the posterior density of H rapidly becomes highly consentrated in a single value.   outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers)[1:10])   fitted.model <- fit_model(level, season, outcome)   log.like.H[i] <- eval_dlm_norm_const(fitted.model) } log.post.H <- log.prior.H + log.like.H post.H <- exp(log.post.H - max(log.post.H)) plot(H.range, post.H, type = \"l\", xlab = \"H\", ylab = \"f(H|y)\")"},{"path":[]},{"path":"/articles/intro.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of contents","title":"Introduction","text":"Introduction Notation structure polynomial trend models structure dynamic regression models structure harmonic trend models structure autoregresive models structure overdispersed models Handling multiple structural blocks Handling multiple linear predictors Handling unknown components planning matrix FtF_t Special priors Normal case Poisson case Gamma case Multinomial case Handling multiple outcomes Filtering smoothing Extracting components Forecasting Intervention monitoring Tools sensitivity analysis Sampling hyper parameter estimation Space-time model hospital admissions gastroenteritis","code":""},{"path":"/articles/intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"vignette intended introduction usage kDGLM package, offers routines Bayesian analysis Dynamic Generalized Linear Models, including fitting (filtering smoothing), forecasting, sampling, intervention automated monitoring, following theory developed /explored Kalman (1960), West Harrison (1997) Alves et al. (2024). document focus exclusively usage package briefly mention theory behind models intention highlighting notation. highly recommend users read theoretical work (dos Santos et al., 2024) based package. document organized following order: First introduce notations class models dealing ; Next present details specification model structure, offering tools allow easy, fast (hopefully) intuitive way defining models; following section discuss details user can specify observational model; present basic examples model fitting, also showing auxiliary functions help user analyse fitted model. also show tools easy model selection; Lastly, present variety advanced examples, combining basic features shown previous sections create complex models;","code":""},{"path":"/articles/intro.html","id":"notation","dir":"Articles","previous_headings":"","what":"Notation","title":"Introduction","text":"section, assume user‚Äôs interest lies analyzing Time Series {Y‚Üít}t=1T\\{\\vec{Y}_t\\}_{t=1}^T, adheres model described : Y‚Üít|Œ∑‚Üít‚àº‚Ñ±(Œ∑‚Üít),g(Œ∑‚Üít)=Œª‚Üít=Ft‚Ä≤Œ∏‚Üít,Œ∏‚Üít=GtŒ∏‚Üít‚àí1+œâ‚Üít,œâ‚Üít‚àºùí©n(h‚Üít,Wt),\\begin{equation} \\begin{aligned} \\vec{Y}_t|\\vec{\\eta}_t &\\sim \\mathcal{F}\\left(\\vec{\\eta}_t\\right),\\\\ g(\\vec{\\eta}_t) &=\\vec{\\lambda}_{t}=F_t'\\vec{\\theta}_t,\\\\ \\vec{\\theta}_t&=G_t\\vec{\\theta}_{t-1}+\\vec{\\omega}_t,\\\\ \\vec{\\omega}_t &\\sim \\mathcal{N}_n(\\vec{h}_t,W_t), \\end{aligned} \\end{equation} model comprises: Y‚Üít=(Y1,t,...,Yr,t)‚Ä≤\\vec{Y}_t=(Y_{1,t},...,Y_{r,t})', outcome, rr-dimensional vector observed variable. Œ∏‚Üít=(Œ∏1,t,...,Œ∏n,t)‚Ä≤\\vec{\\theta}_t=(\\theta_{1,t},...,\\theta_{n,t})', representing unknown parameters (latent states), nn-dimensional vector, consistently dimensioned across observations. Œª‚Üít=(Œª1,t,...,Œªk,t)‚Ä≤\\vec{\\lambda}_t=(\\lambda_{1,t},...,\\lambda_{k,t})', linear predictors, kk-dimensional vector indicating linear transformation latent states. per , Œª‚Üít\\vec{\\lambda}_t assumed (approximately) Normally distributed times directly corresponds observational parameters Œ∑‚Üít\\vec{\\eta}_t, one--one correspondence gg. Œ∑‚Üít=(Œ∑1,t,...,Œ∑l,t)‚Ä≤\\vec{\\eta}_t=(\\eta_{1,t},...,\\eta_{l,t})', observational parameters, ll-dimensional vector defining model‚Äôs observational aspects. Typically, l=kl=k, may hold special cases, Multinomial model, k=l‚àí1k=l-1. ‚Ñ±\\mathcal{F}, distribution Exponential Family indexed Œ∑‚Üít\\vec{\\eta}_t. Pre-determines values kk ll, along link function gg. gg, link function, establishes one--one correspondence Œª‚Üít\\vec{\\lambda}_t Œ∑‚Üít\\vec{\\eta}_t. FtF_t, design matrix, user-defined, mostly known, matrix size k√ónk \\times n. GtG_t, evolution matrix, user-defined, mostly known, matrix size n√ónn \\times n. h‚Üít=(h1,t,...,hn,t)‚Ä≤\\vec{h}_t=(h_{1,t},...,h_{n,t})', drift, known nn-dimensional vector, typically set 0‚Üí\\vec{0} except model interventions (refer subsection ). WtW_t, known covariance matrix size n√ónn \\times n, specified user. Per , define ùíüt\\mathcal{D}_t cumulative information observing first tt data points, ùíü0\\mathcal{D}_0 denoting pre-observation knowledge process {Yt}t=1T\\{Y_t\\}^T_{t=1}. specification WtW_t follows , section 6.3, Wt=Var[GtŒ∏t‚àí1|ùíüt‚àí1]‚äô(1‚àíDt)‚äòDt+HtW_t=Var[G_t\\theta_{t-1}|\\mathcal{D}_{t-1}] \\odot (1-D_t) \\oslash D_t + H_t. , DtD_t (discount matrix) n√ónn \\times n matrix values 00 11, ‚äô\\odot represents Hadamard product, ‚äò\\oslash signifies Hadamard division. HtH_t another known n√ónn \\times n matrix specified user. formulation implies DtD_t entries 11, HtH_t entries 00, model equates Generalized Linear Model. prototypical example within general model framework Poisson model augmented dynamic level featuring linear growth single covariate XX: Yt|Œ∑t‚àºùí´(Œ∑t),ln(Œ∑t)=Œªt=Œºt+Œ≤tXt,Œºt=Œºt‚àí1+Œ≤t‚àí1+œâŒº,t,ŒΩt=ŒΩt‚àí1+œâŒΩ,t,Œ≤t=Œ≤t‚àí1+œâŒ≤,t,œâŒº,t,œâŒΩ,t,œâŒ≤,t‚àºùí©3(0‚Üí,Wt),\\begin{equation} \\begin{aligned} Y_t|\\eta_t &\\sim \\mathcal{P}\\left(\\eta_t\\right),\\\\ ln(\\eta_t) &=\\lambda_{t}=\\mu_t+\\beta_t X_t,\\\\ \\mu_t&=\\mu_{t-1}+\\beta_{t-1}+\\omega_{\\mu,t},\\\\ \\nu_t&=\\nu_{t-1}+\\omega_{\\nu,t},\\\\ \\beta_t&=\\beta_{t-1}+\\omega_{\\beta,t},\\\\ \\omega_{\\mu,t},\\omega_{\\nu,t},\\omega_{\\beta,t} &\\sim \\mathcal{N}_3(\\vec{0},W_t), \\end{aligned} \\end{equation} model, ‚Ñ±\\mathcal{F} denotes Poisson distribution; model dimensions r=k=l=1r=k=l=1; state vector Œ∏t\\theta_t (Œºt,ŒΩt,Œ≤t)‚Ä≤(\\mu_t,\\nu_t,\\beta_t)' dimension n=3n=3; link function gg natural logarithm; matrices FtF_t GtG_t defined : Ft=[10Xt]Gt=[110010001] F_t=\\begin{bmatrix}     1 \\\\     0 \\\\     X_t  \\end{bmatrix} \\quad G_t=\\begin{bmatrix}     1 & 1 & 0 \\\\     0 & 1 & 0 \\\\     0 & 0 & 1  \\end{bmatrix} Consider now Normal model unknown mean Œ∑1,t\\eta_{1,t} unknown precision Œ∑2,t\\eta_{2,t}: Yt|Œ∑t‚àºùí©(Œ∑1,t,Œ∑2,t‚àí1),Œ∑1,t=Œª1,t=Œº1,t+Œ≤tXt,ln(Œ∑2,t)=Œª2,t=Œº2,t,Œº1,t=Œº1,t‚àí1+Œ≤t‚àí1+œâŒº1,t,ŒΩt=ŒΩt‚àí1+œâŒΩ,t,Œ≤t=Œ≤t‚àí1+œâŒ≤,t,Œº2,t=œït‚àí1Œº2,t‚àí1+œâŒº2,t,œït=œït‚àí1+œâœï,t,œâŒº1,t,œâŒΩ,t,œâŒº,t,œâŒ≤,t,œâœï,t‚àºùí©5(0‚Üí,Wt),\\begin{equation} \\begin{aligned} Y_t|\\eta_t &\\sim \\mathcal{N}\\left(\\eta_{1,t},\\eta_{2,t}^{-1}\\right),\\\\ \\eta_{1,t} &=\\lambda_{1,t}=\\mu_{1,t}+\\beta_t X_t,\\\\ ln(\\eta_{2,t}) &=\\lambda_{2,t}=\\mu_{2,t},\\\\ \\mu_{1,t}&=\\mu_{1,t-1}+\\beta_{t-1}+\\omega_{\\mu_1,t},\\\\ \\nu_t&=\\nu_{t-1}+\\omega_{\\nu,t},\\\\ \\beta_t&=\\beta_{t-1}+\\omega_{\\beta,t},\\\\ \\mu_{2,t}&=\\phi_{t-1}\\mu_{2,t-1}+\\omega_{\\mu_2,t},\\\\ \\phi_{t}&=\\phi_{t-1}+\\omega_{\\phi,t},\\\\ \\omega_{\\mu_1,t},\\omega_{\\nu,t},\\omega_{\\mu,t},\\omega_{\\beta,t},\\omega_{\\phi,t} &\\sim \\mathcal{N}_5(\\vec{0},W_t), \\end{aligned} \\end{equation} case, ‚Ñ±\\mathcal{F} represents Normal distribution; model dimensions r=1r=1 k=l=2k=l=2; state vector Œ∏t\\theta_t (Œº1,t,ŒΩt,Œ≤t,Œº2,t,œït)‚Ä≤(\\mu_{1,t},\\nu_t,\\beta_t,\\mu_{2,t},\\phi_t)' dimension n=5n=5; link function gg matrices FtF_t, GtG_t : g([x1x2])=[x1ln(x2)]Ft=[1000Xt00100]Gt=[11000010000010000¬®0œï000¬®001] g\\left(\\begin{bmatrix}     x_1 \\\\     x_2 \\end{bmatrix}\\right)= \\begin{bmatrix}     x_1 \\\\     \\ln(x_2) \\end{bmatrix}\\quad F_t=\\begin{bmatrix}     1 & 0 \\\\     0 & 0\\\\     X_t & 0 \\\\     0 & 1 \\\\     0 & 0 \\end{bmatrix} \\quad G_t=\\begin{bmatrix}     1 & 1 & 0 & 0 & 0\\\\     0 & 1 & 0 & 0 & 0\\\\     0 & 0 & 1 & 0 & 0\\\\     0 & 0¬®& 0 & \\phi & 0\\\\     0 & 0¬®& 0 & 0 & 1 \\end{bmatrix} configuration introduces l=2l=2 observational parameters, necessitating k=2k=2 linear predictors. first linear predictor pertains location parameter Normal distribution includes linear growth model covariate XtX_t. second linear predictor, associated precision parameter, models log precision autoregressive (AR) process. express model terms Extended Kalman Filter (Kalman, 1960; West Harrison, 1997). formulation aligns concept traditional Stochastic Volatility model, highlighted Alves et al. (2024). Normal Poisson models illustrate univariate cases. However, general model also accommodates multivariate outcomes, multinomial case. Consider vector counts Y‚Üít=(Y1,t,Y2,t,Y3,t,Y4,t,Y5,t)‚Ä≤\\vec{Y}_t=(Y_{1,t},Y_{2,t},Y_{3,t},Y_{4,t},Y_{5,t})', Yi,T‚àà‚Ñ§Y_{,T} \\\\mathbb{Z} Nt=‚àë=15Yi,tN_t=\\sum_{=1}^{5}Y_{,t}. model : Y‚Üí5,t|Nt,Œ∑‚Üít‚àºMultinomial(Nt,Œ∑‚Üít),ln(Œ∑i,tŒ∑5,t)=Œª1,t=Œºi,t,=1,...,4Œºi,t=Œºi,t‚àí1+œâŒºi,t,=1,...,4œâŒº1,t,œâŒº2,t,œâŒº3,t,œâŒº4,t‚àºùí©4(0‚Üí,Wt),\\begin{equation} \\begin{aligned} \\vec{Y}_{5,t}|N_t,\\vec{\\eta}_{t} &\\sim Multinomial\\left(N_t,\\vec{\\eta}_{t}\\right),\\\\ \\ln\\left(\\frac{\\eta_{,t}}{\\eta_{5,t}}\\right) &=\\lambda_{1,t}=\\mu_{,t},=1,...,4\\\\ \\mu_{,t}&=\\mu_{,t-1}+\\omega_{\\mu_i,t},=1,...,4\\\\ \\omega_{\\mu_1,t},\\omega_{\\mu_2,t},\\omega_{\\mu_3,t},\\omega_{\\mu_4,t} &\\sim \\mathcal{N}_4(\\vec{0},W_t), \\end{aligned} \\end{equation} multinomial model, ‚Ñ±\\mathcal{F} Multinomial distribution; model dimensions r=5r=5, l=5l=5 k=4k=4; state vector Œ∏t\\theta_t (Œº1,t,Œº2,t,Œº3,t,Œº4,t)‚Ä≤(\\mu_{1,t},\\mu_{2,t},\\mu_{3,t},\\mu_{4,t})'; FtF_t GtG_t identity matrices size 4√ó44\\times 4; link function gg maps ‚Ñù5\\mathbb{R}^5 ‚Ñù4\\mathbb{R}^{4} : g([x1x2x3x4x5])=[ln(x1x5)ln(x2x5)ln(x3x5)ln(x4x5)] g\\left(\\begin{bmatrix}     x_1 \\\\     x_2 \\\\     x_3 \\\\     x_4 \\\\     x_5 \\end{bmatrix}\\right)= \\begin{bmatrix}     \\ln\\left(\\frac{x_1}{x_5}\\right) \\\\     \\ln\\left(\\frac{x_2}{x_5}\\right) \\\\     \\ln\\left(\\frac{x_3}{x_5}\\right) \\\\     \\ln\\left(\\frac{x_4}{x_5}\\right) \\end{bmatrix} Note Multinomial distribuition, Œ∑i‚â•0,‚àÄ\\eta_i\\ge 0, \\forall ‚àë=15Œ∑i=1\\sum_{=1}^{5} \\eta_i=1. Thus, k=l‚àí1k=l-1 linear predictors necessary describe model. ‚Äôs important emphasize chosen illustrate simple model structures, random walk log odds outcome, neither general model framework kDGLM package restricts configurations. Analysts flexibility tailor models specific contexts, including incorporation additional latent states enhance outcome explanation. Lastly, general model framework can extended encompass multiple outcome models. details, see Handling multiple outcomes. Given complexity manually specifying model components, kDGLM package includes range auxiliary functions simplify process. subsequent section delves tools.","code":""},{"path":"/articles/intro.html","id":"single-outcome-models","dir":"Articles","previous_headings":"","what":"Single outcome models","title":"Introduction","text":"kDGLM package supports joint modelling multiple time series, structure distribution (see Handling multiple outcomes). flexibility comes somewhat complex syntax, designed allow analysts meticulously define every aspect model. aimed create intuitive yet powerful syntax, recognize may feel overwhelming new users. address , kDGLM package also provides simplified syntax, similar lm glm functions native R. simplified approach supports single-outcome models supported distributions, still allowing complex dynamic structures parameters observational distribution. Lets consider classic airline data, comprised monthly totals international airline passengers, 1949 1960. can adjust simple Time Series model using following code: Detail plot method can found Filtering smoothing, now focus usage kdglm function. default, intercept model considered dynamic discount factor 0.950.95. One can specify details intercept using pol function inside formula: One can also add complex structures model using functions harhar, regreg, ARAR, TFTF noisenoise: details, see Structures. dynamic regressions, kdglm package adopts convetions lm glm functions:  multinomial case, outcome model vector, user may include several formulas, one index outcome vector:  Lastly, outcomes may require extra arguments parameters observational model. instance, kdglm package allows dynamic structure parameters model, Normal family, user may include dynamic structure mean variance:  details outcome see Outcomes.","code":"fitted.data <- kdglm(c(AirPassengers) ~ 1, family = Poisson) plot(fitted.data) fitted.data <- kdglm(c(AirPassengers) ~ pol(D = 0.99), family = Poisson) plot(fitted.data) fitted.data <- kdglm(c(AirPassengers) ~ pol(D = 0.99, order = 2) + har(period = 12) + noise(R1 = 0.01), family = Poisson) plot(fitted.data) # Total number of cases chickenPox$Total <- rowSums(chickenPox[, c(2, 3, 4, 6, 5)]) # Indicator of the introcution of the chicken pox vaccine to the national program of immunization chickenPox$Vaccine <- chickenPox$date >= as.Date(\"2013-09-01\")  fitted.data <- kdglm(`< 5 year` ~ pol(2, D = 0.95) + har(12, D = 0.975) + Vaccine,   N = chickenPox$Total,   family = Multinom,   data = chickenPox ) plot(fitted.data, plot.pkg = \"base\") fitted.data <- kdglm(   `< 5 year` ~ pol(2, D = 0.95) + har(12, D = 0.975) + Vaccine,   `10 to 14 years` ~ pol(2, D = 0.95) + har(12, D = 0.975) + Vaccine,   `15 to 49 years` ~ pol(2, D = 0.95) + har(12, D = 0.975) + Vaccine,   `50 years or more` ~ pol(2, D = 0.95) + har(12, D = 0.975) + Vaccine,   N = chickenPox$Total,   family = Multinom,   data = chickenPox ) plot(fitted.data, plot.pkg = \"base\") fitted.data <- kdglm(corn.log.return ~ 1,   V = ~1,   family = Normal,   data = cornWheat[1:500, ] ) plot(fitted.data, plot.pkg = \"base\")"},{"path":[]},{"path":"/articles/outcomes.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of contents","title":"Creation of model outcomes","text":"Introduction Notation structure polynomial trend models structure dynamic regression models structure harmonic trend models structure autoregresive models structure overdispersed models Handling multiple structural blocks Handling multiple linear predictors Handling unknown components planning matrix FtF_t Special priors Normal case Poisson case Gamma case Multinomial case Handling multiple outcomes Filtering smoothing Extracting components Forecasting Intervention monitoring Tools sensibility analysis Sampling hyper parameter estimation Space-time model hospital admissions gastroenteritis","code":""},{"path":"/articles/outcomes.html","id":"creation-of-model-outcomes","dir":"Articles","previous_headings":"","what":"Creation of model outcomes","title":"Creation of model outcomes","text":"presented tools creating structure DGLM model, specifically, shown define relationship latent vector Œ∏‚Üít\\vec{\\theta}_t linear predictors Œª‚Üít\\vec{\\lambda}_t, along temporal dynamic Œ∏‚Üít\\vec{\\theta}_t. Now proceed define observational model Y‚Üít\\vec{Y}_t relationship Œª‚Üít\\vec{\\lambda}_t Œ∑‚Üít\\vec{\\eta}_t, .e., highlighted part following equations: $$ \\require{color} \\begin{equation}\\begin{aligned} \\color{red}{Y_t|\\eta_t }&{\\color{red}\\sim \\mathcal{F}\\left(\\eta_t\\right),}\\\\ {\\color{red}g(\\eta_t) }&{\\color{red}= \\lambda_{t}}=F_t'\\theta_t,\\\\ \\theta_t &=G_t\\theta_{t-1}+\\omega_t,\\\\ \\omega_t &\\sim \\mathcal{N}_n(h_t,W_t), \\end{aligned}\\end{equation} $$ subsection, assume linear predictors already defined, along structure comes along (.e., take granted part model highlighted), moreover, also assume user created necessary amount linear predictors type outcome linear predictors named Œª1\\lambda_1,‚Ä¶,Œªk\\lambda_k. Currently, offer support following observational distributions: Normal distribution unknown mean unknown variance (dynamic predictive structure parameters). particular case, also support Normal distribution known variance. Bivariate Normal distribution unknown means, unknown variances unknown correlation (dynamic predictive structure parameters). particular case, also support Multivariate Normal distribution known covariance matrix. Poisson distribution unknown rate parameter dynamic predictive structure. Multinomial distribution known number trials, arbitrary number categories, unknown event probabilities dynamic predictive structure probability category. particular cases, support Binomial Bernoulli distributions. Gamma distribution known shape parameter, unknown mean dynamic predictive structure. currently working include several distributions. particular, following distributions shall supported soon: Dirichlet; Geometric; Negative Binomial; Rayleigh; Pareto; Asymmetric Laplace known mean.","code":""},{"path":"/articles/outcomes.html","id":"normal-case","dir":"Articles","previous_headings":"","what":"Normal case","title":"Creation of model outcomes","text":"sense, can think basic case, least theoretical point view, since Kalman Filter first developed specific scenario (Kalman, 1960). Indeed, static observational variance/covariance matrix (even unknown), fall within DLM class, exact analytical solution posterior latent states. adaptations, one can also degree temporal dynamic variance/covariance matrix (see Ameen Harrison, 1985; West Harrison, 1997, sec. 10.8). Yet, kDGLM package goes step , offering possibility predictive structure mean observational variance/covariance matrix, allowing inclusion dynamic regressions, seasonal trends, autoregressive components, etc., parameters. present case two contexts: first, simple implementation Kalman Filter Smoother, deals data coming Normal distribution (possibly multivariate) unknown mean known variance/covariance matrix; second deals data coming univariate Normal distribution unknown mean unknown variance. Also, end second subsection, present extension bivariated Normal distribution unknown mean unknown covariance matrix. study conducted expand approach kk-variated case, arbitrary kk.","code":""},{"path":"/articles/outcomes.html","id":"normal-outcome-with-known-variance","dir":"Articles","previous_headings":"Normal case","what":"Normal outcome with known variance","title":"Creation of model outcomes","text":"Suppose sequence kk-dimensional vectors Y‚Üít\\vec{Y}_t, Y‚Üít=(Y1t,...,Ykt)‚Ä≤\\vec{Y}_t=(Y_{1t},...,Y_{kt})'. assume : Y‚Üít|Œºt,V‚àºùí©k(Œº‚Üít,V),Œºit=Œªit,=1,...,k, \\begin{aligned} \\vec{Y}_t|\\mu_t,V &\\sim \\mathcal{N}_k\\left(\\vec{\\mu}_t,V\\right),\\\\ \\mu_{}&=\\lambda_{}, =1,...,k,\\\\ \\end{aligned}  Œº‚Üít=(Œº1,t,...,Œºk,t)‚Ä≤\\vec{\\mu}_t=(\\mu_{1,t},...,\\mu_{k,t})' VV known symmetric, definite positive k√ókk\\times k matrix. Also, model, assume link function gg identity function. create outcome model, can make use Normal function: Intuitively, mu argument must character vector size kk containing names linear predictors associated Œºi.\\mu_{.}. user must also specify one (one) V, Tau Sd. user provides V, VV assumed value; user provides Tau, VV assumed inverse given matrix (.e., Tau precision matrix); user provides Sd, VV assumed standard deviation observations equal main diagonal Sd correlation observations assumed equal -diagonal elements Sd. data argument must T√ókT \\times k matrix containing values Y‚Üít\\vec{Y}_t observation. Notice line tt must values categories time tt column ii must represent values category ii time. value argument data available (NA) specific time, assumed observation time, thus update step filtering algorithm skipped time. Note evolution step still performed, predictive distribution missing data updated distribution latent states time still provided. Next, present brief example usage Normal function univariate outcome (multivariate case works similarly). use functions described previous sections, well functions presented later . now, let us focus usage Normal function.  Notice , since univariate case, data argument can vector.","code":"Normal(mu, V = NA, Tau = NA, Sd = NA, data) level <- polynomial_block(mu = 1, D = 0.95, order = 2) season <- harmonic_block(mu = 1, period = 12, D = 0.975)  outcome <- Normal(   mu = \"mu\", V = 6e-3,   data = c(log(AirPassengers)) ) fitted.model <- fit_model(level, season, outcome) plot(fitted.model, plot.pkg = \"base\")"},{"path":"/articles/outcomes.html","id":"univariated-normal-outcome-with-unknown-variance","dir":"Articles","previous_headings":"Normal case","what":"Univariated Normal outcome with unknown variance","title":"Creation of model outcomes","text":"type outcome, assume : Yt|Œºt,œÑt‚àºùí©(Œºt,œÑt‚àí1),Œºt=Œª1t,ln{œÑt}=Œª2t. \\begin{aligned} Y_t|\\mu_t,\\tau_t &\\sim \\mathcal{N}\\left(\\mu_t,\\tau_t^{-1}\\right),\\\\ \\mu_{t}&=\\lambda_{1t},\\\\ \\ln\\{\\tau_{t}\\}&=\\lambda_{2t}.\\\\ \\end{aligned} create outcome model, also make use Normal function: Just , mu argument must character representing label linear predictor associated Œºt\\mu_t. user must also specify one (one) V, Tau Sd, must character string representing label associated linear predictor. Similar known variance case, allow multiple parametrizations observational variance. Specifically, user provides V, assume Œª2t=ln{œÉt2}=‚àíln{œÑt}\\lambda_{2t}=\\ln\\{\\sigma^2_{t}\\}=-\\ln\\{\\tau_t\\}; user provides Sd, assume Œª2t=ln{œÉt}=‚àíln{œÑt}/2\\lambda_{2t}=\\ln\\{\\sigma_{t}\\}=-\\ln\\{\\tau_t\\}/2; user provides Tau, default parametrization used, .e., Œª2t=ln{œÑt}\\lambda_{2t}=\\ln\\{\\tau_t\\}. data argument usually T√ó1T \\times 1 matrix containing values YtY_t observation. cases Y‚Üít\\vec{Y}_t univariated, also accept data line vector, case assume coordinate data represents observed value time. value data available (NA) specific time, assumed observation time, thus update step filtering algorithm skipped time. Note evolution step still performed, predictive distribution missing data updated distribution latent states time still provided. Next, present brief example usage outcome. use functions described previous sections, well functions presented later . now, let us focus usage Normal function.  Currently, also support models bivariate Normal outcomes. scenario assume following model: Yt|Œºt,Vt‚àºùí©2(Œºt,Vt),Œºt=[Œº1,tŒº2t],Vt=[œÑ1,t‚àí1(œÑ1,tœÑ2,t)‚àí1/2œÅt(œÑ1,tœÑ2,t)‚àí1/2œÅtœÑ2‚àí1],Œºi,t=Œªi,t,=1,2œÑi,t=ln{Œª(+2),t},=1,2œÅt=tanh{Œª5,t}. \\begin{aligned} Y_t|\\mu_{t},V_t &\\sim \\mathcal{N}_2\\left(\\mu_t,V_t\\right),\\\\ \\mu_t&=\\begin{bmatrix}\\mu_{1,t}\\\\ \\mu_{2t}\\end{bmatrix},\\\\ V_t&=\\begin{bmatrix}\\tau_{1,t}^{-1} & (\\tau_{1,t}\\tau_{2,t})^{-1/2}\\rho_t\\\\ (\\tau_{1,t}\\tau_{2,t})^{-1/2}\\rho_t & \\tau_2^{-1}\\end{bmatrix},\\\\ \\mu_{,t}&=\\lambda_{,t}, =1,2\\\\ \\tau_{,t}&=\\ln\\{\\lambda_{(+2),t}\\}, =1,2\\\\ \\rho_{t}&=\\tanh\\{\\lambda_{5,t}\\}.\\\\ \\end{aligned} Notice œÅt\\rho_t represents (covariance) series time tt. guarantee œÅt‚àà(‚àí1,1)\\rho_t \\(-1,1), use Inverse Fisher transformation (also known hyperbolic tangent function) link function. models, `mu must character vector, similarly case VV known, V, Tau Sd must 2√ó22 \\times 2 character matrix. main diagonal elements interpreted linear predictors associated precisions, variances standard deviations, depending user used Tau, V Sd, respectively. diagonal elements must equals (one can NA) interpreted linear predictor associated œÅt\\rho_t. Bellow present example bivariate case: Notice , second plot, correlation series (represented atanh.rho, .e., plot shows tanh‚àí1(œÅ)\\tanh^{-1}(\\rho)) significant changes time, making proposed model much adequate two independent Normal models (one outcome).","code":"Normal(mu, V = NA, Tau = NA, Sd = NA, data) structure <- polynomial_block(mu = 1, D = 0.95) +   polynomial_block(V = 1, D = 0.95)  outcome <- Normal(mu = \"mu\", V = \"V\", data = cornWheat$corn.log.return[1:500]) fitted.model <- fit_model(structure, outcome) plot(fitted.model, plot.pkg = \"base\")"},{"path":"/articles/outcomes.html","id":"section","dir":"Articles","previous_headings":"","what":"Creation of model outcomes","title":"Creation of model outcomes","text":"","code":"# Bivariate Normal case structure <- (polynomial_block(mu = 1, D = 0.95) +   polynomial_block(log.V = 1, D = 0.95)) * 2 +   polynomial_block(atanh.rho = 1, D = 0.95)  outcome <- Normal(   mu = c(\"mu.1\", \"mu.2\"),   V = matrix(c(\"log.V.1\", \"atanh.rho\", \"atanh.rho\", \"log.V.2\"), 2, 2),   data = cornWheat[1:500, c(4, 5)] ) fitted.model <- fit_model(structure, outcome)"},{"path":"/articles/outcomes.html","id":"predictions","dir":"Articles","previous_headings":"Normal case > Univariated Normal outcome with unknown variance","what":"Predictions","title":"Creation of model outcomes","text":"","code":"plot(fitted.model, plot.pkg = \"base\")"},{"path":"/articles/outcomes.html","id":"correlation","dir":"Articles","previous_headings":"Normal case > Univariated Normal outcome with unknown variance","what":"Correlation","title":"Creation of model outcomes","text":"","code":"plot(fitted.model, linear.predictors = \"atanh.rho\", plot.pkg = \"base\")"},{"path":"/articles/outcomes.html","id":"poisson-case","dir":"Articles","previous_headings":"","what":"Poisson case","title":"Creation of model outcomes","text":"case, assume following observational model: Yt|Œ∑t‚àºPoisson(Œ∑t),ln(Œ∑t)=Œªt. \\begin{equation}\\begin{aligned} Y_t|\\eta_t &\\sim Poisson\\left(\\eta_t\\right),\\\\ \\ln(\\eta_t) &=\\lambda_{t}. \\end{aligned}\\end{equation} notation introduced , link function gg (natural) logarithm function. define observational model, offer Poisson function, whose usage presented bellow: usual literature, refer rate parameter Poisson distribution lambda (although, context document, might seem confusing) user must provide argument name linear predictor associated parameter. argument data user must provide sequence numerical values consisting observed values YtY_t time. Since YtY_t scalar tt, user can pass outcome vector matrix single column. value data available (NA) specific time, assumed observation time, thus update step filtering algorithm skipped time. Note evolution step still performed, predictive distribution missing data updated distribution latent states time still provided. Lastly, offset argument optional can used provide measure scale data. offset provided equal EtE_t, fit model assuming : Yt|Œ∏t‚àºPoisson(Œ∑tEt),ln(Œ∑t)=Œªt. \\begin{equation}\\begin{aligned} Y_t|\\theta_t &\\sim Poisson\\left(\\eta_tE_t\\right),\\\\ \\ln(\\eta_t) &=\\lambda_{t}. \\end{aligned}\\end{equation} Bellow present example usage outcome. use functions described previous section, well functions present later , now, let us focus usage Poisson function.  Notice , creating structure, defined linear predictor named rate, whose behavior explained second order polynomial trend seasonal component defined second order harmonic block. Since value passed rate equals 11 blocks, components constant effect (equal 11) linear predictor times, although components change values time capture behavior series. Later , creating outcome, pass name 'rate' linear predictor associated lambda, rate (mean) parameter Poisson distribution. particularly simply usage package, Poisson kernel one smallest amount parameters. Moving forward, present outcomes whose specification can bit complex.","code":"Poisson(lambda, data, offset = data^0) data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, period = 12, order = 2, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) plot(fitted.data, plot.pkg = \"base\")"},{"path":"/articles/outcomes.html","id":"gamma-case","dir":"Articles","previous_headings":"","what":"Gamma case","title":"Creation of model outcomes","text":"subsection present Gamma case, assume following observational model: Yt|Œ±t,Œ≤t‚àºùí¢(Œ±t,Œ≤t),ln{Œ±t}=Œª1t,ln{Œ≤t}=Œª2t \\begin{equation}\\begin{aligned} Y_t|\\alpha_t,\\beta_t &\\sim \\mathcal{G}\\left(\\alpha_t,\\beta_t\\right),\\\\ \\ln\\{\\alpha_t\\}&=\\lambda_{1t},\\\\ \\ln\\{\\beta_t\\}&=\\lambda_{2t} \\end{aligned}\\end{equation} outcome variations. First, ‚Äôs matter parametrization. allow user define model non redundant pair : Œ±t,Œ≤t,œït=Œ±t,Œºt=Œ±tŒ≤t,œÉt=1Œ≤t. \\begin{equation}\\begin{aligned} \\alpha_t&,\\\\ \\beta_t&,\\\\ \\phi_t&=\\alpha_t,\\\\ \\mu_t&=\\frac{\\alpha_t}{\\beta_t},\\\\ \\sigma_t&=\\frac{1}{\\beta_t}. \\end{aligned}\\end{equation} Naturally, user specify Œ±t\\alpha_t œït\\phi_t Œ≤t\\beta_t œÉt\\sigma_t, specification redundant best, incoherent worst. Outside cases, package raise error, combination can used user, allowing structure model defined within variables convenient (may easier intuitive specify structure mean Œºt\\mu_t scale œÉt\\sigma_t, shape Œ±t\\alpha_t rate Œ≤t\\beta_t). Another particularity Gamma outcome user may set shape parameter œït\\phi_t known constant. case, user must specify structure mean parameter Œºt\\mu_t (allowed specify neither Œ≤t\\beta_t œÉt\\sigma_t). general, expect shape parameter known, still, important applications common use particular cases Gamma distribution, Exponential Model (œït=1\\phi_t=1) œá2\\chi^2 model (œït=0.5\\phi_t=0.5). estimation shape parameter œït\\phi_t still development, , current version package support unknown œït\\phi_t (version package proper estimation œït\\phi_t released soon). matter parametrization, link function gg always logarithm function, , given certain parametrization, can write linear predictor parametrization linear transformation original. examples section, always use parameters œït\\phi_t (applicable) Œºt\\mu_t, code used can trivially adapted parametrizations. Similar Poisson case, argument data must provide set numerical values consisting observed values YtY_t time. Since YtY_t scalar tt, user can pass outcome either vector matrix single column. value argument data available (NA) specific time, assumed observation time, thus update step filtering algorithm skipped time. Note evolution step still performed, predictive distribution missing data updated distribution latent states time still provided. offset argument optional can used provide measure scale data. offset provided equal EtE_t, fit model assuming : Yt|Œ∏t‚àºùí¢(Œ±t,Œ≤tEt‚àí1). \\begin{equation}\\begin{aligned} Y_t|\\theta_t &\\sim \\mathcal{G}\\left(\\alpha_t,\\beta_t E_t^{-1}\\right). \\end{aligned}\\end{equation} Note model implies : ùîº[Yt|Œ∏t]=Œ±tŒ≤tEt. \\mathbb{E}[Y_t|\\theta_t]=\\frac{\\alpha_t}{\\beta_t}E_t. arguments phi, mu, alpha, beta sigma character strings indicating name linear predictor associated respective linear predictor. user may opt pass phi positive numerical value, case, shape parameter œït\\phi_t considered known equal phi tt.","code":"Gamma(phi = NA, mu = NA, alpha = NA, beta = NA, sigma = NA, data = , offset = data^0) structure <- polynomial_block(mu = 1, D = 0.95) Y <- (cornWheat$corn.log.return[1:500] - mean(cornWheat$corn.log.return[1:500]))**2  outcome <- Gamma(phi = 0.5, mu = \"mu\", data = Y) fitted.data <- fit_model(structure, outcome) plot(fitted.data, plot.pkg = \"base\")"},{"path":"/articles/outcomes.html","id":"multinomial-case","dir":"Articles","previous_headings":"","what":"Multinomial case","title":"Creation of model outcomes","text":"Let us assume sequence kk-dimensional non-negative integer vectors YtY_t, Yt=(Y1t,...,Ykt)‚Ä≤Y_t=(Y_{1t},...,Y_{kt})' : Yt|Nt,p‚Üít‚àºMultinom(Nt,p‚Üít),ln{pitpkt}=Œªit,=1,...,k‚àí1,Nt=‚àë=1kYit, \\begin{equation}\\begin{aligned} Y_t|N_t,\\vec{p}_t &\\sim Multinom\\left(N_t,\\vec{p}_t\\right),\\\\ \\ln\\left\\{\\frac{p_{}}{p_{kt}}\\right\\}&=\\lambda_{}, =1,...,k-1,\\\\ N_t&=\\sum_{=1}^{k}Y_{}, \\end{aligned}\\end{equation}  p‚Üít=(p1t,...,pkt)‚Ä≤\\vec{p}_t=(p_{1t},...,p_{kt})', pit>0,‚àÄip_{} > 0, \\forall ‚àë=1kpit=1\\sum_{=1}^k p_{}=1. Notice NtN_t automatically defined values YtY_t, NtN_t always considered known parameter. Also, important point model k‚àí1k-1 free parameters (instead kk), since restriction ‚àë=1kpit=1\\sum_{=1}^k p_{}=1 implies defining k‚àí1k-1 entries p‚Üít\\vec{p}_t defines remaining value. Specifically, always take last entry (category) YtY_t reference value, pktp_{kt} can considered baseline probability observing data category (.e., model pitp_{} relates baseline probability pktp_{kt}). create outcome model, can make use Multinom function: Multinomial case, p must character vector size k‚àí1k-1 containing names linear predictors associated ln{pitpkt}\\ln\\left\\{\\frac{p_{}}{p_{kt}}\\right\\} =1,...,k‚àí1i=1,...,k-1. data argument must T√ókT \\times k matrix containing values YtY_t observation. Notice line ii must represent values categories time ii column jj must represent values category jj time. value argument data available (NA) specific time, assumed observation time, thus update step filtering algorithm skipped time. Note evolution step still performed, predictive distribution missing data updated distribution latent states time still provided. offset argument optional must dimensions data (dimensions interpreted manner). argument can used provide measure scale data , offset provided, , time tt, offset equal Et=(E1t,...,Ekt)‚Ä≤E_t=(E_{1t},...,E_{kt})', fit model assuming : Yt|Œ∏t‚àºMultinom(Nt,p‚Üít*),ln{pit*pkt*}=ln{pitpkt}+ln{EitEkt},=1,...,k‚àí1. \\begin{equation}\\begin{aligned} Y_t|\\theta_t &\\sim Multinom\\left(N_t,\\vec{p}^*_t\\right),\\\\ \\ln\\left\\{\\frac{p^*_{}}{p^*_{kt}}\\right\\}&=\\ln\\left\\{\\frac{p_{}}{p_{kt}}\\right\\}+\\ln\\left\\{\\frac{E_{}}{E_{kt}}\\right\\}, =1,...,k-1. \\end{aligned}\\end{equation} end subsection present brief discussion implications inclusion offset interpret , well explanation way chose include . , present brief example usage outcome:","code":"Multinom(p, data, offset = data^0) # Multinomial case structure <- (   polynomial_block(p = 1, order = 2, D = 0.95) +     harmonic_block(p = 1, period = 12, D = 0.975) +     noise_block(p = 1, R1 = 0.1) +     regression_block(p = chickenPox$date >= as.Date(\"2013-09-01\"))   # Vaccine was introduced in September of 2013 ) * 4  outcome <- Multinom(p = structure$pred.names, data = chickenPox[, c(2, 3, 4, 6, 5)]) fitted.data <- fit_model(structure, chickenPox = outcome) summary(fitted.data) plot(fitted.data, plot.pkg = \"base\")"},{"path":"/articles/outcomes.html","id":"some-comments-on-the-usage-of-an-offset","dir":"Articles","previous_headings":"Multinomial case","what":"Some comments on the usage of an offset","title":"Creation of model outcomes","text":"model presented section intend describe phenomena NtN_t subjects distributed randomly (necessarily uniformly randomly) among kk categories. scenario, pitp_{} represent probability one observation fall within category ii, : pit=‚Ñô(Yit=1|Nt=1). p_{}=\\mathbb{P}(Y_{}=1|N_t=1). applications, might case NtN_t represents counting event interest want model probability event occurring category. scenario, clear use multinomial model, since : pit=‚Ñô(Observation belong category |Event occured), p_{}=\\mathbb{P}(\\text{Observation belong category }|\\text{Event occured}),  actually want known: pit*=‚Ñô(Event occured|Observation belong category ). p^*_{}=\\mathbb{P}(\\text{Event occured}|\\text{Observation belong category }). Notice can write: pit*=‚Ñô(Event occured|Observation belong category )=‚Ñô(Observation belong category |Event occured)‚Ñô(Event occured)‚Ñô(Observation belong category )=pit‚Ñô(Event occured)‚Ñô(Observation belong category ). \\begin{aligned} p^*_{}&=\\mathbb{P}(\\text{Event occured}|\\text{Observation belong category })\\\\ &=\\frac{\\mathbb{P}(\\text{Observation belong category }|\\text{Event occured})\\mathbb{P}(\\text{Event occured})}{\\mathbb{P}(\\text{Observation belong category })}\\\\ &=\\frac{p_{}\\mathbb{P}(\\text{Event occured})}{\\mathbb{P}(\\text{Observation belong category })}. \\end{aligned} relation implies : ln{pit*pkt*}=ln{pitpkt}‚àíln{‚Ñô(Observation belong category )‚Ñô(Observation belong category k)}. \\begin{aligned} \\ln\\left\\{\\frac{p^*_{}}{p^*_{kt}}\\right\\} &=\\ln\\left\\{\\frac{p_{}}{p_{kt}}\\right\\}-\\ln\\left\\{\\frac{\\mathbb{P}(\\text{Observation belong category })}{\\mathbb{P}(\\text{Observation belong category }k)}\\right\\}. \\end{aligned} pass offset argument Multinom function set values EtE_t, Et‚àù(‚Ñô(Observation belong category 1),...,‚Ñô(Observation belong category k))‚Ä≤E_{t} \\propto (\\mathbb{P}(\\text{Observation belong category }1),...,\\mathbb{P}(\\text{Observation belong category }k))', , specification provided section, : ln{pit*pkt*}=Œªit, \\ln\\left\\{\\frac{p^*_{}}{p^*_{kt}}\\right\\}=\\lambda_{},  words, linear predictors (consequently, model structure) describe probability event occurs specific class (instead probability observation belongs class, given occurrence event). obtain pit*p^*_{} (.e.¬†probability event occurring given observation belongs category ii), one can use Bayes formula, long ‚Ñô(Event occured)\\mathbb{P}(\\text{Event occured}) known. Indeed, one can write: pit*=pit‚Ñô(Event occured)‚Ñô(Observation belong category )=exp{Œªi}1+‚àëjexp{Œªj}‚Ñô(Event occured)‚Ñô(Observation belong category ) \\begin{aligned} p^*_{}&=p_{}\\frac{\\mathbb{P}(\\text{Event occured})}{\\mathbb{P}(\\text{Observation belong category })}\\\\         &=\\frac{\\exp\\{\\lambda_i\\}}{1+\\sum_j \\exp\\{\\lambda_j\\}}\\frac{\\mathbb{P}(\\text{Event occured})}{\\mathbb{P}(\\text{Observation belong category })} \\end{aligned}","code":""},{"path":"/articles/outcomes.html","id":"handling-multiple-outcomes","dir":"Articles","previous_headings":"","what":"Handling multiple outcomes","title":"Creation of model outcomes","text":"Lastly, kDGLM package also allows user jointly fit multiple time series, long marginal distribution series one supported distributions series independent given latent state vector Œ∏‚Üít\\vec{\\theta}_t. words, let {Y‚Üí,t}t=1T,=1,...,r\\{\\vec{Y}_{,t}\\}_{t=1}^{T}, =1,...,r, set time series : Y‚Üí,t|Œ∑‚Üí,t‚àº‚Ñ±i(Œ∑‚Üí,t),gi(Œ∑‚Üí,t)=Œª‚Üí,t=Fi,t‚Ä≤Œ∏‚Üít, \\begin{aligned} \\vec{Y}_{,t}|\\vec{\\eta}_{,t} &\\sim \\mathcal{F}_{}\\left(\\vec{\\eta}_{,t}\\right),\\\\ g_i(\\vec{\\eta}_{,t})&=\\vec{\\lambda}_{,t}=F_{,t}'\\vec{\\theta}_{t}, \\end{aligned}  Y‚Üí1,t,...,Y‚Üír,t\\vec{Y}_{1,t}, ...,\\vec{Y}_{r,t} mutually independent given Œ∑‚Üí1,t,...,Œ∑‚Üír,t\\vec{\\eta}_{1,t}, ...,\\vec{\\eta}_{r,t}. Note observational distributions ‚Ñ±i\\mathcal{F}_i need outcome, long ‚Ñ±i\\mathcal{F}_i within supported marginal distributions. example, three time series (r=3r=3), ‚Ñ±1\\mathcal{F}_1 Poisson distribution, ‚Ñ±2\\mathcal{F}_2 Normal distribution unknown mean precision ‚Ñ±3\\mathcal{F}_3 Gamma distribution known shape. Also, specification impose restriction model structure, outcome can component, polynomial, regression harmonic blocks, besides shared components . See (dos Santos et al., 2024) detailed discussion approach used model multiple time series using kDGLMs. fit model, one must pass outcomes fit_model function. example, present code fitting two Poisson series: important note Multivariate Normal Multinomial cases multivariated outcomes considered multiple outcomes , instead, treated one outcome , outcome vector (note made restrictions dimension Y‚Üí,t\\vec{Y}_{,t}). , cases, components vector Y‚Üí,t\\vec{Y}_{,t} mutually independent given Œ∑‚Üí,t\\vec{\\eta}_{,t}. Also important note general approach modeling multiple time series can , , considered generalization Multivariate Normal Multinomial models. Specifically, treat coordinate outcome outcome , satisfy hypotheses independence given latent states Œ∏‚Üít\\vec{\\theta}_t. can compensated changes model structure, , general, better model data using known joint distribution assume conditional independence model outcomes dependence shared structure.","code":"structure <- polynomial_block(mu.1 = 1, mu.2 = 1, order = 2, D = 0.95) + # Common factor   harmonic_block(mu.2 = 1, period = 12, order = 2, D = 0.975) + # Seasonality for Series 2   polynomial_block(mu.2 = 1, order = 1, D = 0.95) + # Local level for Series 2   noise_block(mu = 1) * 2 # Overdispersion for both Series  fitted.model <- fit_model(structure,   Adults = Poisson(lambda = \"mu.1\", data = chickenPox[, 5]),   Infants = Poisson(lambda = \"mu.2\", data = chickenPox[, 2]) )  plot(fitted.model)"},{"path":"/articles/outcomes.html","id":"special-case-conditional-modelling","dir":"Articles","previous_headings":"Handling multiple outcomes","what":"Special case: Conditional modelling","title":"Creation of model outcomes","text":"special type specification model multiple outcomes require outcomes independent given latent states. Indeed, user specifies conditional distribution outcome given previous ones, hypotheses needed fitting data. instance, lets say three time series Y1,t,Y2,tY_{1,t},Y_{2,t} Y3,tY_{3,t}, series follows Poisson distribution parameter Œ∑i,t,=1,2,3\\eta_{,t}, =1,2,3. , Zt=Y1,t+Y2,t+Y3,tZ_t=Y_{1,t}+Y_{2,t}+Y_{3,t} follows Poisson distribution parameter Œ∑1,t+Œ∑2,t+Œ∑3,t\\eta_{1,t}+\\eta_{2,t}+\\eta_{3,t} Y1,t,Y2,t,Y3,t|ZtY_{1,t},Y_{2,t},Y_{3,t}|Z_t jointly follows Multinomial distribution parameters Nt=ZtN_t=Z_t p‚Üít=(Œ∑1,tŒ∑1,t+Œ∑2,t+Œ∑3,t,Œ∑2,tŒ∑1,t+Œ∑2,t+Œ∑3,t,Œ∑3,tŒ∑1,t+Œ∑2,t+Œ∑3,t)‚Ä≤\\vec{p}_t=\\left(\\frac{\\eta_{1,t}}{\\eta_{1,t}+\\eta_{2,t}+\\eta_{3,t}},\\frac{\\eta_{2,t}}{\\eta_{1,t}+\\eta_{2,t}+\\eta_{3,t}},\\frac{\\eta_{3,t}}{\\eta_{1,t}+\\eta_{2,t}+\\eta_{3,t}}\\right)'. user may model ZtZ_t Y1,t,Y2,t,Y3,t|ZtY_{1,t},Y_{2,t},Y_{3,t}|Z_t:  See Schmidt et al. (2022) discussion Multinomial-Poisson models. applications presented advanced examples section vignette.","code":"structure <- polynomial_block(mu = 1, order = 2, D = 0.95) +   harmonic_block(mu = 1, period = 12, order = 2, D = 0.975) +   noise_block(mu = 1) + polynomial_block(p = 1, D = 0.95) * 2  outcome1 <- Poisson(lambda = \"mu\", data = rowSums(chickenPox[, c(2, 3, 5)])) outcome2 <- Multinom(p = c(\"p.1\", \"p.2\"), data = chickenPox[, c(2, 3, 5)])  fitted.model <- fit_model(structure, Total = outcome1, Proportions = outcome2)  plot(fitted.model, plot.pkg = \"base\")"},{"path":[]},{"path":"/articles/structures.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of contents","title":"Creation of model structures","text":"Introduction Notation structure polynomial trend models structure dynamic regression models structure harmonic trend models structure autoregresive models structure overdispersed models Handling multiple structural blocks Handling multiple linear predictors Handling unknown components planning matrix FtF_t Special priors Normal case Poisson case Gamma case Multinomial case Handling multiple outcomes Filtering smoothing Extracting components Forecasting Intervention monitoring Tools sensibility analysis Sampling hyper parameter estimation Space-time model hospital admissions gastroenteritis","code":""},{"path":"/articles/structures.html","id":"creation-of-model-structures","dir":"Articles","previous_headings":"","what":"Creation of model structures","title":"Creation of model structures","text":"section discuss specification model structure. consider structure model elements determine relation linear predictor Œª‚Üít\\vec{\\lambda}_t latent states Œ∏‚Üít\\vec{\\theta}_t though time. Thus, present section dedicated definition following, highlighted equations general dynamic generalized model: $$ \\require{color} \\begin{equation} \\begin{aligned} Y_t|\\eta_t &\\sim \\mathcal{F}\\left(\\eta_t\\right),\\\\ g(\\eta_t) &= {\\color{red}\\lambda_{t}=F_t'\\theta_t,}\\\\ {\\color{red}\\theta_t }&{\\color{red}=G_t\\theta_{t-1}+\\omega_t,}\\\\ {\\color{red}\\omega_t }&{\\color{red}\\sim \\mathcal{N}_n(h_t,W_t)}. \\end{aligned} \\end{equation} $$ Namely, consider structure model consists matrices/vectors FtF_t, GtG_t, h‚Üít\\vec{h}_t, HtH_t DtD_t. Although allow user manually define entry matrices (recommend), also offer tools simplify task. Currently, offer support following base structures: polynomial_block: Structural block polynomial trends (see West Harrison, 1997, Chapter 7). special cases, block support random walks linear growth models. harmonic_block: Structural block seasonal trends using harmonics (see West Harrison, 1997, Chapter 8). regression_block: Structural block (dynamic) regressions (see West Harrison, 1997, Chapter 6 9). TF_block: Structural block autoregressive components transfer functions (see West Harrison, 1997, Chapter 9 13). noise_block: Structural block random effects dos Santos et al. (2024). sake brevity, present details polynomial_block, since functions similar usage (full description block can found vignette, reference manual respective help pages). Along aforementioned functions, also present auxiliary functions operations help user manipulate created structural blocks. Subsections structure polynomial trend models, structure dynamic regression models, structure harmonic trend models, structure autoregresive models structure overdispersed models introduce several functions design facilitate creation single structural blocks. sections begin examining simplistic models, characterized single structural block one linear predictor, completely known FtF_t matrix. Subsection Handling multiple structural blocks builds upon concepts, exploring models incorporate multiple structural blocks maintaining singular linear predictor. focus shifts Subsection Handling multiple linear predictors, delve specification multiple linear predictors within model. Section Handling unknown components planning matrix FtF_t, discussion turns scenarios FtF_t includes one unknown components. Finally, Subsection Special priors provides brief examination functions used define specialized priors.","code":""},{"path":"/articles/structures.html","id":"a-structure-for-polynomial-trend-models","dir":"Articles","previous_headings":"","what":"A structure for polynomial trend models","title":"Creation of model structures","text":"Recall notation introduced Section Notation revisited beginning vignette. polynomial_block function create structural block based West Harrison (1997), chapter 7. pol function simplified version meant used inside formulas kdglm function syntax polynomial_block function. involves creation latent vector Œ∏‚Üít=(Œ∏1,t,...,Œ∏n,t)‚Ä≤\\vec{\\theta}_t=(\\theta_{1,t},...,\\theta_{n,t})', : Œ∏i,t=Œ∏i,t‚àí1+Œ∏i+1,t‚àí1+œâi,t,=1,...,n‚àí1Œ∏n,t=Œ∏n,t‚àí1+œân,t,Œ∏1‚àºùí©k(a1,R1),œâ1,t,...,œân,t‚àºùí©n(h‚Üít,Wt),\\begin{equation} \\begin{aligned} \\theta_{,t} &= \\theta_{,t-1}+\\theta_{+1, t-1}+\\omega_{,t}, =1,...,n-1\\\\ \\theta_{n,t} &= \\theta_{n,t-1}+\\omega_{n,t},\\\\ \\theta_1&\\sim \\mathcal{N}_k(a_1,R_1),\\\\ \\omega_{1,t},...,\\omega_{n,t}&\\sim \\mathcal{N}_n(\\vec{h}_t,W_t), \\end{aligned} \\label{eq:defpol} \\end{equation} Wt=Var[Œ∏t|ùíüt‚àí1]‚äô(1‚àíDt)‚äòDt+HtW_t=Var[\\theta_t|\\mathcal{D}_{t-1}]\\odot (1-D_t) \\oslash D_t+H_t. Let‚Äôs dissect component specification. order argument sets polynomial block‚Äôs order, correlating nn value passed. optional name argument aids identifying structural block post-fitting analysis, plotting result examination (see Section Fitting analysing models). D, h, H, a1, R1 arguments correspond DtD_t, h‚Üít\\vec{h}_t, HtH_t, ‚Üí1\\vec{}_1 R1R_1, respectively. D specifies discount matrices time. format varies: scalar implies constant discount factor; vector size TT (length time series) means varying discount factors time; n√ónn\\times n matrix indicates discount matrix given D times; 3D-array dimension n√ón√óTn\\times n\\times T indicates time-specific discount matrices. shape D considered invalid. h specifies drift vector time. h scalar, understood drift variables time. h vector size TT, understood drift variables, different values time, coordinate tt h represents drift time tt. h n√óTn \\times T matrix, assume drift vector time tt given h[,t]. shape h considered invalid. argument H follows syntax D, since matrix HtH_t shape DtD_t. argument a1 R1 used define, respectively mean covariance matrix prior Œ∏1\\theta_1. a1 scalar, understood latent states associated block prior mean; a1 vector size nn, understood prior mean a1a_1 given a1. R1 scalar, understood latent states independent priors variance (imply independent posteriors); R1 vector size nn, understood latent states independent priors prior variance Œ∏i,1\\theta_{,1} given R1[]; R1 n√ónn \\times n matrix, understood R1R_1 given R1. shape a1 R1 considered invalid. arguments D, h, H, a1, R1 can accept character values, indicating certain parameters fully defined. cases, dimensions arguments interpreted manner numerical counterparts. instance, D single character, implies uniform, yet unspecified, discount factor across variables time points, D serving placeholder label. D vector length TT (time series length), suggests varying discount factors time, character entry vector (e.g., D[]) acting label discount factor respective time point. logic extends arguments various dimensional forms. ‚Äôs crucial recognize arguments specified labels rather explicit values, corresponding model block treated ‚Äúundefined,‚Äù indicating absence key hyperparameter. Consequently, model undefined block fitted. Users must either employ specify.dlm_block method replace labels concrete values pass value value hyper-parameter named values fit_model function systematically evaluate models different values labels. Section Tools sensitivity analysis elaborates available tools sensitivity analysis. information specify fit_model available reference manual help function. Notice user need specify matrix GtG_t, since implicitly determined equation order polynomial block. type block define matrix GtG_t, , user need worry GtG_t, except specific circumstances, advanced user may need type model yet implemented. argument ... used specify matrix FtF_t (see details Subsection Handling multiple linear predictors). Specifically, user must provide list named values arbitrary labels linear predictor Œªi,t\\lambda_{,t} , =1,‚Ä¶,ki=1,\\ldots,k, associated value represents effect level Œ∏1,t\\theta_{1,t} (see Eq. ) predictor. example, consider polynomial block order 22, representing linear growth. user passes extra argument lambda (naming arbitrary) 11, matrix FtF_t created : Ft=[10] F_t=\\begin{bmatrix}1\\\\0\\end{bmatrix} Note , polynomial block order 22, 22 latent states, Œ∏1,t\\theta_{1,t} Œ∏2,t\\theta_{2,t}. Œ∏2,t\\theta_{2,t} affect linear predictor lambda directly, serves auxiliary variable induce complex dynamic Œ∏1,t\\theta_{1,t}. Indeed, Equation , second order polynomial block following temporal evolution: Œ∏1,t=Œ∏1,t‚àí1+Œ∏2,t‚àí1+œâ1,tŒ∏2,t=Œ∏2,t‚àí1+œâ2,t,œâ1,t,œâ2,t‚àºùí©2(h‚Üít,Wt). \\begin{aligned} \\theta_{1,t} &= \\theta_{1,t-1}+\\theta_{2, t-1}+\\omega_{1,t}\\\\ \\theta_{2,t} &= \\theta_{2,t-1}+\\omega_{2,t},\\\\ \\omega_{1,t},\\omega_{2,t}&\\sim \\mathcal{N}_2(\\vec{h}_t,W_t). \\end{aligned} , Œ∏2,t\\theta_{2,t} represents growth factor added Œ∏1,t\\theta_{1,t} smoothly changes overtime. Even complex structures can defined, either higher order polynomial block one several types block offered kDGLM. specification values associated predictor label illustrated examples exhibited section. Lastly, argument monitoring shall explained later, Subsection Intervention monitoring, discusses automated monitoring interventions. exemplify usage function, let us assume simple Normal model known variance œÉ2\\sigma^2, Œ∑\\eta mean parameter link function gg g(Œ∑)=Œ∑g(\\eta)=\\eta. Let us also assume mean constant time explanatory variables, model can simply written : $$ \\begin{aligned} Y_t|\\theta_t &\\sim \\mathcal{N}_1\\left(\\eta_t, \\sigma^2\\right),\\\\ \\eta_t &={\\color{red}\\lambda_{t}=\\theta_t,}\\\\ {\\color{red}\\theta_t} &{\\color{red}=\\theta_{t-1}=\\theta.} \\end{aligned} $$ case, Ft=1F_t=1, Gt=1G_t=1, Dt=1D_t=1, ht=0h_t=0 Ht=0H_t=0, tt. Assuming prior distribution ùí©(0,9)\\mathcal{N}(0,9) Œ∏\\theta, can create highlighted structure using following code: Setting eta=1, specify linear predictor named eta, eta=1√óŒ∏eta = 1 \\times \\theta. Setting order = 1, specify Œ∏t\\theta_t scalar Gt=1G_t=1. can omit values a1 , R1, D, h H, since default values reflect specified model. also omit argument order, since default 11, chose explicit define emphasize usage. argument name specifies label created block; case, chose call ‚ÄúMean‚Äù, help identify role model. Suppose now explanatory variable XX like introduce model help explain behavior Œ∑t\\eta_t. similarly define structure creating additional block : setting eta=X, specify linear predictor called eta, eta=X√óŒ∏eta = X \\times \\theta. X=(X1,...,XT)‚Ä≤X=(X_1,...,X_T)' vector, Ft=XtF_t=X_t, tt, etat=Xt√óŒ∏eta_t = X_t \\times \\theta. noted kDGLM specific structural block designed regressions, regression_block, also allow structural block used regression, just setting value assigned predictor equal regressor vector Xt,t=1,‚Ä¶,XTX_t, t=1, \\ldots, X_T. user can specify complex temporal dynamics effects co-variate. instance, assumed regressor seasonal effect linear predictor. accommodated insertion values regressor associated seasonal block. use seasonal blocks illustrated Section Space-time model hospital admissions gastroenteritis. far, discussed creation static latent effects, inclusion stochastic temporal dynamics straightforward. One must simply specify values H greater 00 /values D lesser 11: Notice dynamic regression model obtained assigning eta=X previous code line. Bellow present plot two simple trend models fitted data: one static mean another using dynamic mean. following example use functions Normal, fit_model plot method. advise reader initially concentrate solely application polynomial_block. functionalities detailed usage functions methods, Normal, fit_model, plot, explored later sections, specifically Sections Creating model outcome: Fitting analysing models:. inclusion functions current example primarily offer comprehensive operational code sample.  extensive presentation thorough discussion theoretical aspects underlying structure highlighted section, interested readers encouraged consult West Harrison (1997), Chapters 6, 7, 9. Additionally, strongly recommend users refer associated documentation detailed information. can accessed using help(polynomial_block) function consulting reference manual.","code":"polynomial_block(...,   order = 1, name = \"Var.Poly\",   D = 1, h = 0, H = 0,   a1 = 0, R1 = c(9, rep(1, order - 1)),   monitoring = c(TRUE, rep(FALSE, order - 1)) )  # When used in a formula pol(order = 1, D = 0.95, a1 = 0, R1 = 9, name = \"Var.Poly\") mean_block <- polynomial_block(eta = 1, order = 1, name = \"Mean\") polynomial_block(eta = X, name = \"Var X\") mean_block <- polynomial_block(eta = 1, order = 1, name = \"Mean\", D = 0.95)"},{"path":"/articles/structures.html","id":"a-structure-for-dynamic-regression-models","dir":"Articles","previous_headings":"","what":"A structure for dynamic regression models","title":"Creation of model structures","text":"regression_block function creates structural block dynamic regression covariate XtX_t, specified West Harrison (1997), chapter 9. reg function simplified version meant used inside formulas kdglm function syntax regression_block function. max.lag equal 00, function can see wrapper polynomial_block function order equal 11. max.lag greater equal 11, regression_block function equivalent superposition several polynomial_block functions order equal 11. Specifically, linear predictor Œªt\\lambda_t associated block, can describe structure following equations: Œªt=‚àë=0max.lagXt‚àíiŒ∏i,t,Œ∏i,t=Œ∏i,t‚àí1+œâi,t,‚àÄ,œâ0,t,...,œâmax.lag,t‚àºùí©max.lag+1(0,Wt),Œ∏0,1,...,Œ∏max.lag,1‚àºùí©max.lag+1(a1,R1), \\begin{equation} \\begin{aligned} \\lambda_t&=\\sum_{=0}^{max.lag}X_{t-}\\theta_{,t},\\\\ \\theta_{,t}&=\\theta_{,t-1}+\\omega_{,t},\\quad \\forall ,\\\\ \\omega_{0,t},...,\\omega_{max.lag,t}&\\sim \\mathcal{N}_{max.lag+1}(0,W_t),\\\\ \\theta_{0,1},..., \\theta_{max.lag,1}&\\sim \\mathcal{N}_{max.lag+1}(a_1,R_1), \\end{aligned} \\end{equation}  Wt=Var[Œ∏t|ùíüt‚àí1]‚äô(1‚àíDt)‚äòDt+HtW_t=Var[\\theta_t|\\mathcal{D}_{t-1}]\\odot (1-D_t) \\oslash D_t+H_t. usage regression_block function quite similar polynomial_block function, differences max.lag zero.fill arguments. max.lag defines maximum lag variable XtX_t effect linear predictor. example, define max.lag 33, defining XtX_t, Xt‚àí1X_{t-1}, Xt‚àí2X_{t-2} Xt‚àí3X_{t-3} effect Œªt\\lambda_t, max.lag+1max.lag+1 latent variables created, one representing effect lagged value XtX_t. Lastly, zero.fill argument defines package take value XtX_t 00 tt non-positive, .e., TRUE (default), package considers Xt=0X_t=0, t=0,‚àí1,...,‚àímax.lag+1t=0,-1,...,-max.lag+1. zero.fill FALSE, user must provide values XtX_t vector size T+max.lagT+max.lag (instead TT), TT length time series modeled, first max.lagmax.lag values vector taken X‚àímax.lag+1,...,X0X_{-max.lag+1},...,X_0. usage remaining arguments identical polynomial_block function, can also inferred previous equation. present code fitting following model: Yt|Œ∏t‚àºPoisson(Œ∑t),ln(Œ∑t)=Œªt=XtŒ∏t,Œ∏t=Œ∏t‚àí1+œât,œât‚àºùí©1(0,Wt), \\begin{equation} \\begin{aligned} Y_t|\\theta_t &\\sim Poisson\\left(\\eta_t\\right),\\\\ \\ln(\\eta_t) &=\\lambda_{t}=X_t\\theta_t,\\\\ \\theta_t&=\\theta_{t-1}+\\omega_t,\\\\ \\omega_t &\\sim \\mathcal{N}_1(0,W_t), \\end{aligned} \\end{equation}  XtX_t known covariate WtW_t specified using discount factor 0.950.95.  detailed theory behind structure discussed section can found chapters 6 9 West Harrison (1997).","code":"regression_block(...,   max.lag = 0,   zero.fill = TRUE,   name = \"Var.Reg\",   D = 1,   h = 0,   H = 0,   a1 = 0,   R1 = 9,   monitoring = rep(FALSE, max.lag + 1) )  # When used in a formula reg(X, max.lag = 0, zero.fill = TRUE, D = 0.95, a1 = 0, R1 = 9, name = \"Var.Reg\") regression <- regression_block(The_name_of_the_linear_predictor = X, D = 0.95)  outcome <- Poisson(lambda = \"The_name_of_the_linear_predictor\", data = data)  fitted.data <- fit_model(regression, outcome)"},{"path":"/articles/structures.html","id":"a-structure-for-harmonic-trend-models","dir":"Articles","previous_headings":"","what":"A structure for harmonic trend models","title":"Creation of model structures","text":"function creates structural block based West Harrison (1997), chapter 8, .e., creates latent vector Œ∏t=(Œ∏1,t,Œ∏2,t,...,Œ∏2√óorder‚àí1,t,Œ∏2√óorder,t)‚Ä≤\\theta_t=(\\theta_{1,t},\\theta_{2,t},...,\\theta_{2\\times order-1,t},\\theta_{2\\times order,t})', : [Œ∏2i‚àí1,tŒ∏2i,t]=[cos(iw)sin(iw)‚àísin(iw)cos(iw)][Œ∏2i‚àí1,t‚àí1Œ∏2i,t‚àí1]+[œâ2i‚àí1,tœâ2i,t],=1,...,orderŒ∏1,1,...,Œ∏2√óorder,1‚àºùí©2√óorder(a1,R1),œâ1,t,...,œâ2√óorder,t‚àºùí©2√óorder(0,Wt), \\begin{equation} \\begin{aligned} \\begin{bmatrix}\\theta_{2i -1,t}\\\\ \\theta_{2i,t}\\end{bmatrix} = \\begin{bmatrix}cos(iw) & sin(iw)\\\\ -sin(iw) & cos(iw)\\end{bmatrix}&\\begin{bmatrix}\\theta_{2i -1,t-1}\\\\ \\theta_{2i,t-1}\\end{bmatrix}+\\begin{bmatrix}\\omega_{2i -1,t}\\\\ \\omega_{2i,t}\\end{bmatrix}, =1,...,order\\\\ \\theta_{1,1},...,\\theta_{2 \\times order,1}&\\sim \\mathcal{N}_{2\\times order}(a_1,R_1),\\\\ \\omega_{1,t},...,\\omega_{2 \\times order,t}&\\sim \\mathcal{N}_{2\\times order}(0,W_t),\\\\ \\end{aligned} \\end{equation}  Wt=Var[Œ∏t|ùíüt‚àí1]‚äô(1‚àíDt)‚äòDt+HtW_t=Var[\\theta_t|\\mathcal{D}_{t-1}]\\odot (1-D_t) \\oslash D_t+H_t w=2œÄperiodw=\\frac{2\\pi}{period}. Notice user need specify matrix GtG_t, since implicitly determined order period harmonic block, block diagonal matrix block rotation matrix angle multiple ww, , period integer, Gtperiod=IG_t^{period}=. Notice , period integer, represents length seasonal cycle. instance, time series monthly observations believe series annual pattern, set period harmonic block equal 1212 (number observations cycle ‚Äúresets‚Äù). details order harmonic block representation seasonal patterns Fourier Series, see West Harrison (1997), chapter 8. natural usage block specifying harmonic trends model, can also used explanatory variables seasonal effect linear predictor, , see usage regression_block polynomial_block functions. present simply usage example harmonic block period 1212: Bellow present plot Poisson model structure:  detailed theory behind structure discussed section can found chapters 6, 8 9 West Harrison (1997).","code":"harmonic_block(   ...,   period,   order = 1,   name = \"Var.Sazo\",   D = 1,   h = 0,   H = 0,   a1 = 0,   R1 = 4,   monitoring = rep(FALSE, order * 2) )  # When used in a formula har(period, order = 1, D = 0.98, a1 = 0, R1 = 4, name = \"Var.Sazo\") mean_block <- harmonic_block(   eta = 1,   period = 12,   D = 0.975 )"},{"path":"/articles/structures.html","id":"a-structure-for-autoregresive-models","dir":"Articles","previous_headings":"","what":"A structure for autoregresive models","title":"Creation of model structures","text":"function creates structural block based West Harrison (1997), chapter 9, .e., creates latent state vector Œ∏t\\theta_t, autoregressive (AR) coefficient vector œït=(œï1,t,...,œïorder,t)‚Ä≤\\phi_t=(\\phi_{1,t},...,\\phi_{order, t})' pulse coefficient vector œÅt=(œÅ1,t,...,œÅl,t)‚Ä≤\\rho_t=(\\rho_{1,t},...,\\rho_{l,t})', ll number pulses (discussed later ) : Œ∏t=‚àë=1kœïi,tŒ∏t‚àí+‚àë=1lœÅi,tXi,t+œât,œïi,t=œïi,t‚àí1+œâi,tcoef,œÅi,t=œÅi,t‚àí1+œâi,tpulse,œât‚àºùí©1(ht,Wt),œâtcoef‚àºùí©k(htcoef,Wtcoef),œâtpulse‚àºùí©l(htpulse,Wtpulse),Œ∏1‚àºùí©(a1,R1),œï1‚àºùí©k(a1coef,R1coef),œÅ1‚àºùí©l(a1pulse,R1pulse). \\begin{equation} \\begin{aligned} \\theta_{t} &= \\sum_{=1}^{k}\\phi_{,t}\\theta_{t-}+\\sum_{=1}^{l}\\rho_{,t}X_{,t}+\\omega_{t},\\\\ \\phi_{,t}&=\\phi_{,t-1}+\\omega^{\\text{coef}}_{,t},\\\\ \\rho_{,t}&=\\rho_{,t-1}+\\omega_{,t}^{pulse},\\\\ \\omega_{t}&\\sim \\mathcal{N}_1(h_t,W_t),\\\\ \\omega_{t}^{\\text{coef}}&\\sim \\mathcal{N}_k(h_t^{\\text{coef}},W_t^{\\text{coef}}),\\\\ \\omega_{t}^{pulse}&\\sim \\mathcal{N}_l(h_t^{pulse},W_t^{pulse}),\\\\ \\theta_1&\\sim \\mathcal{N}(a_1,R_1),\\\\ \\phi_1&\\sim \\mathcal{N}_k(a_1^{\\text{coef}},R_1^{\\text{coef}}),\\\\ \\rho_1&\\sim \\mathcal{N}_l(a_1^{pulse},R_1^{pulse}). \\end{aligned} \\end{equation}  : Wt=noise.var+(1‚àínoise.disc)noise.discVar[Œ∏t|ùíüt‚àí1],Wtcoef=Htcoef+Var[œït|ùíüt‚àí1]‚äô(1‚àíDtcoef)‚äòDtcoef,Wtpulse=Htpulse+Var[œÅt|ùíüt‚àí1]‚äô(1‚àíDtpulse)‚äòDtpulse, \\begin{equation} \\begin{aligned} W_t&=noise.var&+&\\frac{(1-noise.disc)}{noise.disc}Var[\\theta_t|\\mathcal{D}_{t-1}] & &  & & ,\\\\ W_t^{\\text{coef}}&=H_t^{\\text{coef}}&+&Var[\\phi_t|\\mathcal{D}_{t-1}] &\\odot& (1-D_t^{\\text{coef}}) &\\oslash& D_t^{\\text{coef}},\\\\ W^{pulse}_t&=H_t^{pulse}&+&Var[\\rho_t|\\mathcal{D}_{t-1}] &\\odot&(1-D_t^{pulse}) &\\oslash&D_t^{pulse}, \\end{aligned} \\end{equation}  XX, called pulse matrix, known T√ólT \\times l matrix. Notice user need specify matrix GtG_t, since implicitly determined order Tranfer Function (TF) block equations , although, reader might noticed, evolution always non-linear. Since method used fit models package requires linear evolution, use approach described West Harrison (1997), chapter 13, linearize previous evolution equation. details usage autoregressive models transfer functions context DLM‚Äôs, see West Harrison (1997), chapter 9. easy understand meaning arguments TF_block function based previous equations, explanation still needed AR.support argument, plus arguments related called pulse. advise users consult associated documentation details (see help(TF_block) reference manual). AR.support character string, either \"constrained\" \"free\". AR.support \"constrained\", AR coefficients œït\\phi_t forced interval (‚àí1,1)(-1,1), otherwise, coefficients unrestricted. Beware , restriction coefficients, guarantee estimated coefficients imply stationary process, furthermore, order TF block greater 1, restriction imposed AR.support equal \"constrained\" guarantee process stationary, , user allowed use constrained parameters order block greater 11. constrain œït\\phi_t interval (‚àí1,1)(-1,1), apply inverse Fisher transformation, also known hyperbolic tangent function. pulse matrix XX informed argument pulse, dimension œÅt\\rho_t implied number columns XX. important notice package expects XX inform pulse value time instance, interpreting column distinct pulse associated coordinate œÅt\\rho_t. Note pulse absent, Xt=0,‚àÄtX_t=0, \\forall t, TF block equivalent autoregressive block. Finally, can summarize usage TF_block function follows: a1, R1 parameter prior accumulated effects (Œ∏1,...,Œ∏1‚àíorder)‚Ä≤(\\theta_1,...,\\theta_{1-order})'; noise.var, noise.disc h define mean variance random fluctuations Œ∏t\\theta_t time; a1.coef, R1.coef parameter prior coefficients œï1,...,œïorder\\phi_1, ...,\\phi_{order}; h.coef, H.coef D.coef define mean variance random fluctuations œït\\phi_t time; a1.pulse, R1.pulse parameter prior pulse coefficient œÅ1\\rho_1; h.pulse, H.pulse D.pulse define mean variance random fluctuations œÅt\\rho_t time; pulse pulse matrix XX; AR.support defines support AR coefficients œït\\phi_t. Bellow present code simply AR(1)AR(1) block Wt=0.1,‚àÄtW_t=0.1, \\forall t: Finally present plot Gamma model known shape Œ±=1.5\\alpha=1.5 AR structure mean fitted simulated data. refrain show code fitting model , since discuss tools fitting section .","code":"TF_block(   ...,   order,   noise.var = NULL,   noise.disc = NULL,   pulse = 0,   name = \"Var.AR\",   AR.support = \"free\",   a1 = 0,   R1 = 9,   h = 0,   monitoring = TRUE,   D.coef = 1,   h.coef = 0,   H.coef = 0,   a1.coef = c(1, rep(0, order - 1)),   R1.coef = c(1, rep(0.25, order - 1)),   monitoring.coef = rep(FALSE, order),   a1.pulse = 0,   R1.pulse = 9,   D.pulse = 1,   h.pulse = 0,   H.pulse = 0,   monitoring.pulse = NA )  # When used in a formula TF(X, order = 1, noise.var = NULL, noise.disc = NULL, a1 = 0, R1 = 9, a1.coef = NULL, R1.coef = NULL, a1.pulse = 0, R1.pulse = 4, name = \"Var.AR\")  # Wrapper for the autoregressive structure AR(order = 1, noise.var = NULL, noise.disc = NULL, a1 = 0, R1 = 9, a1.coef = NULL, R1.coef = NULL, name = \"Var.AR\") mean_block <- TF_block(   eta = 1,   order = 1,   noise.var = 0.1 )"},{"path":"/articles/structures.html","id":"some-comments-about-autoregressive-models-in-the-normal-family","dir":"Articles","previous_headings":"A structure for autoregresive models","what":"Some comments about autoregressive models in the Normal family","title":"Creation of model structures","text":"user may notice autoregressive block described little different common literature. Specifically, assume observed data (YtY_t) follows autoregressive evolution, instead Œ∏t\\theta_t . approach generalization usual autoregressive model, indeed, YtY_t follows usual AR(k), : Yt=‚àë=1kœïi,tYt‚àí1+œµt,œµt‚àºùí©1(0,œÉt2), \\begin{equation} \\begin{aligned} Y_t&=\\sum_{=1}^{k}\\phi_{,t}Y_{t-1}+\\epsilon_t,\\\\ \\epsilon_t &\\sim \\mathcal{N}_1(0,\\sigma_t^2), \\end{aligned} \\end{equation}  , model can also written : Yt|Œ∑t‚àºùí©1(Œ∑t,0),Œ∑t=Œ∏t=‚àë=1kœïi,tŒ∏t‚àí+œât,œât‚àºùí©1(0,Wt), \\begin{equation} \\begin{aligned} Y_t|\\eta_t&\\sim \\mathcal{N}_1(\\eta_t,0),\\\\ \\eta_t=\\theta_t&=\\sum_{=1}^{k}\\phi_{,t}\\theta_{t-}+\\omega_t,\\\\ \\omega_t &\\sim \\mathcal{N}_1(0,W_t), \\end{aligned} \\end{equation}  model can described using TF_block function. generally, Yt|Œ∑t‚àº‚Ñ±(Œ∑t)Y_t|\\eta_t \\sim \\mathcal{F}(\\eta_t), ‚Ñ±\\mathcal{F} distribution family contained exponential family indexed Œ∑t\\eta_t, : Yt|Œ∑t‚àº‚Ñ±(Œ∑t),g(Œ∑t)=Œ∏t=‚àë=1kœïi,tŒ∏t‚àí+œât,œât‚àºùí©1(0,Wt). \\begin{equation} \\begin{aligned} Y_t|\\eta_t &\\sim \\mathcal{F}(\\eta_t),\\\\ g(\\eta_t)=\\theta_t&=\\sum_{=1}^{k}\\phi_{,t}\\theta_{t-}+\\omega_t,\\\\ \\omega_t &\\sim \\mathcal{N}_1(0,W_t). \\end{aligned} \\end{equation} important note caveats first specification (usual one) general one presented . reader see bellow, offer, particular case, Normal distribution unknown mean observational variance, can specify predictive strucutre mean observational variance. model, matter evolution error associated observation equation evolution equation (specify predictive structure former, latter can). cases, recommend use regression_block function instead TF_block. present example specification AR(k) using regression_block function time series YtY_t length TT: Advanced Examples section provide wide range examples, including ones aforementioned structures. particular, present code usual (yet different discussed) forms AR, including following model: Yt=Œºt+‚àë=1kœïi,t(Yt‚àí1‚àíŒºt‚àí1)+œµt,œµt‚àºùí©1(0,œÉt2), \\begin{equation} \\begin{aligned} Y_t&=\\mu_t+\\sum_{=1}^{k}\\phi_{,t}(Y_{t-1}-\\mu_{t-1})+\\epsilon_t,\\\\ \\epsilon_t &\\sim \\mathcal{N}_1(0,\\sigma_t^2), \\end{aligned} \\end{equation}","code":"regression_block(   mu = c(0, Y[-T]),   max.lag = k )"},{"path":"/articles/structures.html","id":"a-structure-for-overdispersed-models","dir":"Articles","previous_headings":"","what":"A structure for overdispersed models","title":"Creation of model structures","text":"function creates sequence independent latent variables œµ1,...,œµt\\epsilon_1,...,\\epsilon_t based discussions presented dos Santos et al. (2024), : œµt‚àºùí©(0,œÉt2),œÉt2=t‚àí1tDtœÉt‚àí12+1t(1‚àíDt)ùîº[œµt‚àí12|ùíüt‚àí1],œÉ12=R1. \\begin{equation} \\begin{aligned} \\epsilon_{t} &\\sim \\mathcal{N}(0,\\sigma_t^2),\\\\ \\sigma_t^2&=\\frac{t-1}{t}D_t\\sigma_{t-1}^2+\\frac{1}{t}(1-D_t)\\mathbb{E}[\\epsilon_{t-1}^2|\\mathcal{D}_{t-1}],\\\\ \\sigma_1^2&=R_1. \\end{aligned} \\end{equation} Notice user need specify matrix GtG_t, since implicitly determined equations , Gt=0G_t=0 tt. easy see correspondence arguments noise_block function respective meaning block specification, remaining ones follow usage seen previous block functions (see polynomial_block function). user must noticed, block makes sense , since barely capability learning patterns. , shown next subsection, structural blocks can combined , noise block one several structural blocks model. exemplify utility structural block, let us assume want model following (simulated) time series counts:  Since data counting, natural propose Poisson model, : Yt|Œ∏t‚àºPoisson(Œ∑t),ln(Œ∑t)=Œªt=Œ∏t,Œ∏t=Œ∏t‚àí1+œât,œât‚àºùí©1(0,Wt), \\begin{equation} \\begin{aligned} Y_t|\\theta_t &\\sim Poisson\\left(\\eta_t\\right),\\\\ \\ln(\\eta_t) &=\\lambda_{t}=\\theta_t,\\\\ \\theta_t&=\\theta_{t-1}+\\omega_t,\\\\ \\omega_t &\\sim \\mathcal{N}_1(0,W_t), \\end{aligned} \\end{equation} Bellow present model fitted using kDGLM package:  Notice data middle observed period overdispersed, Poisson model properly address uncertainty. One proposed usage Normal model , indeed, capture uncertainty middle, notice data beginning end series low values, Normal model inappropriate. scenario, better approach add noise component linear predictor, can capture overdispersion:  relevant point choice R1 can affect final fit, , highly recommend user perform sensibility analysis help specify value R1. Lastly, see latter , noise block can also useful model dependency multiple time series. detailed discussion type blocks, see dos Santos et al. (2024).","code":"noise_block(..., name = \"Noise\", D = 0.99, R1 = 1)  # When used in a formula noise(name = \"Noise\", D = 0.99, R1 = 0.1, H = 0) level <- polynomial_block(   rate = 1,   order = 3,   D = 0.95 )  fitted.data <- fit_model(level,   \"Model 1\" = Poisson(lambda = \"rate\", data = data) )  plot(fitted.data, lag = 1, plot.pkg = \"base\") level <- polynomial_block(   mu = 1,   order = 3,   D = 0.95 ) noise <- noise_block(   mu = 1 )  fitted.data <- fit_model(level, noise,   \"Model 2\" = Poisson(lambda = \"mu\", data = data) )  plot(fitted.data, lag = 1, plot.pkg = \"base\")"},{"path":"/articles/structures.html","id":"handling-multiple-structural-blocks","dir":"Articles","previous_headings":"","what":"Handling multiple structural blocks","title":"Creation of model structures","text":"n previous subsections, discussed define structure model using functions polynomial_block, regression_block, harmonic_block, TF_block noise_block. functions results single structural block. Generally, user want mix multiple types structures, one responsible explain part outcome YtY_t. task, introduce operator designed combine structural blocks superposition principle (see West Harrison, 1997, sec. 6.2), follows. Consider scenario one wishes superimpose pp structural blocks; instance: trend, seasonal regression components (p=3p=3). general overlaid structure given following specifications: Œ∏‚Üít=[Œ∏‚Üít1‚ãÆŒ∏‚Üítn],Ft=[Ft1‚ãÆFtp],Gt=diag{Gt1,...,Gtp},Wt=diag{Wt1,...,Wtp}, \\begin{aligned} \\vec{\\theta}_t&=\\begin{bmatrix}\\vec{\\theta}_t^1\\\\ \\vdots\\\\ \\vec{\\theta}_t^n\\end{bmatrix}, & F_t&=\\begin{bmatrix}F_t^1 \\\\  \\vdots \\\\  F_t^p\\end{bmatrix},\\\\ G_t&=diag\\{G_t^{1},...,G_t^{p}\\},& W_t&=diag\\{W_t^{1},...,W_t^{p}\\}, \\end{aligned} diag{M1,...,Mp}diag\\{M^1,...,M^{p}\\} represents block diagonal matrix diagonal composed M1,...,MpM^1,...,M^{p}; Œ∏t\\theta_t vector obtained concatenation vectors Œ∏‚Üít1,...,Œ∏‚Üítp\\vec{\\theta}_t^1,..., \\vec{\\theta}_t^p corresponding structural block; FtF_t obtained follows: single linear predictor considered model, FtF_t line vector concatenating $F_t^1,‚Ä¶, F_t^p .Forthecaseofseveralpredictors(. case several predictors  (k>1$, seen next section), design matrix associated structural block ii, FtiF_t^, dimension $n_i k $ FtF_t n√ókn \\times k matrix, obtained row-wise concatenation matrices Ft1,...,FtpF_t^1,..., F_t^p, n=‚àë=1pnin=\\sum_{=1}^p n_i. scenario, facilitate specification model, create one structural block Œ∏‚Üíti\\vec{\\theta}_t^, FtiF_t^{}, GtiG_t^{} WtiW_t^{}, =1,...pi=1,...p, ‚Äúcombine‚Äù blocks together. kDGLM package allows operation function block_superpos , equivalently, + operator: high number pp structural blocks, use block_superpos slightly faster. demonstrate usage + operator, suppose like create model using four structures presented previously (polynomial trend, dynamic regression, harmonic trend AR model). following code: multiple regression context, , one regressor included predictor, user must specify different regression sub blocks, one regressor, apply superposition principle blocks. Thus, previous code lines, X vector TT observations regressor XtX_t, already defined R object current environment matrix covariates. Ideally, user also provide block name help identify model fitted, , user provide name, block default name type block. different blocks name, index automatically added variables conflicting labels based order blocks combined. Note automatic naming might make analysis fitted model confusing, specially dealing large number latent states. mind, strongly recommend users specify intuitive name structural block. integrating multiple blocks within model, ‚Äôs crucial understand associated design matrices, denoted FtiF_t^{} block, combined. matrices concatenated vertically, one . Consequently, since predictor vector Œª‚Üít\\vec{\\lambda}_t calculated Ft‚Ä≤Œ∏‚ÜítF_{t}'\\vec{\\theta}_t, influence block Œª‚Üít\\vec{\\lambda}_t cumulative. previous code example, introduced linear predictor named eta. context, operations performed lines 1, 5, 7 (corresponding polynomial_block, regression_block, TF_block, respectively), represented etat=1√óŒ∏1,ti,=1,3,4eta_t=1 \\times \\theta_{1,t}^{},=1,3,4; line 3 (corresponding regression_block), operation etat=Xt√óŒ∏1,t2eta_t=X_t \\times \\theta_{1,t}^{2}. ‚Äôs important note block initially defines eta independently. However, blocks combined, respective equations merged. result, complete structure line 9 can expressed : etat=1√óŒ∏1,t1+Xt√óŒ∏1,t2+1√óŒ∏1,t3+1√óŒ∏1,t4 eta_t= 1 \\times \\theta_{1,t}^{1} + X_t \\times \\theta_{1,t}^{2} + 1 \\times \\theta_{1,t}^{3} + 1 \\times \\theta_{1,t}^{4} expression illustrates contributions individual block aggregated form final model. methodology allows flexible construction complex models combining simpler components, contributing explain particular facet process {Yt}t=1T\\{Y_t\\}_{t=1}^T.","code":"block_1 <- ... . . . block_n <- ...  complete_structure <- block_superpos(block_1, ..., block_n) # or complete_structure <- block_1 + ... + block_n poly_subblock <- polynomial_block(eta = 1, name = \"Poly\", D = 0.95)  regr_subblock <- regression_block(eta = X, name = \"Regr\", D = 0.95)  harm_subblock <- harmonic_block(eta = 1, period = 12, name = \"Harm\")  AR_subblock <- TF_block(eta = 1, order = 1, noise.var = 0.1, name = \"AR\")  complete_block <- poly_subblock + regr_subblock + harm_subblock + AR_subblock"},{"path":"/articles/structures.html","id":"handling-multiple-linear-predictors","dir":"Articles","previous_headings":"","what":"Handling multiple linear predictors","title":"Creation of model structures","text":"user may noticed, one argument can passed ... argument. Indeed, user , several linear predictors created block (one unique name), affected associated latent state. instance, take following code: code creates 33 linear predictors Œª1,t\\lambda_{1,t},Œª2,t\\lambda_{2,t} Œª3,t\\lambda_{3,t} design matrix Ft=(1,1,1)‚Ä≤F_t=(1,1,1)', : Œª1,t=1√óŒ∏tŒª2,t=1√óŒ∏tŒª3,t=1√óŒ∏t \\begin{aligned} \\lambda_{1,t}&=1 \\times \\theta_{t}\\\\ \\lambda_{2,t}&=1 \\times \\theta_{t}\\\\ \\lambda_{3,t}&=1 \\times \\theta_{t} \\end{aligned} Note latent state Œ∏t\\theta_{t} linear predictors Œªi,t\\lambda_{,t}, .e., Œ∏t\\theta_{t} shared effect among linear predictors used induce association among predictors. specification independent effects linear predictor can done using different blocks latent state: name linear predictor missing particular block, .e., name linear predictor passed argument one block, absent another, understood particular block effect linear predictor absent, previous code equivalent : discussed end Subsection Handling multiple structural blocks, effect block linear predictors added . codes create 33 linear predictors, : Œª1,t=1√óŒ∏1,t+0√óŒ∏2,t+0√óŒ∏3,t=Œ∏1,tŒª2,t=0√óŒ∏1,t+1√óŒ∏2,t+0√óŒ∏3,t=Œ∏2,tŒª3,t=0√óŒ∏1,t+0√óŒ∏2,t+1√óŒ∏3,t=Œ∏3,t \\begin{aligned} \\lambda_{1,t}&=1 \\times \\theta_{1,t} + 0 \\times \\theta_{2,t} + 0 \\times \\theta_{3,t}=\\theta_{1,t}\\\\ \\lambda_{2,t}&=0 \\times \\theta_{1,t} + 1 \\times \\theta_{2,t} + 0 \\times \\theta_{3,t}=\\theta_{2,t}\\\\ \\lambda_{3,t}&=0 \\times \\theta_{1,t} + 0 \\times \\theta_{2,t} + 1 \\times \\theta_{3,t}=\\theta_{3,t} \\end{aligned} Remind syntax presented first illustration current section, guides creation common factors among predictors. One can use multiple blocks structure define linear predictors share () components: representing following structure: Œª1,t=Œ∏1,t+Œ∏4,tŒª2,t=Œ∏2,t+Œ∏4,tŒª3,t=Œ∏3,t+Œ∏4,t \\begin{aligned} \\lambda_{1,t}&=\\theta_{1,t}+\\theta_{4,t}\\\\ \\lambda_{2,t}&=\\theta_{2,t}+\\theta_{4,t}\\\\ \\lambda_{3,t}&=\\theta_{3,t}+\\theta_{4,t}\\\\ \\end{aligned} examples basic structures, overwhelm reader overly intricate models. Still, kDGLM package limited way inclusion multiple linear predictors, structure one may use single predictor can also used multiple linear predictors. example, model 33 linear predictors, one mixture shared components exclusive components: Now focus replication structural blocks, apply block_mult function associated operator *. function allows user create multiple blocks identical structure, one associated different linear predictor. usage function simple : replicating blocks, understood copy base block independent (.e., latent states) block associated different set linear predictors. name linear predictors associated block taken original names index: Naturally, user might want rename linear predictors intuitive label. task, provide function:","code":"polynomial_block(lambda1 = 1, lambda2 = 1, lambda3 = 1) # Common factor polynomial_block(lambda1 = 1, order = 1) + # theta_1   polynomial_block(lambda2 = 1, order = 1) + # theta_2   polynomial_block(lambda3 = 1, order = 1) # theta_3 # Longer version of the previous code for the sake of clarity. # In general, when a block does not affect a particular linear predictor, that linear predictor should be ommited when creating the block. polynomial_block(lambda1 = 1, lambda2 = 0, lambda3 = 0, order = 1) + # theta_1   polynomial_block(lambda1 = 0, lambda2 = 1, lambda3 = 0, order = 1) + # theta_2   polynomial_block(lambda1 = 0, lambda2 = 0, lambda3 = 1, order = 1) # theta_3 polynomial_block(lambda1 = 1, order = 1) + # theta_1   polynomial_block(lambda2 = 1, order = 1) + # theta_2   polynomial_block(lambda3 = 1, order = 1) + # theta_3   polynomial_block(lambda1 = 1, lambda2 = 1, lambda3 = 1, order = 1) # theta_4: Common factor #### Global level with linear growth #### polynomial_block(lambda1 = 1, lambda2 = 1, lambda3 = 1, D = 0.95, order = 2) +   #### Local variables for lambda1 ####   polynomial_block(lambda1 = 1, order = 1) +   regression_block(lambda1 = X1, max.lag = 3) +   harmonic_block(lambda1 = 1, period = 12, D = 0.98) +   #### Local variables for lambda2 ####   polynomial_block(lambda2 = 1, order = 1) +   TF_block(lambda2 = 1, pulse = X2, order = 1, noise.disc = 1) +   harmonic_block(lambda2 = 1, period = 12, D = 0.98, order = 2) +   #### Local variables for lambda3 ####   polynomial_block(lambda3 = 1, order = 1) +   TF_block(lambda3 = 1, order = 2, noise.disc = 0.9) +   regression_block(lambda3 = X3, D = 0.95) base.block <- polynomial_block(eta = 1, name = \"Poly\", D = 0.95, order = 1)  # final.block <- block_mult(base.block, 4) # or # final.block <- base.block * 4 # or final.block <- 4 * base.block final.block$pred.names [1] \"eta.1\" \"eta.2\" \"eta.3\" \"eta.4\" final.block <- block_rename(final.block, c(\"Matthew\", \"Mark\", \"Luke\", \"John\")) final.block$pred.names"},{"path":"/articles/structures.html","id":"handling-unknown-components-in-the-planning-matrix-f_t","dir":"Articles","previous_headings":"","what":"Handling unknown components in the planning matrix FtF_t","title":"Creation of model structures","text":"situations user may want fit model : Œªt=Ft‚Ä≤Œ∏t=‚ãØ+œïtŒ∏t+‚ãØ, \\begin{aligned} \\lambda_{t}=F_t'\\theta_t=\\cdots+\\phi_t\\theta_t +\\cdots, \\end{aligned}  words, may case planning matrix FtF_t contains one unknown components. idea may foreign working one linear predictor, observational model several predictors make sense shared effects among predictors. Besides, construction also natural modeling multiple time series simultaneously, dealing correlated outcomes working compound regression. cases explored Advanced Examples section vignette. now, focus specify structures, whatever use may . simplicity, let us assume want create linear predictor Œªt\\lambda_t Œªt=œïtŒ∏t\\lambda_{t}=\\phi_t\\theta_t. first step create linear predictor associated œït\\phi_t (call phi, although user may call whatever pleases user): Notice creating linear predictor œït\\phi_t latent state Œ∏ÃÉt\\tilde{\\theta}_t œït=1√óŒ∏ÃÉt\\phi_t=1\\times \\tilde{\\theta}_t. Also, important note structure œït\\phi_t structural block (harmonic, regression, auto regression, etc.). Now can create structural block Œ∏t\\theta_t: code creates linear predictor Œªt\\lambda_t latent state Œ∏t\\theta_t Œªt=œït√óŒ∏t\\lambda_t=\\phi_t \\times \\theta_t. Notice ... argument structural block used specify planning matrix FtF_t, specifically, user must provide list named values, name indicates linear predictor Œªt\\lambda_t associated value represent effect Œ∏t\\theta_{t} predictor. user pass string ..., implicitly component FtF_t associated Œ∏t\\theta_t unknown modeled linear predictor labelled passed string. Lastly, one guess, possible establish chain components FtF_t order create even complex structure. instance, take following code: first line create linear predictor Œ∑1,t\\eta_{1,t} Œ∑1,t=1√óŒ∏1,t\\eta_{1,t}=1 \\times \\theta_{1,t}. second line create another linear predictor Œ∑2,t\\eta_{2,t} Œ∑2,t=Œ∑1,t√óŒ∏2,t=Œ∏1,t√óŒ∏2,t\\eta_{2,t}=\\eta_{1,t} \\times \\theta_{2,t}=\\theta_{1,t} \\times \\theta_{2,t}. create linear predictor Œ∑3,t\\eta_{3,t} Œ∑3,t=Œ∑2,t√óŒ∏3,t=Œ∏1,t√óŒ∏2,t√óŒ∏3,t\\eta_{3,t}=\\eta_{2,t} \\times \\theta_{3,t}=\\theta_{1,t} \\times \\theta_{2,t} \\times \\theta_{3,t}. fit models non-linear components FtF_t /GtG_t matrices, use Extended Kalman Filter (Kalman, 1960; West Harrison, 1997).","code":"phi_block <- polynomial_block(phi = 1, order = 1) theta_block <- polynomial_block(lambda = \"phi\", order = 1) polynomial_block(eta1 = 1, order = 1) +   polynomial_block(eta2 = \"eta1\", order = 1) +   polynomial_block(eta3 = \"eta2\", order = 1)"},{"path":"/articles/structures.html","id":"special-priors","dir":"Articles","previous_headings":"","what":"Special priors","title":"Creation of model structures","text":"discussed Subsection structure polynomial trend models, default prior polynomial block‚Äîwell blocks‚Äîassumes latent states independent mean 00 variance 99. Users flexibility modify prior combination mean vector covariance matrix, although latent states different blocks always assumed independent. important note independence applies prior distribution; subsequent updates may induce correlations latent states. prior setup may appropriate broad range applications, may instances user needs apply joint prior latent states across different blocks. example, similar model previously fitted another dataset, analyst might wish integrate information prior model new fitting. facilitate specification joint prior set latent states, kDGLM package offers joint_prior function: joint_prior function accepts dlm_block object returns object modified prior. block argument dlm_block object. syntax function designed facilitate use pipe operator (either |> %>%), allowing seamless integration piped sequences. example: var.index argument optional indicates indexes latent states prior distribution modified. a1 R1 arguments represent, respectively, mean vector covariance matrix latent states user wishes modify prior . user may also want specify special priors impose certain structure data. instance, user may believe certain set latent state sum 00 spacial structure . specially relevant modelling multiple time series, instance, lets say rr series Yi,tY_{,t}, =1,...ri=1,...r, : Yi,t|Œ∑i,t‚àºPoisson(Œ∑i,t)ln(Œ∑i,t)=Œªit=Œºt+Œ±i,t,‚àë=1rŒ±i,t=0,‚àÄt. \\begin{aligned}     Y_{,t}|\\eta_{,t} &\\sim Poisson(\\eta_{,t})\\\\ \\ln(\\eta_{,t})&=\\lambda_{}=\\mu_t+\\alpha_{,t},\\\\ \\sum_{=1}^{r} \\alpha_{,t}&=0, \\forall t. \\end{aligned} Similarly, one want specify CAR prior (Banerjee et al., 2014; Schmidt Nobre, 2018) variables Œ±1,...Œ±r\\alpha_1,...\\alpha_r, user believes spacial autocorrelation. scenarios, kDGLM package provides functions facilitate specification special priors structural blocks, zero_sum_prior CAR_prior. general usage analogous joint_prior function. Details functions omitted document sake brevity. comprehensive usage instructions, please refer vignette associated documentation.","code":"joint_prior(block, var.index = 1:block$n, a1 = block$a1[var.index], R1 = block$R1[var.index, var.index]) polynomial_block(mu = 1, order = 2, D = 0.95) |>   block_mult(5) |>   joint_prior(a1 = prior.mean, R1 = prior.var) # assuming the objects prior.mean and prior.var are defined."},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Silvaneo dos Santos Jr.. Author, maintainer. Mariane Branco Alves. Author. H√©lio dos Santos Migon. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"dos Santos SV Junior, Alves MB, Migon HS (2024). \"kDGLM: R package Bayesian analysis Generalized Dynamic Linear Models.\" 2403.13069.","code":"@Misc{,   title = {kDGLM: An R package for Bayesian analysis of Generalized Dynamic Linear Models},   author = {Silvaneo Vieira dos Santos Junior and Mariane Branco Alves and Helio dos Santos Migon},   eprint = {2403.13069},   archiveprefix = {arXiv},   primaryclass = {stat.ME},   year = {2024}, }"},{"path":"/index.html","id":"kdglm-an-r-package-for-bayesian-analysis-of-generalized-dynamic-linear-models","dir":"","previous_headings":"","what":"Bayesian Analysis of Dynamic Generalized Linear Models","title":"Bayesian Analysis of Dynamic Generalized Linear Models","text":"Welcome kDGLM GitHub repository! kDGLM innovative R package tailored Bayesian analysis Generalized Dynamic Linear Models (GDLM), catering uni- multivariate exponential families. package go-tool sequential inference time series data, offering broad spectrum functionalities including fitting, smoothing, monitoring, feed-forward interventions. Developed based methodology proposed Alves et al.(2024), kDGLM integrates seamlessly established techniques literature, particularly applied Gaussian Dynamic Models. supports various features discount strategies, autoregressive components, transfer functions, , leveraging Kalman filter smoothing properties exceptional computational efficiency. kDGLM, can expect almost instantaneous fitting times scale linearly time series length, making invaluable tool analyzing extended time series datasets. Currently, kDGLM supports variety distributions, including: Univariate Normal (unknown mean observational variance); Bivariate Normal (unknown means, observational variances, correlation); Poisson; Gamma (known shape unknown mean); Multinomial (known number trials unknown event probabilities). Furthermore, kDGLM allows joint modeling multiple time series, provided series adheres one supported distributions. ongoing development efforts focused continuously expanding range supported distributions enhance package‚Äôs versatility. Whether analyzing time series data research, business intelligence, purpose, kDGLM offers powerful, efficient, comprehensive solution needs. Explore documentation get started join community users benefiting advanced capabilities kDGLM!","code":""},{"path":[]},{"path":"/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Bayesian Analysis of Dynamic Generalized Linear Models","text":"installing kDGLM, ensure following dependencies installed R environment: extraDistr >= 1.9.1 cubature >= 2.1.0 Rfast >= 2.0.8 generics >= 0.1.3 Additionally, enhanced plotting experience, recommend installing ggplot2 plotly packages, augment built-plot methods provided kDGLM.","code":""},{"path":"/index.html","id":"installing-kdglm","dir":"","previous_headings":"","what":"Installing kDGLM","title":"Bayesian Analysis of Dynamic Generalized Linear Models","text":"now, kDGLM available directly GitHub repository. process submitting kDGLM CRAN, can install latest version package executing following command R console: command uses remotes package install kDGLM. remotes installed, can install first running install.packages(‚Äúremotes‚Äù).","code":"remotes::install_github('silvaneojunior/kDGLM')"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Bayesian Analysis of Dynamic Generalized Linear Models","text":"installation, load kDGLM R session: test package working properly, execute following code exemple: Refer vignettes detailed usage instructions. Also see documentation fit method basic examples type outcome kDGLM package offers.","code":"library(kDGLM) # Poisson case  data <- c(AirPassengers)   level <- polynomial_block(rate = 1, order = 2, D = 0.95)  season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)   outcome <- Poisson(lambda = \"rate\", data = data)   fitted.data <- fit(level, season,    AirPassengers = outcome  )  summary(fitted.data)  plot(fitted.data, plot.pkg = \"base\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Bayesian Analysis of Dynamic Generalized Linear Models","text":"welcome contributions! ‚Äôre interested improving kDGLM, please consider submitting bug reports, feature requests, pull requests.","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Bayesian Analysis of Dynamic Generalized Linear Models","text":"Ra√≠ra Marotta, gently provided base code initial versions.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Bayesian Analysis of Dynamic Generalized Linear Models","text":"support provide feedback, please contact Silvaneo dos Santos Jr. open issue GitHub repository.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright ¬© 2007 Free Software Foundation, Inc.¬†<http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program‚Äìmake sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers‚Äô authors‚Äô protection, GPL clearly explains warranty free software. users‚Äô authors‚Äô sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users‚Äô freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"‚ÄúLicense‚Äù refers version 3 GNU General Public License. ‚ÄúCopyright‚Äù also means copyright-like laws apply kinds works, semiconductor masks. ‚ÄúProgram‚Äù refers copyrightable work licensed License. licensee addressed ‚Äú‚Äù. ‚ÄúLicensees‚Äù ‚Äúrecipients‚Äù may individuals organizations. ‚Äúmodify‚Äù work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called ‚Äúmodified version‚Äù earlier work work ‚Äúbased ‚Äù earlier work. ‚Äúcovered work‚Äù means either unmodified Program work based Program. ‚Äúpropagate‚Äù work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. ‚Äúconvey‚Äù work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays ‚ÄúAppropriate Legal Notices‚Äù extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"‚Äúsource code‚Äù work means preferred form work making modifications . ‚ÄúObject code‚Äù means non-source form work. ‚ÄúStandard Interface‚Äù means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. ‚ÄúSystem Libraries‚Äù executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. ‚ÄúMajor Component‚Äù, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . ‚ÄúCorresponding Source‚Äù work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work‚Äôs System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users‚Äô Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work‚Äôs users, third parties‚Äô legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program‚Äôs source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 ‚Äúkeep intact notices‚Äù. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called ‚Äúaggregate‚Äù compilation resulting copyright used limit access legal rights compilation‚Äôs users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. ‚ÄúUser Product‚Äù either (1) ‚Äúconsumer product‚Äù, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, ‚Äúnormally used‚Äù refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. ‚ÄúInstallation Information‚Äù User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"‚ÄúAdditional permissions‚Äù terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered ‚Äúrestrictions‚Äù within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. ‚Äúentity transaction‚Äù transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party‚Äôs predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"‚Äúcontributor‚Äù copyright holder authorizes use License Program work Program based. work thus licensed called contributor‚Äôs ‚Äúcontributor version‚Äù. contributor‚Äôs ‚Äúessential patent claims‚Äù patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, ‚Äúcontrol‚Äù includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor‚Äôs essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, ‚Äúpatent license‚Äù express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). ‚Äúgrant‚Äù patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. ‚ÄúKnowingly relying‚Äù means actual knowledge , patent license, conveying covered work country, recipient‚Äôs use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license ‚Äúdiscriminatory‚Äù include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others‚Äô Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License ‚Äúlater version‚Äù applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy‚Äôs public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM ‚Äú‚Äù WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least ‚Äúcopyright‚Äù line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program‚Äôs commands might different; GUI interface, use ‚Äúbox‚Äù. also get employer (work programmer) school, , sign ‚Äúcopyright disclaimer‚Äù program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/analytic_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"analytic_filter ‚Äî analytic_filter","title":"analytic_filter ‚Äî analytic_filter","text":"Fit model given observed value model parameters.","code":""},{"path":"/reference/analytic_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"analytic_filter ‚Äî analytic_filter","text":"","code":"analytic_filter(   outcomes,   a1 = 0,   R1 = 1,   FF,   FF.labs,   G,   G.labs,   G.idx,   D,   h,   H,   p.monit = NA,   monitoring = FALSE )"},{"path":"/reference/analytic_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"analytic_filter ‚Äî analytic_filter","text":"outcomes list: observed data. contain objects class dlm_distr. a1 numeric: prior mean latent vector. R1 matrix: prior covariance matrix latent vector. FF array: 3D-array containing planning matrix time. dimension n x k x t, n number latent states, k number linear predictors model t time series length. FF.labs matrix: character matrix containing label associated value FF. G array: 3D-array containing evolution matrix time. dimension n x n x t, n number latent states t time series length. G.labs matrix: character matrix containing label associated value G. G.idx matrix: numeric matrix containing index associated value G. D array: 3D-array containing discount factor matrix time. dimension n x n x t, n number latent states t time series length. h matrix: drift added temporal evolution (can interpreted mean random noise time). dimension n x t, t length series n number latent states. H array: 3D-array containing covariance matrix noise time. dimension D. p.monit numeric (optional): prior probability changes latent space variables part dynamic. monitoring numeric: vector flags indicating latent states monitored.","code":""},{"path":"/reference/analytic_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"analytic_filter ‚Äî analytic_filter","text":"list containing following values: mt matrix: filtered mean latent states time. Dimensions n x t. Ct array: 3D-array containing filtered covariance matrix latent states time. Dimensions n x n x t. matrix: one-step-ahead mean latent states time. Dimensions n x t. Rt array: 3D-array containing one-step-ahead covariance matrix latent states time. Dimensions n x n x t. ft matrix: one-step-ahead mean linear predictors time. Dimensions k x t. Qt array: 3D-array containing one-step-ahead covariance matrix linear predictors time. Dimensions k x k x t. ft.star matrix: filtered mean linear predictors time. Dimensions k x t. Qt.star array: 3D-array containing linear predictors matrix latent state time. Dimensions k x k x t. FF array: argument (values). G matrix: argument (values). G.labs matrix: argument (values). G.idx matrix: argument (values). D array: argument (values). h array: argument (values). H array: argument (values). W array: 3D-array containing effective covariance matrix noise time, .e., considering H D. dimension H D. monitoring numeric: argument (values). outcomes list: argument outcomes (values). pred.names numeric: names linear predictors.","code":""},{"path":"/reference/analytic_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"analytic_filter ‚Äî analytic_filter","text":"models covered package, always use approach described ArtigokParametrico;textualkDGLM, including, particular, filtering algorithm presented work. details implementation see ArtigoPacote;textualkDGLM. details algorithm implemented see ArtigokParametrico;textualkDGLM, Petris-DLM;textualkDGLM, chapter 2, WestHarr-DLM;textualkDGLM, chapter 4, Kalman_filter_origins;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/array_collapse_left.html","id":null,"dir":"Reference","previous_headings":"","what":"array_collapse_left ‚Äî array_collapse_left","title":"array_collapse_left ‚Äî array_collapse_left","text":"Calculates matrix product array vector.","code":""},{"path":"/reference/array_collapse_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"array_collapse_left ‚Äî array_collapse_left","text":"","code":"array_collapse_left(A, B)"},{"path":"/reference/array_collapse_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"array_collapse_left ‚Äî array_collapse_left","text":"3-D array shapes n x m x k. B matrix shapes m x 1.","code":""},{"path":"/reference/array_collapse_left.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"array_collapse_left ‚Äî array_collapse_left","text":"array shapes n x m x k vector B shape m, operations returns matrix C, shapes n x k, C[,] = [,,]","code":""},{"path":"/reference/array_collapse_right.html","id":null,"dir":"Reference","previous_headings":"","what":"array_collapse_right ‚Äî array_collapse_right","title":"array_collapse_right ‚Äî array_collapse_right","text":"Calculates matrix product array vector.","code":""},{"path":"/reference/array_collapse_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"array_collapse_right ‚Äî array_collapse_right","text":"","code":"array_collapse_right(A, B)"},{"path":"/reference/array_collapse_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"array_collapse_right ‚Äî array_collapse_right","text":"3-D array shapes n x m x k. B matrix shapes 1 x n.","code":""},{"path":"/reference/array_collapse_right.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"array_collapse_right ‚Äî array_collapse_right","text":"array shapes m x n x k vector B shape m, operations returns matrix C, shapes n x k, C[,] = B","code":""},{"path":"/reference/array_mult_left.html","id":null,"dir":"Reference","previous_headings":"","what":"array_mult_left ‚Äî array_mult_left","title":"array_mult_left ‚Äî array_mult_left","text":"Calculates matrix product array matrix.","code":""},{"path":"/reference/array_mult_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"array_mult_left ‚Äî array_mult_left","text":"","code":"array_mult_left(A, B)"},{"path":"/reference/array_mult_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"array_mult_left ‚Äî array_mult_left","text":"3-D array shapes n x m x k. B matrix shapes m x l.","code":""},{"path":"/reference/array_mult_left.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"array_mult_left ‚Äî array_mult_left","text":"array shapes n x m x k matrix B shape m x l, operations returns array C, shapes n x l x k, C[,,] = [,,]","code":""},{"path":"/reference/array_mult_right.html","id":null,"dir":"Reference","previous_headings":"","what":"array_mult_right ‚Äî array_mult_right","title":"array_mult_right ‚Äî array_mult_right","text":"Calculates matrix product array matrix.","code":""},{"path":"/reference/array_mult_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"array_mult_right ‚Äî array_mult_right","text":"","code":"array_mult_right(A, B)"},{"path":"/reference/array_mult_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"array_mult_right ‚Äî array_mult_right","text":"3-D array shapes n x m x k. B matrix shapes l x n.","code":""},{"path":"/reference/array_mult_right.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"array_mult_right ‚Äî array_mult_right","text":"array shapes m x n x k matrix B shape l x m, operations returns array C, shapes l x n x k, C[,,] = B","code":""},{"path":"/reference/array_transp.html","id":null,"dir":"Reference","previous_headings":"","what":"array_transp ‚Äî array_transp","title":"array_transp ‚Äî array_transp","text":"Calculates element-wise transposition array.","code":""},{"path":"/reference/array_transp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"array_transp ‚Äî array_transp","text":"","code":"array_transp(A)"},{"path":"/reference/array_transp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"array_transp ‚Äî array_transp","text":"3-D array.","code":""},{"path":"/reference/array_transp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"array_transp ‚Äî array_transp","text":"array shapes n x m x k, operations returns array C, shapes m x n x k, C[,,] = t([,,]).","code":""},{"path":"/reference/base_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic structural blocks ‚Äî base_block","title":"Basic structural blocks ‚Äî base_block","text":"Creates basic structure dlm block desired order.","code":""},{"path":"/reference/base_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic structural blocks ‚Äî base_block","text":"","code":"base_block(..., order, name, D, h, H, a1, R1, monitoring)"},{"path":"/reference/base_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic structural blocks ‚Äî base_block","text":"... Named values planning matrix. order integer: order structure. Must positive name character: optional argument providing name block. Can useful identify models meaningful labels, also, name used used auxiliary functions. D array, matrix, vector scalar: values discount factors associated latent states time. D array, dimensions n x n x t, n order polynomial block t length outcomes. D matrix, dimensions n x n discount matrix used observations. D vector, size t interpreted discount factor observed time (discount variable). D scalar, discount used latent states times. h matrix, vector scalar: drift add temporal evolution (can interpreted mean random noise time). matrix, dimension n x t, n number latent states (.e., order) t length series. vector, size t, value applied first latent state (one affects linear predictors) respective time. scalar, passed value used first latent state time. H array, matrix, vector scalar: values covariance matrix noise factor time. H array, dimensions n x n x t, n order polynomial block t length series. H matrix, dimensions n x n values used time. H vector scalar, discount factor matrix created diagonal matrix values H diagonal. a1 vector scalar: prior mean latent states associated block time 1. a1 vector, dimension equal order polynomial block. a1 scalar, value used latent states. R1 matrix, vector scalar: prior covariance matrix latent states associated block time 1. R1 matrix, dimensions n x n. R1 vector scalar, covariance matrix created diagonal matrix values R1 diagonal. monitoring vector: vector flags indicating variables monitored (automated monitoring used). size n. default first order component structure monitored.","code":""},{"path":"/reference/base_ribbon.html","id":null,"dir":"Reference","previous_headings":"","what":"base_ribbon ‚Äî base_ribbon","title":"base_ribbon ‚Äî base_ribbon","text":"Makes ribbon plot using R base functions.","code":""},{"path":"/reference/base_ribbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"base_ribbon ‚Äî base_ribbon","text":"","code":"base_ribbon(x, ymin, ymax, ...)"},{"path":"/reference/base_ribbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"base_ribbon ‚Äî base_ribbon","text":"x numeric: sequence values x-axis. ymin numeric: sequence values lower bound ribbon. ymax numeric: sequence values upper bound ribbon. ... Extra arguments polygon function.","code":""},{"path":"/reference/bdiag.html","id":null,"dir":"Reference","previous_headings":"","what":"bdiag ‚Äî bdiag","title":"bdiag ‚Äî bdiag","text":"Creates block diagonal matrix matrix passed argument.","code":""},{"path":"/reference/bdiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bdiag ‚Äî bdiag","text":"","code":"bdiag(...)"},{"path":"/reference/bdiag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bdiag ‚Äî bdiag","text":"... list matrices used.","code":""},{"path":"/reference/bdiag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bdiag ‚Äî bdiag","text":"block diagonal matrix whose diagonal elements equal matrices passed arguments.","code":""},{"path":"/reference/block_mult.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function to replicate blocks ‚Äî block_mult","title":"Auxiliary function to replicate blocks ‚Äî block_mult","text":"auxiliary function replicate blocks.","code":""},{"path":"/reference/block_mult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function to replicate blocks ‚Äî block_mult","text":"","code":"block_mult(block, k)"},{"path":"/reference/block_mult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function to replicate blocks ‚Äî block_mult","text":"block dlm_block: block replicated k Integer: number blocks generate.","code":""},{"path":"/reference/block_mult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function to replicate blocks ‚Äî block_mult","text":"combined replicated blocks dlm_block.","code":""},{"path":[]},{"path":"/reference/block_mult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auxiliary function to replicate blocks ‚Äî block_mult","text":"","code":"# Long way level <- polynomial_block(alpha = 1, order = 1)  final.block <- block_mult(level, 5)  # Short way final.block <- 5 * polynomial_block(alpha = 1, order = 1)"},{"path":"/reference/block_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"block_rename ‚Äî block_rename","title":"block_rename ‚Äî block_rename","text":"block_rename","code":""},{"path":"/reference/block_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"block_rename ‚Äî block_rename","text":"","code":"block_rename(block, pred.names)"},{"path":"/reference/block_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"block_rename ‚Äî block_rename","text":"block dlm_block object. pred.names vector string names linear predictor block.","code":""},{"path":"/reference/block_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"block_rename ‚Äî block_rename","text":"dlm_block linear predictors renamed values passed names.","code":""},{"path":[]},{"path":"/reference/block_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"block_rename ‚Äî block_rename","text":"","code":"base.block <- polynomial_block(   eta = 1,   order = 1,   name = \"Poly\",   D = 0.95 )  final.block <- block_rename(2 * base.block, c(\"mu\", \"sigma\"))"},{"path":"/reference/block_superpos.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for block superposition ‚Äî block_superpos","title":"Auxiliary function for block superposition ‚Äî block_superpos","text":"auxiliary function block superposition.","code":""},{"path":"/reference/block_superpos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for block superposition ‚Äî block_superpos","text":"","code":"block_superpos(...)"},{"path":"/reference/block_superpos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for block superposition ‚Äî block_superpos","text":"... dlm_block: sequence block combine.","code":""},{"path":"/reference/block_superpos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for block superposition ‚Äî block_superpos","text":"combined blocks dlm_block.","code":""},{"path":"/reference/block_superpos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auxiliary function for block superposition ‚Äî block_superpos","text":"Additional details can found WestHarr-DLM;textualkDGLM, section 6.2.","code":""},{"path":[]},{"path":[]},{"path":"/reference/block_superpos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auxiliary function for block superposition ‚Äî block_superpos","text":"","code":"# Long way level.1 <- polynomial_block(alpha1 = 1, order = 1) level.2 <- polynomial_block(alpha2 = 1, order = 2) season.2 <- harmonic_block(alpha2 = 1, period = 20)  final.block <- block_superpos(level.1, level.2, season.2)  # Short way final.block <- polynomial_block(alpha1 = 1, order = 1) +   polynomial_block(alpha2 = 1, order = 2) +   harmonic_block(alpha2 = 1, period = 20)"},{"path":"/reference/CAR_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"CAR prior ‚Äî CAR_prior","title":"CAR prior ‚Äî CAR_prior","text":"Defines prior structural block Conditional Autoregressive (CAR) prior.","code":""},{"path":"/reference/CAR_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CAR prior ‚Äî CAR_prior","text":"","code":"CAR_prior(   block,   adj.matrix,   scale,   rho,   sum.zero = FALSE,   var.index = 1:block$n )"},{"path":"/reference/CAR_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CAR prior ‚Äî CAR_prior","text":"block dlm_block object: structural block. adj.matrix matrix: adjacency matrix. scale numeric: tau parameter CAR model (see references). rho numeric: rho parameter CAR model (see references). sum.zero Bool: true, latent states add 0. var.index integer: index variables set prior.","code":""},{"path":"/reference/CAR_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CAR prior ‚Äî CAR_prior","text":"dlm_block object desired prior.","code":""},{"path":"/reference/CAR_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CAR prior ‚Äî CAR_prior","text":"filtering algorithm used package requires proper prior latent space. , implementation CAR prior imposes zero-sum constraint regional effects. discount factor must variables whose prior modified. revision CAR prior, see AlexCar;textualkDGLM. details implementation see ArtigoPacote;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/CAR_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CAR prior ‚Äî CAR_prior","text":"","code":"# Creating an arbitrary adjacency matrix adj.matrix <- matrix(   c(     0, 1, 1, 0, 0,     1, 0, 1, 0, 0,     1, 1, 0, 0, 0,     0, 0, 0, 0, 1,     0, 0, 0, 1, 0   ),   5, 5,   byrow = TRUE )  polynomial_block(mu = 1, D = 0.95) |>   block_mult(5) |>   CAR_prior(scale = 9, rho = 1, adj.matrix = adj.matrix) #> Mixed DLM block. #> latent states:  #>     Var.Poly.1: Level (1 variable(s)) #>     Var.Poly.2: Level (1 variable(s)) #>     Var.Poly.3: Level (1 variable(s)) #>     Var.Poly.4: Level (1 variable(s)) #>     Var.Poly.5: Level (1 variable(s)) #>  #> Linear predictors:  #>     mu.1 #>     mu.2 #>     mu.3 #>     mu.4 #>     mu.5 #>  #> Status: defined #> Serie length: 1 #> Interventions at:  #> Number of latent states: 5 #> Number of linear predictors: 5"},{"path":"/reference/check.block.status.html","id":null,"dir":"Reference","previous_headings":"","what":"check.block.status ‚Äî check.block.status","title":"check.block.status ‚Äî check.block.status","text":"Checks block defined.","code":""},{"path":"/reference/check.block.status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check.block.status ‚Äî check.block.status","text":"","code":"check.block.status(block)"},{"path":"/reference/check.block.status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check.block.status ‚Äî check.block.status","text":"block dlm_block object.","code":""},{"path":"/reference/check.block.status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check.block.status ‚Äî check.block.status","text":"character (\"defined\" \"undefined\") indicating parameters block defined.","code":""},{"path":"/reference/chickenPox.html","id":null,"dir":"Reference","previous_headings":"","what":"Hospital admissions by chicken pox in Brazil ‚Äî chickenPox","title":"Hospital admissions by chicken pox in Brazil ‚Äî chickenPox","text":"Monthly hospital admissions chicken pox Brazil January 2010 December 2019.","code":""},{"path":"/reference/chickenPox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hospital admissions by chicken pox in Brazil ‚Äî chickenPox","text":"","code":"chickenPox"},{"path":"/reference/chickenPox.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hospital admissions by chicken pox in Brazil ‚Äî chickenPox","text":"data frame 120 rows 6 columns: date date observations. < 5 year, 5 9 years, 10 14 years, 15 49 years, 50 years number admissions age group.","code":""},{"path":"/reference/chickenPox.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hospital admissions by chicken pox in Brazil ‚Äî chickenPox","text":"https://datasus.saude.gov.br/informacoes-de-saude-tabnet/","code":""},{"path":"/reference/coef.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"coef.fitted_dlm ‚Äî coef.fitted_dlm","title":"coef.fitted_dlm ‚Äî coef.fitted_dlm","text":"Evaluates predictive values observed values used fit model latent states. Predictions can made smoothed values, filtered values h-steps ahead.","code":""},{"path":"/reference/coef.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"coef.fitted_dlm ‚Äî coef.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' coef(   object,   t.eval = seq_len(object$t),   lag = -1,   pred.cred = 0.95,   eval.pred = FALSE,   eval.metric = FALSE,   ... )"},{"path":"/reference/coef.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"coef.fitted_dlm ‚Äî coef.fitted_dlm","text":"object fitted_dlm: fitted model use evaluation. t.eval numeric: vector positive integers indicating time index extract predictions. default extract evaluate model observed times. lag integer: relative offset forecast. Values time t calculated based filtered values time t-h. lag negative, smoothed distribution latent states used. pred.cred numeric: credibility level C... eval.pred boolean: flag indicating predictions calculated. eval.metric boolean: flag indicating model density (f(M|y)) calculated. used lag<0. ... Extra arguments passed coef method.","code":""},{"path":"/reference/coef.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"coef.fitted_dlm ‚Äî coef.fitted_dlm","text":"list containing: data data.frame: table model evaluated observed time. theta.mean matrix: mean latent states time. Dimensions n x t, t size t.eval n number latent states. theta.cov array: 3D-array containing covariance matrix latent states time. Dimensions n x n x t, t size t.eval n number latent states. lambda.mean matrix: mean linear predictor time. Dimensions k x t, t size t.eval k number linear predictors. lambda.cov array: 3D-array containing covariance matrix linear predictor time. Dimensions k x k x t, t size t.eval k number linear predictors. log.like, mae, mase, rae, mse, interval.score: metric value time. conj.param list: list containing, outcome, data.frame parameter conjugated distribution time.","code":""},{"path":[]},{"path":"/reference/coef.fitted_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"coef.fitted_dlm ‚Äî coef.fitted_dlm","text":"","code":"# Poisson case data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome )  var.vals <- coef(fitted.data)"},{"path":"/reference/coefficients.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"coefficients.fitted_dlm ‚Äî coefficients.fitted_dlm","title":"coefficients.fitted_dlm ‚Äî coefficients.fitted_dlm","text":"method wrapper coef method.","code":""},{"path":"/reference/coefficients.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"coefficients.fitted_dlm ‚Äî coefficients.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' coefficients(object, ...)"},{"path":"/reference/coefficients.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"coefficients.fitted_dlm ‚Äî coefficients.fitted_dlm","text":"object fitted_dlm object. ... Arguments passed coef.","code":""},{"path":"/reference/coefficients.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"coefficients.fitted_dlm ‚Äî coefficients.fitted_dlm","text":"list containing: data data.frame: table model evaluated observed time. theta.mean matrix: mean latent states time. Dimensions n x t, t size t.eval n number latent states. theta.cov array: 3D-array containing covariance matrix latent states time. Dimensions n x n x t, t size t.eval n number latent states. lambda.mean matrix: mean linear predictor time. Dimensions k x t, t size t.eval k number linear predictors. lambda.cov array: 3D-array containing covariance matrix linear predictor time. Dimensions k x k x t, t size t.eval k number linear predictors. log.like, mae, mase, rae, mse, interval.score: metric value time. conj.param list: list containing, outcome, data.frame parameter conjugated distribution time.","code":""},{"path":[]},{"path":"/reference/colQuantile.html","id":null,"dir":"Reference","previous_headings":"","what":"colQuantile ‚Äî colQuantile","title":"colQuantile ‚Äî colQuantile","text":"function calculates column-wise quantile matrix.","code":""},{"path":"/reference/colQuantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colQuantile ‚Äî colQuantile","text":"","code":"colQuantile(X, q)"},{"path":"/reference/colQuantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"colQuantile ‚Äî colQuantile","text":"X matrix. q numeric: number 0 1.","code":""},{"path":"/reference/colQuantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"colQuantile ‚Äî colQuantile","text":"numeric: chosen quantile column X.","code":""},{"path":"/reference/convert_Gamma_Normal.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_Gamma_Normal ‚Äî convert_Gamma_Normal","title":"convert_Gamma_Normal ‚Äî convert_Gamma_Normal","text":"Calculate parameters Inverse-Gamma best approximates given log-Normal distribution. approximation best sense minimizes KL divergence log-Normal Inverse-Gamma","code":""},{"path":"/reference/convert_Gamma_Normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_Gamma_Normal ‚Äî convert_Gamma_Normal","text":"","code":"convert_Gamma_Normal(ft, Qt, parms)"},{"path":"/reference/convert_Gamma_Normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_Gamma_Normal ‚Äî convert_Gamma_Normal","text":"ft vector: vector representing means normal distribution. Qt matrix: matrix representing covariance matrix normal distribution. parms list: list extra known parameters distribution. used function.","code":""},{"path":"/reference/convert_Gamma_Normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_Gamma_Normal ‚Äî convert_Gamma_Normal","text":"parameters conjugated distribution linear predictor.","code":""},{"path":[]},{"path":"/reference/convert_Multinom_Normal.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_Multinom_Normal ‚Äî convert_Multinom_Normal","title":"convert_Multinom_Normal ‚Äî convert_Multinom_Normal","text":"Calculate parameters Dirichlet best approximates given log-Normal distribution. approximation best sense minimizes KL divergence log-Normal Dirichlet.","code":""},{"path":"/reference/convert_Multinom_Normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_Multinom_Normal ‚Äî convert_Multinom_Normal","text":"","code":"convert_Multinom_Normal(ft, Qt, parms = list())"},{"path":"/reference/convert_Multinom_Normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_Multinom_Normal ‚Äî convert_Multinom_Normal","text":"ft vector: vector representing means normal distribution. Qt matrix: matrix representing covariance matrix normal distribution. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/convert_Multinom_Normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_Multinom_Normal ‚Äî convert_Multinom_Normal","text":"parameters conjugated distribution linear predictor.","code":""},{"path":[]},{"path":"/reference/convert_multi_NG_Normal.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_multi_NG_Normal ‚Äî convert_multi_NG_Normal","title":"convert_multi_NG_Normal ‚Äî convert_multi_NG_Normal","text":"Calculate parameters Normal-Gamma best approximates given Multivariate Normal distribution. distribution obtained outcome marginal. approximation best sense minimizes KL divergence Normal Normal-Gamma. approach, suppose first entry multivariate normal represents mean observed data second represent log variance.","code":""},{"path":"/reference/convert_multi_NG_Normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_multi_NG_Normal ‚Äî convert_multi_NG_Normal","text":"","code":"convert_multi_NG_Normal(ft, Qt, parms)"},{"path":"/reference/convert_multi_NG_Normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_multi_NG_Normal ‚Äî convert_multi_NG_Normal","text":"ft numeric: vector representing means normal distribution. Qt matrix: matrix representing covariance matrix normal distribution. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/convert_multi_NG_Normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_multi_NG_Normal ‚Äî convert_multi_NG_Normal","text":"parameters conjugated distribution linear predictor.","code":""},{"path":[]},{"path":"/reference/convert_Normal_Gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_Normal_Gamma ‚Äî convert_Normal_Gamma","title":"convert_Normal_Gamma ‚Äî convert_Normal_Gamma","text":"Calculates parameters log-Normal best approximates given Inverse-Gamma distribution. approximation best sense minimizes KL divergence Inverse-Gamma log-Normal","code":""},{"path":"/reference/convert_Normal_Gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_Normal_Gamma ‚Äî convert_Normal_Gamma","text":"","code":"convert_Normal_Gamma(conj.param, parms)"},{"path":"/reference/convert_Normal_Gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_Normal_Gamma ‚Äî convert_Normal_Gamma","text":"conj.param list: vector containing parameters Inverse-Gamma (alpha,beta). parms list: list extra known parameters distribution. used function.","code":""},{"path":"/reference/convert_Normal_Gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_Normal_Gamma ‚Äî convert_Normal_Gamma","text":"parameters Normal distribution linear predictor.","code":""},{"path":[]},{"path":"/reference/convert_Normal_Multinom.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_Normal_Multinom ‚Äî convert_Normal_Multinom","title":"convert_Normal_Multinom ‚Äî convert_Normal_Multinom","text":"Calculate parameters log-Normal best approximates given Dirichlet distribution. approximation best sense minimizes KL divergence Dirichlet log-Normal","code":""},{"path":"/reference/convert_Normal_Multinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_Normal_Multinom ‚Äî convert_Normal_Multinom","text":"","code":"convert_Normal_Multinom(conj.param, parms = list())"},{"path":"/reference/convert_Normal_Multinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_Normal_Multinom ‚Äî convert_Normal_Multinom","text":"conj.param list: vector containing concentration parameters Dirichlet. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/convert_Normal_Multinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_Normal_Multinom ‚Äî convert_Normal_Multinom","text":"parameters Normal distribution linear predictor.","code":""},{"path":[]},{"path":"/reference/convert_Normal_Poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_Normal_Poisson ‚Äî convert_Normal_Poisson","title":"convert_Normal_Poisson ‚Äî convert_Normal_Poisson","text":"Calculate parameters log-Normal best approximates given Gamma distribution. approximation best sense minimizes KL divergence Gamma log-Normal","code":""},{"path":"/reference/convert_Normal_Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_Normal_Poisson ‚Äî convert_Normal_Poisson","text":"","code":"convert_Normal_Poisson(conj.param, parms)"},{"path":"/reference/convert_Normal_Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_Normal_Poisson ‚Äî convert_Normal_Poisson","text":"conj.param list: vector containing parameters Gamma (alpha,beta). parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/convert_Normal_Poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_Normal_Poisson ‚Äî convert_Normal_Poisson","text":"parameters Normal distribution linear predictor.","code":""},{"path":[]},{"path":"/reference/convert_Poisson_Normal.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_Poisson_Normal ‚Äî convert_Poisson_Normal","title":"convert_Poisson_Normal ‚Äî convert_Poisson_Normal","text":"Calculate parameters Gamma best approximates given log-Normal distribution. approximation best sense minimizes KL divergence log-Normal Gamma","code":""},{"path":"/reference/convert_Poisson_Normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_Poisson_Normal ‚Äî convert_Poisson_Normal","text":"","code":"convert_Poisson_Normal(ft, Qt, parms)"},{"path":"/reference/convert_Poisson_Normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_Poisson_Normal ‚Äî convert_Poisson_Normal","text":"ft numeric: vector representing means normal distribution. Qt matrix: matrix representing covariance matrix normal distribution. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/convert_Poisson_Normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_Poisson_Normal ‚Äî convert_Poisson_Normal","text":"parameters conjugated distribution linear predictor.","code":""},{"path":[]},{"path":"/reference/cornWheat.html","id":null,"dir":"Reference","previous_headings":"","what":"Corn and wheat prices from 1986 to 2014 ‚Äî cornWheat","title":"Corn and wheat prices from 1986 to 2014 ‚Äî cornWheat","text":"prices (U.S. Dollars) per bushel log returns corn wheat 1986-01-03 2014-10-10. observation corresponds price day, days present dataset.","code":""},{"path":"/reference/cornWheat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corn and wheat prices from 1986 to 2014 ‚Äî cornWheat","text":"","code":"cornWheat"},{"path":"/reference/cornWheat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Corn and wheat prices from 1986 to 2014 ‚Äî cornWheat","text":"data frame 7,253 rows 5 columns: date date observation. corn.price, wheat.price price (U.S. Dollars) per bushel corn wheat, respectively. corn.log.return, wheat.log.return log returns corn wheat, respectively.","code":""},{"path":"/reference/cornWheat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Corn and wheat prices from 1986 to 2014 ‚Äî cornWheat","text":"https://www.macrotrends.net/charts/commodities","code":""},{"path":"/reference/create_G.html","id":null,"dir":"Reference","previous_headings":"","what":"create_G ‚Äî create_G","title":"create_G ‚Äî create_G","text":"Creates matrix G G","code":""},{"path":"/reference/create_G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_G ‚Äî create_G","text":"","code":"create_G(S0, S1)"},{"path":"/reference/create_G.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_G ‚Äî create_G","text":"S0 covariance matrix S1 Another covariance matrix","code":""},{"path":"/reference/dmvnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"dmvnorm ‚Äî dmvnorm","title":"dmvnorm ‚Äî dmvnorm","text":"Calculates log density multivariate normal distribution mean mu covariance matrix Sigma.","code":""},{"path":"/reference/dmvnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dmvnorm ‚Äî dmvnorm","text":"","code":"dmvnorm(x, mu, Sigma)"},{"path":"/reference/dmvnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dmvnorm ‚Äî dmvnorm","text":"x Vector: value calculate density. mu Vector: mean vector Sigma Matrix: Covariance matrix.","code":""},{"path":"/reference/evaluate_max.html","id":null,"dir":"Reference","previous_headings":"","what":"evaluate_max ‚Äî evaluate_max","title":"evaluate_max ‚Äî evaluate_max","text":"Auxiliary function calculate axis limits gradation plots.","code":""},{"path":"/reference/evaluate_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evaluate_max ‚Äî evaluate_max","text":"","code":"evaluate_max(pre.max)"},{"path":"/reference/evaluate_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evaluate_max ‚Äî evaluate_max","text":"pre.max numeric: vector/matrix calculate axis limits gradation.","code":""},{"path":"/reference/evaluate_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"evaluate_max ‚Äî evaluate_max","text":"list containing gradation axis, number ticks axis maximum value.","code":""},{"path":"/reference/eval_dlm_log_like.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_log_like","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_log_like","text":"Evaluates prior density set parameters theta DLM. structure DLM taken fitted_dlm object passed input.","code":""},{"path":"/reference/eval_dlm_log_like.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_log_like","text":"","code":"eval_dlm_log_like(theta, model, lin.pred = FALSE)"},{"path":"/reference/eval_dlm_log_like.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_log_like","text":"theta Matrix: matrix representing set parameter evaluate density. size n x t, n number latent states t length time series; model fitted_dlm: fitted_dlm object. lin.pred boolean: flag indicating theta represents linear predictors.","code":""},{"path":"/reference/eval_dlm_log_like.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_log_like","text":"scalar representing log likelihood evaluated theta.","code":""},{"path":"/reference/eval_dlm_log_like.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_log_like","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) eval_dlm_log_like(fitted.data$mts, fitted.data) #> [1] -563.1491"},{"path":"/reference/eval_dlm_norm_const.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for evaluating normalizing constant for the posterior of a fitted DLM. ‚Äî eval_dlm_norm_const","title":"Auxiliary function for evaluating normalizing constant for the posterior of a fitted DLM. ‚Äî eval_dlm_norm_const","text":"Evaluates normalizing constant posterior fitted DLM.","code":""},{"path":"/reference/eval_dlm_norm_const.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for evaluating normalizing constant for the posterior of a fitted DLM. ‚Äî eval_dlm_norm_const","text":"","code":"eval_dlm_norm_const(model, lin.pred = FALSE)"},{"path":"/reference/eval_dlm_norm_const.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for evaluating normalizing constant for the posterior of a fitted DLM. ‚Äî eval_dlm_norm_const","text":"model fitted_dlm: fitted_dlm object. lin.pred boolean: flag indicating normalizing constant calculated using linear predictors.","code":""},{"path":"/reference/eval_dlm_norm_const.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for evaluating normalizing constant for the posterior of a fitted DLM. ‚Äî eval_dlm_norm_const","text":"scalar representing normalizing constant posterior fitted DLM.","code":""},{"path":[]},{"path":"/reference/eval_dlm_norm_const.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auxiliary function for evaluating normalizing constant for the posterior of a fitted DLM. ‚Äî eval_dlm_norm_const","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) eval_dlm_norm_const(fitted.data) #> [1] -598.9172"},{"path":"/reference/eval_dlm_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for evaluating the posterior density of a DLM ‚Äî eval_dlm_post","title":"Auxiliary function for evaluating the posterior density of a DLM ‚Äî eval_dlm_post","text":"Evaluates density set parameters theta DLM. structure DLM taken fitted_dlm object passed input.","code":""},{"path":"/reference/eval_dlm_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for evaluating the posterior density of a DLM ‚Äî eval_dlm_post","text":"","code":"eval_dlm_post(theta, model, lin.pred = FALSE)"},{"path":"/reference/eval_dlm_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for evaluating the posterior density of a DLM ‚Äî eval_dlm_post","text":"theta Matrix: matrix representing set parameter evaluate density. size n x t, n number latent states t length time series; model fitted_dlm: fitted_dlm object. lin.pred boolean: flag indicating theta represents linear predictors.","code":""},{"path":"/reference/eval_dlm_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for evaluating the posterior density of a DLM ‚Äî eval_dlm_post","text":"scalar representing log density evaluated theta.","code":""},{"path":"/reference/eval_dlm_post.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auxiliary function for evaluating the posterior density of a DLM ‚Äî eval_dlm_post","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) eval_dlm_post(fitted.data$mts, fitted.data) #> [1] 3663.97"},{"path":"/reference/eval_dlm_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_prior","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_prior","text":"Evaluates prior density set parameters theta DLM. structure DLM taken fitted_dlm object passed input.","code":""},{"path":"/reference/eval_dlm_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_prior","text":"","code":"eval_dlm_prior(theta, model, lin.pred = FALSE)"},{"path":"/reference/eval_dlm_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_prior","text":"theta matrix: matrix representing set parameter evaluate density. size n x t, n number latent states t length time series; model fitted_dlm object: fitted_dlm object. lin.pred boolean: flag indicating theta represents linear predictors.","code":""},{"path":"/reference/eval_dlm_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_prior","text":"scalar representing log density evaluated theta.","code":""},{"path":"/reference/eval_dlm_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auxiliary function for evaluating the prior density of a DLM ‚Äî eval_dlm_prior","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) eval_dlm_prior(fitted.data$mts, fitted.data) #> [1] 3628.202"},{"path":"/reference/ffs_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural blocks for free-form seasonal trends and regressions ‚Äî ffs_block","title":"Structural blocks for free-form seasonal trends and regressions ‚Äî ffs_block","text":"Creates structure free-form seasonal (FFS) block desired periodicity.","code":""},{"path":"/reference/ffs_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural blocks for free-form seasonal trends and regressions ‚Äî ffs_block","text":"","code":"ffs_block(   ...,   period,   sum.zero = FALSE,   name = \"Var.FFS\",   D = 1,   h = 0,   H = 0,   a1 = 0,   R1 = 4,   monitoring = FALSE )  ffs(period, D = 0.95, a1 = 0, R1 = 9, name = \"Var.FFS\", X = 1)"},{"path":"/reference/ffs_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural blocks for free-form seasonal trends and regressions ‚Äî ffs_block","text":"... Named values planning matrix. period Positive integer: size seasonal cycle. block one latent state element cycle, number latent states n equal period. sum.zero Bool: true, latent states add 0 correlated temporal evolution. false, first observation considered base line level states represent deviation baseline. name String: optional argument providing name block. Can useful identify models meaningful labels, also, name used used auxiliary functions. D Vector scalar: values discount factors associated first latent state (current effect) time. D vector, size t interpreted discount factor observed time. D scalar, discount used times. h Vector scalar: drift add temporal evolution (can interpreted mean random noise time). vector, size t, value applied first latent state (one affects linear predictors) respective time. scalar, passed value used first latent state time. H Vector scalar: values covariance matrix noise factor time. vector, size t, value  represent variance temporal evolution time. scalar, passed value used first latent state time. a1 Vector scalar: prior mean latent states associated block time 1. a1 vector, dimension equal period FFS block. a1 scalar, value used latent states. R1 Matrix, vector scalar: prior covariance matrix latent states associated block time 1. R1 matrix, dimensions period x period. R1 vector scalar, covariance matrix created diagonal matrix values R1 diagonal. monitoring Bool: indicator first latent state monitored (automated monitoring used). X Vector scalar: argument providing values covariate X_t.","code":""},{"path":"/reference/ffs_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural blocks for free-form seasonal trends and regressions ‚Äî ffs_block","text":"dlm_block object containing following values: FF Array: 3D-array containing regression matrix time. dimension n x k x t, n number latent states, k number linear predictors model t time series length. FF.labs Matrix: n x k character matrix describing type value element FF. G Matrix: 3D-array containing evolution matrix time. dimension n x n x t, n number latent states t time series length. G.labs Matrix: n x n character matrix describing type value element G. G.idx Matrix: n x n character matrix containing index element G. D Array: 3D-array containing discount factor matrix time. dimension n x n x t, n number latent states t time series length. h Matrix: mean random noise temporal evolution. dimension n x t. H Array: 3D-array containing covariance matrix noise time. dimension D. a1 Vector: prior mean latent vector. R1 Matrix: prior covariance matrix latent vector. var.names list: list containing variables indexes name. period Positive integer: argument. n Positive integer: number latent states associated block (2). t Positive integer: number time steps associated block. 1, block compatible blocks time length, t greater 1, block can used blocks time length. k Positive integer: number outcomes associated block. block can used blocks outcome length. pred.names Vector: name linear predictors associated block. monitoring Vector: argument. type Character: type block (Harmonic).","code":""},{"path":"/reference/ffs_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural blocks for free-form seasonal trends and regressions ‚Äî ffs_block","text":"..., D, H, a1 R1 arguments, user may set one values string. , user leave block partially undefined. user must pass undefined parameter values named arguments fit_model function. Also, multiple values can passed, allowing sensitivity analysis value parameter. details implementation see ArtigoPacote;textualkDGLM. details free-form seasonal trends context DLM's, see WestHarr-DLM;textualkDGLM, chapter 8. details dynamic regression models context DLM's, see WestHarr-DLM;textualkDGLM, chapters 6 9.","code":""},{"path":[]},{"path":[]},{"path":"/reference/ffs_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural blocks for free-form seasonal trends and regressions ‚Äî ffs_block","text":"","code":"# Creating a first order structure for a model with 2 outcomes. # One block is created for each outcome # with each block being associated with only one of the outcomes. season.1 <- ffs_block(alpha1 = 1, period = 12) season.2 <- ffs_block(alpha2 = 1, period = 12)  # Creating a block with shared effect between the outcomes season.3 <- ffs_block(alpha1 = 1, alpha2 = 1, period = 12)"},{"path":"/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting kDGLM models ‚Äî fit_model","title":"Fitting kDGLM models ‚Äî fit_model","text":"Fit model given structure observed data. function can used supported family (see vignette).","code":""},{"path":"/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting kDGLM models ‚Äî fit_model","text":"","code":"fit_model(   ...,   smooth = TRUE,   p.monit = NA,   condition = \"TRUE\",   metric = \"log.like\",   lag = 1,   pred.cred = 0.95,   metric.cutoff = NA,   save.models = FALSE,   silent = FALSE )"},{"path":"/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting kDGLM models ‚Äî fit_model","text":"... dlm_block dlm_distr objects named values: structural blocks model (dlm_block objects), alongside model outcomes (dlm_distr object). least one block undefined, user must also provide value argument (see last example). smooth boolean: flag indicating smoothed distribution latent states calculated. p.monit numeric (optional): prior probability changes latent space variables part dynamic. used performing sensitivity analysis. condition character: character defining combinations undefined hyper parameter tested. See example details. used performing sensitivity analysis. metric character: name metric use model selection. One log-likelihood one-step-ahead prediction (\"log.like\"), Mean Absolute Scaled Error (\"mase\") masekDGLM Interval Score (\"interval.score\") interval_scorekDGLM.  used performing sensitivity analysis. lag integer: number steps ahead used prediction calculating metrics. lag<0, predictions made using smoothed distribution latent states.  used performing sensitivity analysis. pred.cred numeric: number 0 1 (included) indicating credibility interval predictions. within valid range values, 0.95 used. used performing sensitivity analysis. metric.cutoff integer: number observations ignore calculating metrics. Default 1/10 number observations (rounded ). used performing sensitivity analysis. save.models boolean: flag indicating evaluated models saved. FALSE, best model (according chosen metric) saved. used performing sensitivity analysis. silent boolean: flag indicating progress bar printed. used performing sensitivity analysis.","code":""},{"path":"/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting kDGLM models ‚Äî fit_model","text":"fitted_dlm object.","code":""},{"path":"/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting kDGLM models ‚Äî fit_model","text":"main function kDGLM package, used fit models. details implementation see  ArtigoPacote;textualkDGLM. details methodology see  ArtigokParametrico;textualkDGLM. details Dynamic Linear Models see  WestHarr-DLM;textualkDGLM Petris-DLM;textualkDGLM.","code":""},{"path":[]},{"path":"/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting kDGLM models ‚Äî fit_model","text":"","code":"# Poisson case data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     AirPassengers: Poisson #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -580.2514 #> Interval Score        : 129.48462 #> Mean Abs. Scaled Error:   0.47013 #> ---  plot(fitted.data, plot.pkg = \"base\")   ##################################################################  # Multinomial case structure <- (   polynomial_block(p = 1, order = 2, D = 0.95) +     harmonic_block(p = 1, period = 12, D = 0.975) +     noise_block(p = 1, R1 = 0.1) +     regression_block(p = chickenPox$date >= as.Date(\"2013-09-01\"))   # Vaccine was introduced in September of 2013 ) * 4  outcome <- Multinom(p = structure$pred.names, data = chickenPox[, c(2, 3, 4, 6, 5)]) fitted.data <- fit_model(structure, chickenPox = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     chickenPox: Multinomial #>  #> Static coeficients (smoothed): #>                  Estimate Std. Error   t value Pr(>|t|) #> Var.Reg.1         0.39743    0.25059  1.58601    0.113    #> Var.Reg.2         0.47441    0.26448  1.79376    0.073    #> Var.Reg.3         0.48811    0.28497  1.71284    0.087    #> Var.Reg.4        -0.26900    0.23557 -1.14192    0.253    #> --- #> Signif. codes:  0 ‚Äò***‚Äô 0.001 ‚Äò**‚Äô 0.01 ‚Äò*‚Äô 0.05 ‚Äò.‚Äô 0.1 ‚Äò ‚Äô 1 #>  #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -1952.613 #> Interval Score        : 165.55741 #> Mean Abs. Scaled Error:   0.77058 #> --- plot(fitted.data, plot.pkg = \"base\")   ##################################################################  # Univariate Normal case structure <- polynomial_block(mu = 1, D = 0.95) +   polynomial_block(V = 1, D = 0.95)  outcome <- Normal(mu = \"mu\", V = \"V\", data = cornWheat$corn.log.return[1:500]) fitted.data <- fit_model(structure, corn = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     corn: Normal #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 1277.54 #> Interval Score        : 0.07564 #> Mean Abs. Scaled Error: 0.76327 #> --- plot(fitted.data, plot.pkg = \"base\")   ##################################################################  # Bivariate Normal case structure <- (polynomial_block(mu = 1, D = 0.95) +   polynomial_block(V = 1, D = 0.95)) * 2 +   polynomial_block(rho = 1, D = 0.95)  outcome <- Normal(   mu = c(\"mu.1\", \"mu.2\"),   V = matrix(c(\"V.1\", \"rho\", \"rho\", \"V.2\"), 2, 2),   data = cornWheat[1:500, c(4, 5)] ) fitted.data <- fit_model(structure, cornWheat = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     cornWheat: Normal #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 2557.802 #> Interval Score        : 0.07505 #> Mean Abs. Scaled Error: 0.74750 #> --- plot(fitted.data, plot.pkg = \"base\")   ##################################################################  # Gamma case structure <- polynomial_block(mu = 1, D = 0.95)  Y <- (cornWheat$corn.log.return[1:500] - mean(cornWheat$corn.log.return[1:500]))**2 outcome <- Gamma(phi = 0.5, mu = \"mu\", data = Y) fitted.data <- fit_model(structure, corn = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     corn: Gamma #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 3508.409 #> Interval Score        : 0.00197 #> Mean Abs. Scaled Error: 0.93721 #> --- plot(fitted.data, plot.pkg = \"base\")   ################################################################## # \\donttest{ # Sensitivity analysis data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = \"D.level\") season <- harmonic_block(rate = \"sazo.effect\", order = 2, period = 12, D = \"D.sazo\")  outcome <- Poisson(lambda = \"rate\", data = data)  fit_model(level, season, outcome,   sazo.effect = c(0, 1),   D.level = c(seq.int(0.8, 1, l = 11)),   D.sazo = c(seq.int(0.95, 1, l = 11)),   condition = \"sazo.effect==1 | D.sazo==1\" ) #>  [                                                  ] - 0% - ETA - NA [                                                  ] - 0.76% - ETA - 0.19 minutes [=                                                 ] - 1.52% - ETA - 0.24 minutes [=                                                 ] - 2.27% - ETA - 0.21 minutes [==                                                ] - 3.03% - ETA - 0.21 minutes [==                                                ] - 3.79% - ETA - 0.2 minutes [==                                                ] - 4.55% - ETA - 0.19 minutes [===                                               ] - 5.3% - ETA - 0.18 minutes [===                                               ] - 6.06% - ETA - 0.18 minutes [===                                               ] - 6.82% - ETA - 0.18 minutes [====                                              ] - 7.58% - ETA - 0.17 minutes [====                                              ] - 8.33% - ETA - 0.17 minutes [=====                                             ] - 9.09% - ETA - 0.17 minutes [=====                                             ] - 9.85% - ETA - 0.17 minutes [=====                                             ] - 10.61% - ETA - 0.17 minutes [======                                            ] - 11.36% - ETA - 0.17 minutes [======                                            ] - 12.12% - ETA - 0.16 minutes [======                                            ] - 12.88% - ETA - 0.16 minutes [=======                                           ] - 13.64% - ETA - 0.16 minutes [=======                                           ] - 14.39% - ETA - 0.16 minutes [========                                          ] - 15.15% - ETA - 0.16 minutes [========                                          ] - 15.91% - ETA - 0.15 minutes [========                                          ] - 16.67% - ETA - 0.15 minutes [=========                                         ] - 17.42% - ETA - 0.15 minutes [=========                                         ] - 18.18% - ETA - 0.15 minutes [=========                                         ] - 18.94% - ETA - 0.15 minutes [==========                                        ] - 19.7% - ETA - 0.15 minutes [==========                                        ] - 20.45% - ETA - 0.15 minutes [===========                                       ] - 21.21% - ETA - 0.14 minutes [===========                                       ] - 21.97% - ETA - 0.14 minutes [===========                                       ] - 22.73% - ETA - 0.14 minutes [============                                      ] - 23.48% - ETA - 0.14 minutes [============                                      ] - 24.24% - ETA - 0.14 minutes [============                                      ] - 25% - ETA - 0.14 minutes [=============                                     ] - 25.76% - ETA - 0.14 minutes [=============                                     ] - 26.52% - ETA - 0.13 minutes [==============                                    ] - 27.27% - ETA - 0.13 minutes [==============                                    ] - 28.03% - ETA - 0.13 minutes [==============                                    ] - 28.79% - ETA - 0.13 minutes [===============                                   ] - 29.55% - ETA - 0.13 minutes [===============                                   ] - 30.3% - ETA - 0.13 minutes [================                                  ] - 31.06% - ETA - 0.12 minutes [================                                  ] - 31.82% - ETA - 0.12 minutes [================                                  ] - 32.58% - ETA - 0.12 minutes [=================                                 ] - 33.33% - ETA - 0.12 minutes [=================                                 ] - 34.09% - ETA - 0.12 minutes [=================                                 ] - 34.85% - ETA - 0.12 minutes [==================                                ] - 35.61% - ETA - 0.12 minutes [==================                                ] - 36.36% - ETA - 0.11 minutes [===================                               ] - 37.12% - ETA - 0.11 minutes [===================                               ] - 37.88% - ETA - 0.11 minutes [===================                               ] - 38.64% - ETA - 0.11 minutes [====================                              ] - 39.39% - ETA - 0.11 minutes [====================                              ] - 40.15% - ETA - 0.11 minutes [====================                              ] - 40.91% - ETA - 0.11 minutes [=====================                             ] - 41.67% - ETA - 0.11 minutes [=====================                             ] - 42.42% - ETA - 0.1 minutes [======================                            ] - 43.18% - ETA - 0.1 minutes [======================                            ] - 43.94% - ETA - 0.1 minutes [======================                            ] - 44.7% - ETA - 0.1 minutes [=======================                           ] - 45.45% - ETA - 0.1 minutes [=======================                           ] - 46.21% - ETA - 0.1 minutes [=======================                           ] - 46.97% - ETA - 0.1 minutes [========================                          ] - 47.73% - ETA - 0.09 minutes [========================                          ] - 48.48% - ETA - 0.09 minutes [=========================                         ] - 49.24% - ETA - 0.09 minutes [=========================                         ] - 50% - ETA - 0.09 minutes [=========================                         ] - 50.76% - ETA - 0.09 minutes [==========================                        ] - 51.52% - ETA - 0.09 minutes [==========================                        ] - 52.27% - ETA - 0.09 minutes [===========================                       ] - 53.03% - ETA - 0.08 minutes [===========================                       ] - 53.79% - ETA - 0.08 minutes [===========================                       ] - 54.55% - ETA - 0.08 minutes [============================                      ] - 55.3% - ETA - 0.08 minutes [============================                      ] - 56.06% - ETA - 0.08 minutes [============================                      ] - 56.82% - ETA - 0.08 minutes [=============================                     ] - 57.58% - ETA - 0.08 minutes [=============================                     ] - 58.33% - ETA - 0.07 minutes [==============================                    ] - 59.09% - ETA - 0.07 minutes [==============================                    ] - 59.85% - ETA - 0.07 minutes [==============================                    ] - 60.61% - ETA - 0.07 minutes [===============================                   ] - 61.36% - ETA - 0.07 minutes [===============================                   ] - 62.12% - ETA - 0.07 minutes [===============================                   ] - 62.88% - ETA - 0.07 minutes [================================                  ] - 63.64% - ETA - 0.06 minutes [================================                  ] - 64.39% - ETA - 0.06 minutes [=================================                 ] - 65.15% - ETA - 0.06 minutes [=================================                 ] - 65.91% - ETA - 0.06 minutes [=================================                 ] - 66.67% - ETA - 0.06 minutes [==================================                ] - 67.42% - ETA - 0.06 minutes [==================================                ] - 68.18% - ETA - 0.06 minutes [==================================                ] - 68.94% - ETA - 0.06 minutes [===================================               ] - 69.7% - ETA - 0.05 minutes [===================================               ] - 70.45% - ETA - 0.05 minutes [====================================              ] - 71.21% - ETA - 0.05 minutes [====================================              ] - 71.97% - ETA - 0.05 minutes [====================================              ] - 72.73% - ETA - 0.05 minutes [=====================================             ] - 73.48% - ETA - 0.05 minutes [=====================================             ] - 74.24% - ETA - 0.05 minutes [======================================            ] - 75% - ETA - 0.04 minutes [======================================            ] - 75.76% - ETA - 0.04 minutes [======================================            ] - 76.52% - ETA - 0.04 minutes [=======================================           ] - 77.27% - ETA - 0.04 minutes [=======================================           ] - 78.03% - ETA - 0.04 minutes [=======================================           ] - 78.79% - ETA - 0.04 minutes [========================================          ] - 79.55% - ETA - 0.04 minutes [========================================          ] - 80.3% - ETA - 0.04 minutes [=========================================         ] - 81.06% - ETA - 0.03 minutes [=========================================         ] - 81.82% - ETA - 0.03 minutes [=========================================         ] - 82.58% - ETA - 0.03 minutes [==========================================        ] - 83.33% - ETA - 0.03 minutes [==========================================        ] - 84.09% - ETA - 0.03 minutes [==========================================        ] - 84.85% - ETA - 0.03 minutes [===========================================       ] - 85.61% - ETA - 0.03 minutes [===========================================       ] - 86.36% - ETA - 0.02 minutes [============================================      ] - 87.12% - ETA - 0.02 minutes [============================================      ] - 87.88% - ETA - 0.02 minutes [============================================      ] - 88.64% - ETA - 0.02 minutes [=============================================     ] - 89.39% - ETA - 0.02 minutes [=============================================     ] - 90.15% - ETA - 0.02 minutes [=============================================     ] - 90.91% - ETA - 0.02 minutes [==============================================    ] - 91.67% - ETA - 0.01 minutes [==============================================    ] - 92.42% - ETA - 0.01 minutes [===============================================   ] - 93.18% - ETA - 0.01 minutes [===============================================   ] - 93.94% - ETA - 0.01 minutes [===============================================   ] - 94.7% - ETA - 0.01 minutes [================================================  ] - 95.45% - ETA - 0.01 minutes [================================================  ] - 96.21% - ETA - 0.01 minutes [================================================  ] - 96.97% - ETA - 0.01 minutes [================================================= ] - 97.73% - ETA - 0 minutes [================================================= ] - 98.48% - ETA - 0 minutes [==================================================] - 99.24% - ETA - 0 minutes #>     sazo.effect D.level D.sazo  log.like      mase interval.score #> 240           1    0.98  1.000 -565.4798 0.4109207       104.9385 #> 218           1    0.98  0.995 -565.6162 0.4098146       104.2846 #> 196           1    0.98  0.990 -566.1562 0.4114235       105.2615 #> 174           1    0.98  0.985 -567.0578 0.4145855       106.3615 #> 152           1    0.98  0.980 -568.2681 0.4187701       107.8692 #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     Series.1: Poisson #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -565.4798 #> Interval Score        : 104.93846 #> Mean Abs. Scaled Error:   0.41092 #> --- # }"},{"path":"/reference/fit_model_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting one kDGLM models ‚Äî fit_model_single","title":"Fitting one kDGLM models ‚Äî fit_model_single","text":"Fits one model given structure observed data. function can used supported family (see vignette).","code":""},{"path":"/reference/fit_model_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting one kDGLM models ‚Äî fit_model_single","text":"","code":"fit_model_single(structure, outcomes, smooth = TRUE, p.monit = NA)"},{"path":"/reference/fit_model_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting one kDGLM models ‚Äî fit_model_single","text":"structure dlm_block: structural blocks model. block must completely defined. outcomes dlm_distr list dlm_distr objects: model outcomes. smooth boolean: flag indicating smoothed distribution latent states calculated. p.monit numeric (optional): prior probability changes latent space variables part dynamic.","code":""},{"path":"/reference/fit_model_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting one kDGLM models ‚Äî fit_model_single","text":"fitted_dlm object.","code":""},{"path":"/reference/forecast.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for forecasting ‚Äî forecast.fitted_dlm","title":"Auxiliary function for forecasting ‚Äî forecast.fitted_dlm","text":"Auxiliary function forecasting","code":""},{"path":"/reference/forecast.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for forecasting ‚Äî forecast.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' forecast(   object,   t = 1,   plot = ifelse(requireNamespace(\"plotly\", quietly = TRUE), \"plotly\",     ifelse(requireNamespace(\"ggplot2\", quietly = TRUE), \"ggplot2\", \"base\")),   pred.cred = 0.95,   ... )"},{"path":"/reference/forecast.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for forecasting ‚Äî forecast.fitted_dlm","text":"object fitted_dlm object: fitted model use predictions. t numeric: Time window prediction. plot boolean character: flag indicating plot produced. one FALSE, TRUE, 'base', 'ggplot2' 'plotly'. pred.cred numeric: credibility level C... ... Extra variables necessary prediction (covariates, etc.).","code":""},{"path":"/reference/forecast.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for forecasting ‚Äî forecast.fitted_dlm","text":"list containing: data data.frame: data frame contain mean, variance credibility intervals outcomes, including observed data predictions future observations. forecast data.frame: data, restricted predictions future observations. outcomes list: named list containing predictions outcome. element list list containing predictions (mean, variance credibility intervals), distribution linear predictor parameter observational model parameters predictive distribution (available). theta.mean matrix: matrix values latent states time. Dimensions n x t, n number latent states theta.cov array: 3D-array covariance latent states time. Dimensions n x n x t, n number latent predictors. lambda.mean matrix: matrix values linear predictors time. Dimensions k x t, k number linear predictors lambda.cov array: 3D-array covariance linear predictors time. Dimensions k x k x t, k number linear predictors. plot (chosen): plotly ggplot object. list containing: data data.frame: table model evaluated observed time, plus forecasted period. forecast data.frame: table model evaluated forecasted period. outcomes list: list containing parameters predictive distribution outcome forecasted period. theta.mean matrix: mean latent states forecasted time. Dimensions n x t.forecast, t.forecast size forecast windows n number latent states. theta.cov array: 3D-array containing covariance matrix latent states  forecasted time. Dimensions n x n x t.forecast, t.forecast size forecast windows n number latent states. lambda.mean matrix: mean linear predictor forecasted time. Dimensions k x t.forecast, t.forecast size forecast windows k number linear predictors. lambda.cov array: 3D-array containing covariance matrix linear predictor forecasted time. Dimensions k x k x t.forecast, t.forecast size forecast windows k number linear predictors.","code":""},{"path":"/reference/forecast.fitted_dlm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auxiliary function for forecasting ‚Äî forecast.fitted_dlm","text":"covariate necessary forecasting, passed named argument. name must follow structure: <block name>.Covariate<.index>. one covariate associated block index omitted. pulse necessary forecasting, passed named argument. name must follow structure: <block name>.Pulse<.index>. one pulse associated block index omitted. user may pass observed values prediction windows (optional). See example. special case, model Multinomial outcome, user may pass N parameter instead observations. offset necessary forecasting, passed syntax observed data. See example.","code":""},{"path":[]},{"path":"/reference/forecast.fitted_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auxiliary function for forecasting ‚Äî forecast.fitted_dlm","text":"","code":"structure <-   polynomial_block(p = 1, order = 2, D = 0.95) +   harmonic_block(p = 1, period = 12, D = 0.975) +   noise_block(p = 1, R1 = 0.1) +   regression_block(     p = chickenPox$date >= as.Date(\"2013-09-1\"),     # Vaccine was introduced in September of 2013     name = \"Vaccine\"   )  outcome <- Multinom(p = c(\"p.1\", \"p.2\"), data = chickenPox[, c(2, 3, 5)]) fitted.data <- fit_model(structure * 2,   chickenPox = outcome )  forecast(fitted.data, 24,   chickenPox = list(Total = rep(175, 24)), # Optional   Vaccine.1.Covariate = rep(TRUE, 24),   Vaccine.2.Covariate = rep(TRUE, 24) ) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> $data #>     Time                   Serie Observation Prediction   Variance C.I.lower #> 1      1     chickenPox.< 5 year         218  213.58336  1970.0224       127 #> 2      2     chickenPox.< 5 year         215  213.08166  1826.3294       129 #> 3      3     chickenPox.< 5 year         256  248.92116  2230.5153       156 #> 4      4     chickenPox.< 5 year         271  262.87385  2058.2753       172 #> 5      5     chickenPox.< 5 year         348  333.57497  2708.1150       228 #> 6      6     chickenPox.< 5 year         333  320.15775  2177.4260       225 #> 7      7     chickenPox.< 5 year         397  385.62449  2918.9654       275 #> 8      8     chickenPox.< 5 year         459  478.25619  4110.7692       346 #> 9      9     chickenPox.< 5 year         811  769.97956  8030.5584       583 #> 10    10     chickenPox.< 5 year         932  889.36173 10562.4534       675 #> 11    11     chickenPox.< 5 year         730  694.17741  7446.8652       516 #> 12    12     chickenPox.< 5 year         460  453.79876  4141.3474       324 #> 13    13     chickenPox.< 5 year         214  227.84081  1349.9293       155 #> 14    14     chickenPox.< 5 year         133  148.90345   670.2821        98 #> 15    15     chickenPox.< 5 year         162  155.79359   724.2655       103 #> 16    16     chickenPox.< 5 year         227  196.43298  1054.3681       133 #> 17    17     chickenPox.< 5 year         231  212.43181  1125.4755       146 #> 18    18     chickenPox.< 5 year         179  196.43252   863.3400       138 #> 19    19     chickenPox.< 5 year         256  262.10029  1264.7064       191 #> 20    20     chickenPox.< 5 year         343  332.63869  1693.4840       249 #> 21    21     chickenPox.< 5 year         403  427.57466  2512.0559       325 #> 22    22     chickenPox.< 5 year         544  514.78942  3454.2190       394 #> 23    23     chickenPox.< 5 year         518  482.05868  3224.7552       366 #> 24    24     chickenPox.< 5 year         446  422.45053  2826.6894       315 #> 25    25     chickenPox.< 5 year         248  253.12430  1234.4500       183 #> 26    26     chickenPox.< 5 year         126  134.75607   434.3968        94 #> 27    27     chickenPox.< 5 year         113  143.53711   524.4366        99 #> 28    28     chickenPox.< 5 year         152  140.86369   490.6935        98 #> 29    29     chickenPox.< 5 year         157  154.50156   525.3190       109 #> 30    30     chickenPox.< 5 year         181  177.78759   571.2457       130 #> 31    31     chickenPox.< 5 year         222  226.91655   735.3450       172 #> 32    32     chickenPox.< 5 year         292  284.88427   946.1142       222 #> 33    33     chickenPox.< 5 year         521  489.48026  2425.7620       389 #> 34    34     chickenPox.< 5 year         587  574.50167  3318.6183       457 #> 35    35     chickenPox.< 5 year         495  456.24162  2311.7290       358 #> 36    36     chickenPox.< 5 year         363  323.04310  1382.0081       248 #> 37    37     chickenPox.< 5 year         157  185.44184   580.5863       137 #> 38    38     chickenPox.< 5 year         102  118.11201   294.5789        84 #> 39    39     chickenPox.< 5 year         132  136.94759   412.6463        97 #> 40    40     chickenPox.< 5 year         155  144.29627   449.6885       103 #> 41    41     chickenPox.< 5 year         217  211.47770   852.7351       154 #> 42    42     chickenPox.< 5 year         364  326.65769  1709.7904       245 #> 43    43     chickenPox.< 5 year         333  321.96834  1459.9463       246 #> 44    44     chickenPox.< 5 year         308  318.37241  1329.8531       245 #> 45    45     chickenPox.< 5 year         535  534.98008  2980.6070       423 #> 46    46     chickenPox.< 5 year         705  683.24551  4778.4721       542 #> 47    47     chickenPox.< 5 year         623  570.26250  3575.8874       449 #> 48    48     chickenPox.< 5 year         542  465.57851  2736.3861       360 #> 49    49     chickenPox.< 5 year         295  277.52804  1216.1768       208 #> 50    50     chickenPox.< 5 year         108  124.96477   321.2862        90 #> 51    51     chickenPox.< 5 year          85  108.54534   278.8636        76 #> 52    52     chickenPox.< 5 year         122  125.04087   368.6349        88 #> 53    53     chickenPox.< 5 year         145  159.28629   545.7949       114 #> 54    54     chickenPox.< 5 year         208  187.57580   657.4364       137 #> 55    55     chickenPox.< 5 year         191  202.02059   680.1540       150 #> 56    56     chickenPox.< 5 year         191  195.93931   597.7855       147 #> 57    57     chickenPox.< 5 year         289  291.02267  1213.6264       221 #> 58    58     chickenPox.< 5 year         374  358.47281  1846.4432       273 #> 59    59     chickenPox.< 5 year         305  285.28703  1277.6387       214 #> 60    60     chickenPox.< 5 year         297  262.95845  1206.1113       194 #> 61    61     chickenPox.< 5 year         156  156.87922   517.1706       112 #> 62    62     chickenPox.< 5 year          64   77.43775   159.3300        53 #> 63    63     chickenPox.< 5 year          97   98.33762   257.1332        67 #> 64    64     chickenPox.< 5 year         119   98.02634   255.3345        67 #> 65    65     chickenPox.< 5 year          96  101.10096   268.8404        70 #> 66    66     chickenPox.< 5 year         108  113.88600   318.7548        79 #> 67    67     chickenPox.< 5 year         127  141.19799   446.6542       100 #> 68    68     chickenPox.< 5 year         143  146.91046   459.8712       105 #> 69    69     chickenPox.< 5 year         191  184.75125   698.0615       133 #> 70    70     chickenPox.< 5 year         195  191.66894   770.6620       137 #> 71    71     chickenPox.< 5 year         153  146.94228   494.2250       104 #> 72    72     chickenPox.< 5 year         134  128.31627   409.6046        89 #> 73    73     chickenPox.< 5 year          79   92.57443   242.7741        63 #> 74    74     chickenPox.< 5 year          76   72.26792   162.2861        48 #> 75    75     chickenPox.< 5 year          88   81.43944   203.9909        54 #> 76    76     chickenPox.< 5 year          76   79.88421   195.5635        53 #> 77    77     chickenPox.< 5 year          84   91.69628   239.5374        62 #> 78    78     chickenPox.< 5 year          94   89.70525   217.3170        61 #> 79    79     chickenPox.< 5 year         126  124.00926   375.4526        87 #> 80    80     chickenPox.< 5 year         135  134.15747   432.9562        94 #> 81    81     chickenPox.< 5 year         152  148.87920   536.6530       104 #> 82    82     chickenPox.< 5 year         193  192.49156   903.0650       135 #> 83    83     chickenPox.< 5 year         151  146.47017   562.1278       101 #> 84    84     chickenPox.< 5 year         146  133.51518   487.5810        91 #> 85    85     chickenPox.< 5 year         105  108.33834   341.0566        73 #> 86    86     chickenPox.< 5 year          72   77.06402   187.9047        51 #> 87    87     chickenPox.< 5 year          90   94.09285   265.7415        63 #> 88    88     chickenPox.< 5 year          77   73.92722   169.1858        49 #> 89    89     chickenPox.< 5 year          90   86.80048   218.2579        59 #> 90    90     chickenPox.< 5 year          87   94.51491   246.3712        65 #> 91    91     chickenPox.< 5 year         110  106.02820   297.5535        73 #> 92    92     chickenPox.< 5 year         134  129.65846   436.4795        90 #> 93    93     chickenPox.< 5 year         132  133.79274   481.6768        92 #> 94    94     chickenPox.< 5 year         151  149.27467   616.5594       102 #> 95    95     chickenPox.< 5 year         138  127.81807   477.3924        86 #> 96    96     chickenPox.< 5 year         104  103.70684   331.9335        69 #> 97    97     chickenPox.< 5 year          67   91.03763   263.6324        60 #> 98    98     chickenPox.< 5 year          58   64.29270   140.5495        42 #> 99    99     chickenPox.< 5 year          94   85.36832   219.0392        57 #> 100  100     chickenPox.< 5 year          79   72.95833   160.3592        49 #> 101  101     chickenPox.< 5 year          93   93.88886   239.7493        64 #> 102  102     chickenPox.< 5 year          84   76.40348   162.0571        52 #> 103  103     chickenPox.< 5 year          96  100.03248   260.1230        69 #> 104  104     chickenPox.< 5 year          82   83.73816   194.3599        57 #> 105  105     chickenPox.< 5 year          80   88.56045   222.3970        60 #> 106  106     chickenPox.< 5 year          92   90.81995   242.2150        61 #> 107  107     chickenPox.< 5 year          77   80.35493   199.4477        54 #> 108  108     chickenPox.< 5 year          79   81.13588   202.1706        54 #> 109  109     chickenPox.< 5 year          73   72.87132   163.6432        49 #> 110  110     chickenPox.< 5 year          54   64.19351   127.1832        43 #> 111  111     chickenPox.< 5 year         133  101.96153   266.8406        71 #> 112  112     chickenPox.< 5 year         162  104.46116   276.8494        73 #> 113  113     chickenPox.< 5 year         102   86.42489   207.4812        59 #> 114  114     chickenPox.< 5 year          70   75.20901   169.4770        50 #> 115  115     chickenPox.< 5 year          79   80.53083   202.3640        54 #> 116  116     chickenPox.< 5 year          59   74.58019   193.4642        48 #> 117  117     chickenPox.< 5 year          49   67.78072   178.1302        43 #> 118  118     chickenPox.< 5 year          63   63.84081   171.8494        39 #> 119  119     chickenPox.< 5 year          63   66.32271   195.3912        40 #> 120  120     chickenPox.< 5 year          48   51.15106   132.2350        30 #> 121    1 chickenPox.5 to 9 years          64   65.59179  1970.0224        16 #> 122    2 chickenPox.5 to 9 years          43   53.88936  1826.3294        11 #> 123    3 chickenPox.5 to 9 years          60   61.31019  2230.5153        13 #> 124    4 chickenPox.5 to 9 years          47   55.70363  2058.2753        11 #> 125    5 chickenPox.5 to 9 years          66   69.43924  2708.1150        16 #>     C.I.upper type #> 1         299  Fit #> 2         295  Fit #> 3         339  Fit #> 4         348  Fit #> 5         430  Fit #> 6         406  Fit #> 7         484  Fit #> 8         595  Fit #> 9         931  Fit #> 10       1075  Fit #> 11        852  Fit #> 12        574  Fit #> 13        298  Fit #> 14        199  Fit #> 15        208  Fit #> 16        259  Fit #> 17        277  Fit #> 18        252  Fit #> 19        329  Fit #> 20        409  Fit #> 21        520  Fit #> 22        623  Fit #> 23        588  Fit #> 24        522  Fit #> 25        320  Fit #> 26        175  Fit #> 27        188  Fit #> 28        184  Fit #> 29        199  Fit #> 30        223  Fit #> 31        278  Fit #> 32        342  Fit #> 33        581  Fit #> 34        681  Fit #> 35        546  Fit #> 36        393  Fit #> 37        231  Fit #> 38        151  Fit #> 39        177  Fit #> 40        186  Fit #> 41        268  Fit #> 42        406  Fit #> 43        395  Fit #> 44        387  Fit #> 45        636  Fit #> 46        812  Fit #> 47        682  Fit #> 48        564  Fit #> 49        344  Fit #> 50        160  Fit #> 51        141  Fit #> 52        163  Fit #> 53        205  Fit #> 54        237  Fit #> 55        252  Fit #> 56        243  Fit #> 57        357  Fit #> 58        440  Fit #> 59        354  Fit #> 60        330  Fit #> 61        201  Fit #> 62        102  Fit #> 63        130  Fit #> 64        130  Fit #> 65        134  Fit #> 66        149  Fit #> 67        183  Fit #> 68        189  Fit #> 69        236  Fit #> 70        246  Fit #> 71        190  Fit #> 72        168  Fit #> 73        123  Fit #> 74         98  Fit #> 75        110  Fit #> 76        108  Fit #> 77        123  Fit #> 78        119  Fit #> 79        162  Fit #> 80        175  Fit #> 81        195  Fit #> 82        252  Fit #> 83        193  Fit #> 84        177  Fit #> 85        145  Fit #> 86        105  Fit #> 87        127  Fit #> 88        100  Fit #> 89        116  Fit #> 90        126  Fit #> 91        140  Fit #> 92        171  Fit #> 93        178  Fit #> 94        199  Fit #> 95        172  Fit #> 96        140  Fit #> 97        124  Fit #> 98         88  Fit #> 99        115  Fit #> 100        98  Fit #> 101       125  Fit #> 102       102  Fit #> 103       132  Fit #> 104       112  Fit #> 105       118  Fit #> 106       122  Fit #> 107       109  Fit #> 108       110  Fit #> 109        99  Fit #> 110        87  Fit #> 111       135  Fit #> 112       138  Fit #> 113       115  Fit #> 114       101  Fit #> 115       109  Fit #> 116       103  Fit #> 117        95  Fit #> 118        91  Fit #> 119        95  Fit #> 120        75  Fit #> 121       141  Fit #> 122       122  Fit #> 123       136  Fit #> 124       126  Fit #> 125       152  Fit #>  [ reached 'max' / getOption(\"max.print\") -- omitted 307 rows ] #>  #> $forecast #>    Time                     Serie Observation Variance Prediction C.I.lower #> 1   121       chickenPox.< 5 year          NA 135.5736   49.71787        28 #> 2   122       chickenPox.< 5 year          NA 135.5736   48.69890        27 #> 3   123       chickenPox.< 5 year          NA 135.5736   48.20482        26 #> 4   124       chickenPox.< 5 year          NA 135.5736   48.26928        26 #> 5   125       chickenPox.< 5 year          NA 135.5736   48.74705        26 #> 6   126       chickenPox.< 5 year          NA 135.5736   49.30286        25 #> 7   127       chickenPox.< 5 year          NA 135.5736   49.51656        25 #> 8   128       chickenPox.< 5 year          NA 135.5736   49.07372        23 #> 9   129       chickenPox.< 5 year          NA 135.5736   47.93041        22 #> 10  130       chickenPox.< 5 year          NA 135.5736   46.30816        20 #> 11  131       chickenPox.< 5 year          NA 135.5736   44.51784        18 #> 12  132       chickenPox.< 5 year          NA 135.5736   42.80074        17 #> 13  133       chickenPox.< 5 year          NA 135.5736   41.32312        15 #> 14  134       chickenPox.< 5 year          NA 135.5736   40.24110        14 #> 15  135       chickenPox.< 5 year          NA 135.5736   39.69342        14 #> 16  136       chickenPox.< 5 year          NA 135.5736   39.72013        13 #> 17  137       chickenPox.< 5 year          NA 135.5736   40.19498        13 #> 18  138       chickenPox.< 5 year          NA 135.5736   40.82722        12 #> 19  139       chickenPox.< 5 year          NA 135.5736   41.24545        12 #> 20  140       chickenPox.< 5 year          NA 135.5736   41.14590        11 #> 21  141       chickenPox.< 5 year          NA 135.5736   40.42889        10 #> 22  142       chickenPox.< 5 year          NA 135.5736   39.21549         9 #> 23  143       chickenPox.< 5 year          NA 135.5736   37.73478         8 #> 24  144       chickenPox.< 5 year          NA 135.5736   36.21121         7 #> 25  121   chickenPox.5 to 9 years          NA 135.5736   21.65348         8 #> 26  122   chickenPox.5 to 9 years          NA 135.5736   18.60570         5 #> 27  123   chickenPox.5 to 9 years          NA 135.5736   16.39643         4 #> 28  124   chickenPox.5 to 9 years          NA 135.5736   15.30112         3 #> 29  125   chickenPox.5 to 9 years          NA 135.5736   15.34896         3 #> 30  126   chickenPox.5 to 9 years          NA 135.5736   16.46339         3 #> 31  127   chickenPox.5 to 9 years          NA 135.5736   18.45239         4 #> 32  128   chickenPox.5 to 9 years          NA 135.5736   20.88650         5 #> 33  129   chickenPox.5 to 9 years          NA 135.5736   23.03546         6 #> 34  130   chickenPox.5 to 9 years          NA 135.5736   24.07000         6 #> 35  131   chickenPox.5 to 9 years          NA 135.5736   23.50624         5 #> 36  132   chickenPox.5 to 9 years          NA 135.5736   21.53524         4 #> 37  133   chickenPox.5 to 9 years          NA 135.5736   18.90456         3 #> 38  134   chickenPox.5 to 9 years          NA 135.5736   16.45364         2 #> 39  135   chickenPox.5 to 9 years          NA 135.5736   14.73308         1 #> 40  136   chickenPox.5 to 9 years          NA 135.5736   13.95315         1 #> 41  137   chickenPox.5 to 9 years          NA 135.5736   14.12701         1 #> 42  138   chickenPox.5 to 9 years          NA 135.5736   15.18255         1 #> 43  139   chickenPox.5 to 9 years          NA 135.5736   16.94978         1 #> 44  140   chickenPox.5 to 9 years          NA 135.5736   19.06053         1 #> 45  141   chickenPox.5 to 9 years          NA 135.5736   20.90129         2 #> 46  142   chickenPox.5 to 9 years          NA 135.5736   21.78778         2 #> 47  143   chickenPox.5 to 9 years          NA 135.5736   21.33572         1 #> 48  144   chickenPox.5 to 9 years          NA 135.5736   19.72452         1 #> 49  121 chickenPox.15 to 49 years          NA 135.5736   96.62864        72 #> 50  122 chickenPox.15 to 49 years          NA 135.5736  100.69540        75 #> 51  123 chickenPox.15 to 49 years          NA 135.5736  103.39875        77 #> 52  124 chickenPox.15 to 49 years          NA 135.5736  104.42960        78 #> 53  125 chickenPox.15 to 49 years          NA 135.5736  103.90399        76 #> 54  126 chickenPox.15 to 49 years          NA 135.5736  102.23375        73 #> 55  127 chickenPox.15 to 49 years          NA 135.5736  100.03105        70 #> 56  128 chickenPox.15 to 49 years          NA 135.5736   98.03978        67 #> 57  129 chickenPox.15 to 49 years          NA 135.5736   97.03413        65 #> 58  130 chickenPox.15 to 49 years          NA 135.5736   97.62184        64 #> 59  131 chickenPox.15 to 49 years          NA 135.5736   99.97592        66 #> 60  132 chickenPox.15 to 49 years          NA 135.5736  103.66402        69 #> 61  133 chickenPox.15 to 49 years          NA 135.5736  107.77232        73 #> 62  134 chickenPox.15 to 49 years          NA 135.5736  111.30526        76 #> 63  135 chickenPox.15 to 49 years          NA 135.5736  113.57350        78 #> 64  136 chickenPox.15 to 49 years          NA 135.5736  114.32672        78 #> 65  137 chickenPox.15 to 49 years          NA 135.5736  113.67801        76 #> 66  138 chickenPox.15 to 49 years          NA 135.5736  111.99023        72 #> 67  139 chickenPox.15 to 49 years          NA 135.5736  109.80477        68 #> 68  140 chickenPox.15 to 49 years          NA 135.5736  107.79357        65 #> 69  141 chickenPox.15 to 49 years          NA 135.5736  106.66982        62 #> 70  142 chickenPox.15 to 49 years          NA 135.5736  106.99673        61 #> 71  143 chickenPox.15 to 49 years          NA 135.5736  108.92951        62 #> 72  144 chickenPox.15 to 49 years          NA 135.5736  112.06428        65 #>    C.I.upper #> 1         74 #> 2         73 #> 3         73 #> 4         74 #> 5         75 #> 6         77 #> 7         78 #> 8         79 #> 9         79 #> 10        78 #> 11        77 #> 12        76 #> 13        74 #> 14        74 #> 15        74 #> 16        75 #> 17        76 #> 18        79 #> 19        81 #> 20        82 #> 21        83 #> 22        83 #> 23        82 #> 24        80 #> 25        41 #> 26        37 #> 27        35 #> 28        34 #> 29        34 #> 30        37 #> 31        40 #> 32        45 #> 33        49 #> 34        51 #> 35        51 #> 36        49 #> 37        46 #> 38        42 #> 39        40 #> 40        40 #> 41        41 #> 42        44 #> 43        48 #> 44        53 #> 45        57 #> 46        60 #> 47        60 #> 48        58 #> 49       121 #> 50       125 #> 51       128 #> 52       129 #> 53       130 #> 54       129 #> 55       128 #> 56       127 #> 57       127 #> 58       129 #> 59       132 #> 60       135 #> 61       139 #> 62       142 #> 63       144 #> 64       145 #> 65       146 #> 66       146 #> 67       145 #> 68       145 #> 69       145 #> 70       146 #> 71       148 #> 72       150 #>  #> $outcomes #> $outcomes$chickenPox #> $outcomes$chickenPox$conj.param #>       alpha_1  alpha_2   alpha_3 #> 121 16.905993 7.363019 32.857462 #> 122 15.633856 5.973007 32.326348 #> 123 14.538583 4.945167 31.185083 #> 124 13.558861 4.298091 29.334317 #> 125 12.629936 3.976782 26.920622 #> 126 11.687022 3.902573 24.234050 #> 127 10.690872 3.983962 21.597200 #> 128  9.659035 4.111028 19.296883 #> 129  8.662543 4.163236 17.537140 #> 130  7.781518 4.044669 16.404155 #> 131  7.061989 3.728861 15.859457 #> 132  6.503896 3.272443 15.752533 #> 133  6.072196 2.777916 15.836524 #> 134  5.717802 2.337875 15.815208 #> 135  5.399034 2.003969 15.448081 #> 136  5.090677 1.788287 14.652534 #> 137  4.777907 1.679252 13.512707 #> 138  4.449060 1.654486 12.203897 #> 139  4.099407 1.684648 10.913553 #> 140  3.740901 1.732945  9.800373 #> 141  3.402080 1.758838  8.976237 #> 142  3.113179 1.729655  8.494092 #> 143  2.890148 1.634126  8.343031 #> 144  2.729502 1.486780  8.447100 #>  #> $outcomes$chickenPox$ft #>           [,1]       [,2]       [,3]       [,4]       [,5]       [,6] #> [1,] -0.679083 -0.7432195 -0.7818002 -0.7919054 -0.7782452 -0.7518979 #> [2,] -1.549856 -1.7591244 -1.9299130 -2.0242632 -2.0246982 -1.9389059 #>            [,7]       [,8]       [,9]      [,10]      [,11]      [,12] #> [1,] -0.7273409 -0.7185724 -0.7353596 -0.7806223 -0.8496504 -0.9313656 #> [2,] -1.7976785 -1.6466622 -1.5341261 -1.4980284 -1.5558459 -1.6998908 #>          [,13]     [,14]     [,15]     [,16]     [,17]     [,18]     [,19] #> [1,] -1.011290 -1.075427 -1.114008 -1.124113 -1.110453 -1.084105 -1.059548 #> [2,] -1.899371 -2.108639 -2.279428 -2.373778 -2.374213 -2.288421 -2.147194 #>          [,20]     [,21]     [,22]     [,23]     [,24] #> [1,] -1.050780 -1.067567 -1.112830 -1.181858 -1.263573 #> [2,] -1.996177 -1.883641 -1.847543 -1.905361 -2.049406 #>  #> $outcomes$chickenPox$Qt #> , , 1 #>  #>             [,1]        [,2] #> [1,] 0.111031031 0.002952275 #> [2,] 0.002952275 0.114880251 #>  #> , , 2 #>  #>             [,1]        [,2] #> [1,] 0.123672883 0.003275323 #> [2,] 0.003275323 0.130104017 #>  #> , , 3 #>  #>             [,1]        [,2] #> [1,] 0.136830380 0.003541592 #> [2,] 0.003541592 0.145910042 #>  #> , , 4 #>  #>             [,1]        [,2] #> [1,] 0.149593768 0.003738337 #> [2,] 0.003738337 0.161078684 #>  #> , , 5 #>  #>             [,1]        [,2] #> [1,] 0.161467867 0.003876132 #> [2,] 0.003876132 0.174921870 #>  #> , , 6 #>  #>             [,1]        [,2] #> [1,] 0.172493799 0.003984471 #> [2,] 0.003984471 0.187492253 #>  #> , , 7 #>  #>             [,1]        [,2] #> [1,] 0.183192092 0.004103871 #> [2,] 0.004103871 0.199515810 #>  #> , , 8 #>  #>             [,1]        [,2] #> [1,] 0.194434525 0.004277022 #> [2,] 0.004277022 0.212174787 #>  #> , , 9 #>  #>             [,1]        [,2] #> [1,] 0.207308809 0.004539212 #> [2,] 0.004539212 0.226871186 #>  #> , , 10 #>  #>             [,1]        [,2] #> [1,] 0.222942264 0.004908079 #> [2,] 0.004908079 0.244987991 #>  #> , , 11 #>  #>             [,1]        [,2] #> [1,] 0.242227680 0.005375258 #> [2,] 0.005375258 0.267588593 #>  #> , , 12 #>  #>             [,1]        [,2] #> [1,] 0.265491167 0.005904707 #> [2,] 0.005904707 0.295057987 #>  #> , , 13 #>  #>             [,1]        [,2] #> [1,] 0.292266282 0.006441238 #> [2,] 0.006441238 0.326834106 #>  #> , , 14 #>  #>             [,1]        [,2] #> [1,] 0.321351876 0.006927658 #> [2,] 0.006927658 0.361440228 #>  #> , , 15 #>  #>             [,1]        [,2] #> [1,] 0.351188944 0.007323712 #> [2,] 0.007323712 0.396907427 #>  #> , , 16 #>  #>             [,1]        [,2] #> [1,] 0.380397001 0.007618777 #> [2,] 0.007618777 0.431442027 #>  #> , , 17 #>  #>             [,1]        [,2] #> [1,] 0.408221257 0.007833981 #> [2,] 0.007833981 0.464034915 #>  #> , , 18 #>  #>             [,1]        [,2] #> [1,] 0.434723899 0.008014972 #> [2,] 0.008014972 0.494756726 #>  #> , , 19 #>  #>             [,1]        [,2] #> [1,] 0.460721555 0.008219696 #> [2,] 0.008219696 0.524685622 #>  #> , , 20 #>  #>             [,1]        [,2] #> [1,] 0.487577799 0.008504881 #> [2,] 0.008504881 0.555595865 #>  #> , , 21 #>  #>            [,1]       [,2] #> [1,] 0.51693605 0.00891269 #> [2,] 0.00891269 0.58956268 #>  #> , , 22 #>  #>            [,1]       [,2] #> [1,] 0.55039436 0.00945864 #> [2,] 0.00945864 0.62854309 #>  #> , , 23 #>  #>            [,1]       [,2] #> [1,] 0.58910514 0.01012381 #> [2,] 0.01012381 0.67392152 #>  #> , , 24 #>  #>            [,1]       [,2] #> [1,] 0.63337341 0.01085602 #> [2,] 0.01085602 0.72606499 #>  #>  #> $outcomes$chickenPox$data #>       [,1] [,2] [,3] #>  [1,]   48   26   94 #>  [2,]   48   26   94 #>  [3,]   48   26   94 #>  [4,]   48   26   94 #>  [5,]   48   26   94 #>  [6,]   48   26   94 #>  [7,]   48   26   94 #>  [8,]   48   26   94 #>  [9,]   48   26   94 #> [10,]   48   26   94 #> [11,]   48   26   94 #> [12,]   48   26   94 #> [13,]   48   26   94 #> [14,]   48   26   94 #> [15,]   48   26   94 #> [16,]   48   26   94 #> [17,]   48   26   94 #> [18,]   48   26   94 #> [19,]   48   26   94 #> [20,]   48   26   94 #> [21,]   48   26   94 #> [22,]   48   26   94 #> [23,]   48   26   94 #> [24,]   48   26   94 #>  #> $outcomes$chickenPox$offset #>       [,1] [,2] [,3] #>  [1,]    1    1    1 #>  [2,]    1    1    1 #>  [3,]    1    1    1 #>  [4,]    1    1    1 #>  [5,]    1    1    1 #>  [6,]    1    1    1 #>  [7,]    1    1    1 #>  [8,]    1    1    1 #>  [9,]    1    1    1 #> [10,]    1    1    1 #> [11,]    1    1    1 #> [12,]    1    1    1 #> [13,]    1    1    1 #> [14,]    1    1    1 #> [15,]    1    1    1 #> [16,]    1    1    1 #> [17,]    1    1    1 #> [18,]    1    1    1 #> [19,]    1    1    1 #> [20,]    1    1    1 #> [21,]    1    1    1 #> [22,]    1    1    1 #> [23,]    1    1    1 #> [24,]    1    1    1 #>  #> $outcomes$chickenPox$pred #>          [,1]     [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #> [1,] 49.71787  48.6989  48.20482  48.26928  48.74705  49.30286  49.51656 #> [2,] 21.65348  18.6057  16.39643  15.30112  15.34896  16.46339  18.45239 #> [3,] 96.62864 100.6954 103.39875 104.42960 103.90399 102.23375 100.03105 #>          [,8]     [,9]    [,10]    [,11]     [,12]     [,13]     [,14] #> [1,] 49.07372 47.93041 46.30816 44.51784  42.80074  41.32312  40.24110 #> [2,] 20.88650 23.03546 24.07000 23.50624  21.53524  18.90456  16.45364 #> [3,] 98.03978 97.03413 97.62184 99.97592 103.66402 107.77232 111.30526 #>          [,15]     [,16]     [,17]     [,18]     [,19]     [,20]     [,21] #> [1,]  39.69342  39.72013  40.19498  40.82722  41.24545  41.14590  40.42889 #> [2,]  14.73308  13.95315  14.12701  15.18255  16.94978  19.06053  20.90129 #> [3,] 113.57350 114.32672 113.67801 111.99023 109.80477 107.79357 106.66982 #>          [,22]     [,23]     [,24] #> [1,]  39.21549  37.73478  36.21121 #> [2,]  21.78778  21.33572  19.72452 #> [3,] 106.99673 108.92951 112.06428 #>  #> $outcomes$chickenPox$var.pred #> , , 1 #>  #>            [,1]      [,2]       [,3] #> [1,]  135.57355 -24.81896 -110.75459 #> [2,]  -24.81896  73.05560  -48.23663 #> [3,] -110.75459 -48.23663  158.99122 #>  #> , , 2 #>  #>            [,1]      [,2]       [,3] #> [1,]  139.71454 -21.78929 -117.92524 #> [2,]  -21.78929  66.84333  -45.05404 #> [3,] -117.92524 -45.05404  162.97928 #>  #> , , 3 #>  #>           [,1]      [,2]       [,3] #> [1,]  145.4718 -19.91080 -125.56098 #> [2,]  -19.9108  62.61923  -42.70843 #> [3,] -125.5610 -42.70843  168.26941 #>  #> , , 4 #>  #>            [,1]      [,2]       [,3] #> [1,]  153.61139 -19.63094 -133.98045 #> [2,]  -19.63094  62.10207  -42.47113 #> [3,] -133.98045 -42.47113  176.45159 #>  #> , , 5 #>  #>            [,1]      [,2]       [,3] #> [1,]  164.37960 -21.15718 -143.22242 #> [2,]  -21.15718  66.25356  -45.09638 #> [3,] -143.22242 -45.09638  188.31880 #>  #> , , 6 #>  #>            [,1]      [,2]       [,3] #> [1,]  177.33166 -24.59605 -152.73561 #> [2,]  -24.59605  75.59808  -51.00203 #> [3,] -152.73561 -51.00203  203.73764 #>  #> , , 7 #>  #>            [,1]      [,2]       [,3] #> [1,]  191.39239 -29.80709 -161.58530 #> [2,]  -29.80709  90.02198  -60.21489 #> [3,] -161.58530 -60.21489  221.80020 #>  #> , , 8 #>  #>            [,1]      [,2]      [,3] #> [1,]  205.03358 -36.00914 -169.0244 #> [2,]  -36.00914 107.94844  -71.9393 #> [3,] -169.02444 -71.93930  240.9637 #>  #> , , 9 #>  #>            [,1]      [,2]       [,3] #> [1,]  216.66009 -41.56643 -175.09366 #> [2,]  -41.56643 125.71681  -84.15038 #> [3,] -175.09366 -84.15038  259.24404 #>  #> , , 10 #>  #>            [,1]      [,2]       [,3] #> [1,]  225.18629 -44.54065 -180.64563 #> [2,]  -44.54065 138.43644  -93.89579 #> [3,] -180.64563 -93.89579  274.54142 #>  #> , , 11 #>  #>            [,1]      [,2]       [,3] #> [1,]  230.34786 -43.84935 -186.49850 #> [2,]  -43.84935 142.32401  -98.47466 #> [3,] -186.49850 -98.47466  284.97316 #>  #> , , 12 #>  #>            [,1]      [,2]       [,3] #> [1,]  232.68624 -40.02383 -192.66241 #> [2,]  -40.02383 136.96216  -96.93832 #> [3,] -192.66241 -96.93832  289.60073 #>  #> , , 13 #>  #>            [,1]      [,2]       [,3] #> [1,]  233.73598 -34.88147 -198.85451 #> [2,]  -34.88147 125.85370  -90.97223 #> [3,] -198.85451 -90.97223  289.82674 #>  #> , , 14 #>  #>            [,1]      [,2]       [,3] #> [1,]  236.08564 -30.40468 -205.68096 #> [2,]  -30.40468 114.50279  -84.09812 #> [3,] -205.68096 -84.09812  289.77907 #>  #> , , 15 #>  #>            [,1]      [,2]       [,3] #> [1,]  242.57423 -27.85411 -214.72012 #> [2,]  -27.85411 107.55218  -79.69807 #> [3,] -214.72012 -79.69807  294.41818 #>  #> , , 16 #>  #>            [,1]      [,2]       [,3] #> [1,]  255.12392 -27.75012 -227.37380 #> [2,]  -27.75012 107.62351  -79.87338 #> [3,] -227.37380 -79.87338  307.24718 #>  #> , , 17 #>  #>            [,1]      [,2]      [,3] #> [1,]  274.09621 -30.29739 -243.7988 #> [2,]  -30.29739 115.98339  -85.6860 #> [3,] -243.79882 -85.68600  329.4848 #>  #> , , 18 #>  #>            [,1]      [,2]       [,3] #> [1,]  298.22233 -35.60334 -262.61899 #> [2,]  -35.60334 133.26429  -97.66096 #> [3,] -262.61899 -97.66096  360.27995 #>  #> , , 19 #>  #>            [,1]       [,2]      [,3] #> [1,]  324.77085  -43.42878 -281.3421 #> [2,]  -43.42878  159.04606 -115.6173 #> [3,] -281.34207 -115.61728  396.9593 #>  #> , , 20 #>  #>            [,1]       [,2]      [,3] #> [1,]  349.88314  -52.57187 -297.3113 #> [2,]  -52.57187  190.29908 -137.7272 #> [3,] -297.31126 -137.72721  435.0385 #>  #> , , 21 #>  #>            [,1]       [,2]      [,3] #> [1,]  369.39340  -60.52154 -308.8719 #> [2,]  -60.52154  220.20491 -159.6834 #> [3,] -308.87186 -159.68337  468.5552 #>  #> , , 22 #>  #>            [,1]       [,2]      [,3] #> [1,]  380.22632  -64.32675 -315.8996 #> [2,]  -64.32675  239.83782 -175.5111 #> [3,] -315.89957 -175.51107  491.4106 #>  #> , , 23 #>  #>            [,1]       [,2]      [,3] #> [1,]  381.61813  -62.50399 -319.1141 #> [2,]  -62.50399  242.93513 -180.4311 #> [3,] -319.11414 -180.43114  499.5453 #>  #> , , 24 #>  #>            [,1]       [,2]      [,3] #> [1,]  375.59874  -56.21497 -319.3838 #> [2,]  -56.21497  230.18569 -173.9707 #> [3,] -319.38377 -173.97072  493.3545 #>  #>  #> $outcomes$chickenPox$icl.pred #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]   28   27   26   26   26   25   25   23   22    20    18    17    15    14 #> [2,]    8    5    4    3    3    3    4    5    6     6     5     4     3     2 #> [3,]   72   75   77   78   76   73   70   67   65    64    66    69    73    76 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] #> [1,]    14    13    13    12    12    11    10     9     8     7 #> [2,]     1     1     1     1     1     1     2     2     1     1 #> [3,]    78    78    76    72    68    65    62    61    62    65 #>  #> $outcomes$chickenPox$icu.pred #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]   74   73   73   74   75   77   78   79   79    78    77    76    74    74 #> [2,]   41   37   35   34   34   37   40   45   49    51    51    49    46    42 #> [3,]  121  125  128  129  130  129  128  127  127   129   132   135   139   142 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] #> [1,]    74    75    76    79    81    82    83    83    82    80 #> [2,]    40    40    41    44    48    53    57    60    60    58 #> [3,]   144   145   146   146   145   145   145   146   148   150 #>  #>  #> $outcomes$show #> [1] FALSE #>  #>  #> $theta.mean #>              [,1]        [,2]         [,3]        [,4]        [,5]         [,6] #>  [1,] -1.01019636 -1.03788032 -1.065564268 -1.09324822 -1.12093217 -1.148616125 #>  [2,] -0.02768395 -0.02768395 -0.027683953 -0.02768395 -0.02768395 -0.027683953 #>  [3,] -0.05892289 -0.09537541 -0.106272170 -0.08869338 -0.04734928  0.006682028 #>  [4,] -0.08869338 -0.04734928  0.006682028  0.05892289  0.09537541  0.106272170 #>  [5,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #>  [6,]  0.39003624  0.39003624  0.390036237  0.39003624  0.39003624  0.390036237 #>  [7,] -2.05310860 -2.08223486 -2.111361115 -2.14048737 -2.16961363 -2.198739882 #>  [8,] -0.02912626 -0.02912626 -0.029126256 -0.02912626 -0.02912626 -0.029126256 #>  [9,]  0.03653268 -0.14360984 -0.285272227 -0.35049615 -0.32180491 -0.206886307 #> [10,] -0.35049615 -0.32180491 -0.206886307 -0.03653268  0.14360984  0.285272227 #> [11,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #> [12,]  0.46672032  0.46672032  0.466720323  0.46672032  0.46672032  0.466720323 #>              [,7]        [,8]         [,9]       [,10]       [,11]        [,12] #>  [1,] -1.17630008 -1.20398403 -1.231667983 -1.25935194 -1.28703589 -1.314719841 #>  [2,] -0.02768395 -0.02768395 -0.027683953 -0.02768395 -0.02768395 -0.027683953 #>  [3,]  0.05892289  0.09537541  0.106272170  0.08869338  0.04734928 -0.006682028 #>  [4,]  0.08869338  0.04734928 -0.006682028 -0.05892289 -0.09537541 -0.106272170 #>  [5,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #>  [6,]  0.39003624  0.39003624  0.390036237  0.39003624  0.39003624  0.390036237 #>  [7,] -2.22786614 -2.25699239 -2.286118649 -2.31524490 -2.34437116 -2.373497416 #>  [8,] -0.02912626 -0.02912626 -0.029126256 -0.02912626 -0.02912626 -0.029126256 #>  [9,] -0.03653268  0.14360984  0.285272227  0.35049615  0.32180491  0.206886307 #> [10,]  0.35049615  0.32180491  0.206886307  0.03653268 -0.14360984 -0.285272227 #> [11,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #> [12,]  0.46672032  0.46672032  0.466720323  0.46672032  0.46672032  0.466720323 #>             [,13]       [,14]        [,15]       [,16]       [,17]        [,18] #>  [1,] -1.34240379 -1.37008775 -1.397771698 -1.42545565 -1.45313960 -1.480823556 #>  [2,] -0.02768395 -0.02768395 -0.027683953 -0.02768395 -0.02768395 -0.027683953 #>  [3,] -0.05892289 -0.09537541 -0.106272170 -0.08869338 -0.04734928  0.006682028 #>  [4,] -0.08869338 -0.04734928  0.006682028  0.05892289  0.09537541  0.106272170 #>  [5,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #>  [6,]  0.39003624  0.39003624  0.390036237  0.39003624  0.39003624  0.390036237 #>  [7,] -2.40262367 -2.43174993 -2.460876183 -2.49000244 -2.51912869 -2.548254950 #>  [8,] -0.02912626 -0.02912626 -0.029126256 -0.02912626 -0.02912626 -0.029126256 #>  [9,]  0.03653268 -0.14360984 -0.285272227 -0.35049615 -0.32180491 -0.206886307 #> [10,] -0.35049615 -0.32180491 -0.206886307 -0.03653268  0.14360984  0.285272227 #> [11,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #> [12,]  0.46672032  0.46672032  0.466720323  0.46672032  0.46672032  0.466720323 #>             [,19]       [,20]        [,21]       [,22]       [,23]        [,24] #>  [1,] -1.50850751 -1.53619146 -1.563875413 -1.59155937 -1.61924332 -1.646927271 #>  [2,] -0.02768395 -0.02768395 -0.027683953 -0.02768395 -0.02768395 -0.027683953 #>  [3,]  0.05892289  0.09537541  0.106272170  0.08869338  0.04734928 -0.006682028 #>  [4,]  0.08869338  0.04734928 -0.006682028 -0.05892289 -0.09537541 -0.106272170 #>  [5,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #>  [6,]  0.39003624  0.39003624  0.390036237  0.39003624  0.39003624  0.390036237 #>  [7,] -2.57738121 -2.60650746 -2.635633716 -2.66475997 -2.69388623 -2.723012483 #>  [8,] -0.02912626 -0.02912626 -0.029126256 -0.02912626 -0.02912626 -0.029126256 #>  [9,] -0.03653268  0.14360984  0.285272227  0.35049615  0.32180491  0.206886307 #> [10,]  0.35049615  0.32180491  0.206886307  0.03653268 -0.14360984 -0.285272227 #> [11,]  0.00000000  0.00000000  0.000000000  0.00000000  0.00000000  0.000000000 #> [12,]  0.46672032  0.46672032  0.466720323  0.46672032  0.46672032  0.466720323 #>  #> $theta.cov #> , , 1 #>  #>                [,1]          [,2]          [,3]          [,4]      [,5] #>  [1,]  9.559869e-02  1.868326e-03  2.177845e-04  2.520295e-03 0.0000000 #>  [2,]  1.868326e-03  4.604931e-04 -3.709447e-05  1.628894e-04 0.0000000 #>  [3,]  2.177845e-04 -3.709447e-05  6.451331e-03  1.343320e-04 0.0000000 #>  [4,]  2.520295e-03  1.628894e-04  1.343320e-04  6.562663e-03 0.0000000 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0716381 #>  [6,] -6.199776e-02 -8.659647e-07 -6.660636e-04  6.198757e-04 0.0000000 #>  [7,]  5.740983e-03  1.057553e-04  1.793818e-04 -4.734687e-06 0.0000000 #>  [8,]  1.053915e-04  5.737582e-06  4.118280e-06  3.150242e-06 0.0000000 #>  [9,]  1.844940e-04  4.187968e-06  4.309714e-04  2.915415e-06 0.0000000 #> [10,]  2.845902e-06  3.353556e-06  2.289083e-06  4.250154e-04 0.0000000 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0000000 #> [12,] -3.395756e-03  1.197936e-06 -1.080394e-04  1.108729e-04 0.0000000 #>                [,6]          [,7]          [,8]          [,9]        [,10] #>  [1,] -6.199776e-02  5.740983e-03  1.053915e-04  1.844940e-04 2.845902e-06 #>  [2,] -8.659647e-07  1.057553e-04  5.737582e-06  4.187968e-06 3.353556e-06 #>  [3,] -6.660636e-04  1.793818e-04  4.118280e-06  4.309714e-04 2.289083e-06 #>  [4,]  6.198757e-04 -4.734687e-06  3.150242e-06  2.915415e-06 4.250154e-04 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.000000e+00 #>  [6,]  6.223498e-02 -3.393720e-03  1.244983e-06 -1.125074e-04 1.144439e-04 #>  [7,] -3.393720e-03  1.092513e-01  2.228886e-03  2.307867e-04 3.328256e-03 #>  [8,]  1.244983e-06  2.228886e-03  5.406644e-04 -4.712594e-05 1.967476e-04 #>  [9,] -1.125074e-04  2.307867e-04 -4.712594e-05  8.001389e-03 1.299627e-04 #> [10,]  1.144439e-04  3.328256e-03  1.967476e-04  1.299627e-04 8.234927e-03 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.000000e+00 #> [12,]  3.426467e-03 -6.900170e-02  1.662161e-07 -8.172003e-04 7.844873e-04 #>            [,11]         [,12] #>  [1,] 0.00000000 -3.395756e-03 #>  [2,] 0.00000000  1.197936e-06 #>  [3,] 0.00000000 -1.080394e-04 #>  [4,] 0.00000000  1.108729e-04 #>  [5,] 0.00000000  0.000000e+00 #>  [6,] 0.00000000  3.426467e-03 #>  [7,] 0.00000000 -6.900170e-02 #>  [8,] 0.00000000  1.662161e-07 #>  [9,] 0.00000000 -8.172003e-04 #> [10,] 0.00000000  7.844873e-04 #> [11,] 0.06747194  0.000000e+00 #> [12,] 0.00000000  6.933184e-02 #>  #> , , 2 #>  #>                [,1]          [,2]          [,3]          [,4]      [,5] #>  [1,]  1.045778e-01  2.328819e-03  1.498074e-03  2.233361e-03 0.0000000 #>  [2,]  2.328819e-03  4.835345e-04  4.931995e-05  1.596136e-04 0.0000000 #>  [3,]  1.498074e-03  4.931995e-05  6.756898e-03  1.153742e-04 0.0000000 #>  [4,]  2.233361e-03  1.596136e-04  1.153742e-04  6.582627e-03 0.0000000 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0716381 #>  [6,] -6.199862e-02 -8.659647e-07 -2.668902e-04  8.698599e-04 0.0000000 #>  [7,]  5.957867e-03  1.114929e-04  1.581235e-04 -9.312221e-05 0.0000000 #>  [8,]  1.111291e-04  5.737582e-06  5.141656e-06  6.690499e-07 0.0000000 #>  [9,]  1.665031e-04  5.303664e-06  4.317360e-04 -9.647155e-07 0.0000000 #> [10,] -8.897209e-05  8.102811e-07 -1.591048e-06  4.242508e-04 0.0000000 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0000000 #> [12,] -3.394558e-03  1.197936e-06 -3.812842e-05  1.500384e-04 0.0000000 #>                [,6]          [,7]         [,8]          [,9]         [,10] #>  [1,] -6.199862e-02  5.957867e-03 1.111291e-04  1.665031e-04 -8.897209e-05 #>  [2,] -8.659647e-07  1.114929e-04 5.737582e-06  5.303664e-06  8.102811e-07 #>  [3,] -2.668902e-04  1.581235e-04 5.141656e-06  4.317360e-04 -1.591048e-06 #>  [4,]  8.698599e-04 -9.312221e-05 6.690499e-07 -9.647155e-07  4.242508e-04 #>  [5,]  0.000000e+00  0.000000e+00 0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  6.223498e-02 -3.392475e-03 1.244983e-06 -4.021231e-05  1.553650e-04 #>  [7,] -3.392475e-03  1.197175e-01 2.769550e-03  1.921557e-03  2.960913e-03 #>  [8,]  1.244983e-06  2.769550e-03 5.677054e-04  5.756152e-05  1.939514e-04 #>  [9,] -4.021231e-05  1.921557e-03 5.756152e-05  8.373676e-03  1.661064e-04 #> [10,]  1.553650e-04  2.960913e-03 1.939514e-04  1.661064e-04  8.268741e-03 #> [11,]  0.000000e+00  0.000000e+00 0.000000e+00  0.000000e+00  0.000000e+00 #> [12,]  3.426467e-03 -6.900154e-02 1.662161e-07 -3.154726e-04  1.087986e-03 #>            [,11]         [,12] #>  [1,] 0.00000000 -3.394558e-03 #>  [2,] 0.00000000  1.197936e-06 #>  [3,] 0.00000000 -3.812842e-05 #>  [4,] 0.00000000  1.500384e-04 #>  [5,] 0.00000000  0.000000e+00 #>  [6,] 0.00000000  3.426467e-03 #>  [7,] 0.00000000 -6.900154e-02 #>  [8,] 0.00000000  1.662161e-07 #>  [9,] 0.00000000 -3.154726e-04 #> [10,] 0.00000000  1.087986e-03 #> [11,] 0.06747194  0.000000e+00 #> [12,] 0.00000000  6.933184e-02 #>  #> , , 3 #>  #>                [,1]          [,2]          [,3]          [,4]      [,5] #>  [1,]  0.1145008962  2.812354e-03  2.536570e-03  1.298679e-03 0.0000000 #>  [2,]  0.0028123539  5.065759e-04  1.225191e-04  1.135695e-04 0.0000000 #>  [3,]  0.0025365700  1.225191e-04  6.974647e-03 -1.777445e-05 0.0000000 #>  [4,]  0.0012986794  1.135695e-04 -1.777445e-05  6.690410e-03 0.0000000 #>  [5,]  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 0.0716381 #>  [6,] -0.0619994881 -8.659647e-07  2.037963e-04  8.867658e-04 0.0000000 #>  [7,]  0.0061862268  1.172305e-04  9.516520e-05 -1.616994e-04 0.0000000 #>  [8,]  0.0001168667  5.737582e-06  4.787330e-06 -1.991414e-06 0.0000000 #>  [9,]  0.0001047081  4.998249e-06  4.287580e-04 -3.566964e-06 0.0000000 #> [10,] -0.0001622538 -1.950108e-06 -4.193297e-06  4.272288e-04 0.0000000 #> [11,]  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 0.0000000 #> [12,] -0.0033933606  1.197936e-06  4.199903e-05  1.490013e-04 0.0000000 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,] -6.199949e-02  0.0061862268  1.168667e-04  1.047081e-04 -1.622538e-04 #>  [2,] -8.659647e-07  0.0001172305  5.737582e-06  4.998249e-06 -1.950108e-06 #>  [3,]  2.037963e-04  0.0000951652  4.787330e-06  4.287580e-04 -4.193297e-06 #>  [4,]  8.867658e-04 -0.0001616994 -1.991414e-06 -3.566964e-06  4.272288e-04 #>  [5,]  0.000000e+00  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  6.223498e-02 -0.0033912296  1.244983e-06  4.285764e-05  1.546562e-04 #>  [7,] -3.391230e-03  0.1312919874  3.337256e-03  3.291399e-03  1.742633e-03 #>  [8,]  1.244983e-06  0.0033372555  5.947465e-04  1.468254e-04  1.391860e-04 #>  [9,]  4.285764e-05  0.0032913988  1.468254e-04  8.692646e-03  3.761480e-05 #> [10,]  1.546562e-04  0.0017426332  1.391860e-04  3.761480e-05  8.355871e-03 #> [11,]  0.000000e+00  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 #> [12,]  3.426467e-03 -0.0690013708  1.662161e-07  2.707857e-04  1.099960e-03 #>            [,11]         [,12] #>  [1,] 0.00000000 -3.393361e-03 #>  [2,] 0.00000000  1.197936e-06 #>  [3,] 0.00000000  4.199903e-05 #>  [4,] 0.00000000  1.490013e-04 #>  [5,] 0.00000000  0.000000e+00 #>  [6,] 0.00000000  3.426467e-03 #>  [7,] 0.00000000 -6.900137e-02 #>  [8,] 0.00000000  1.662161e-07 #>  [9,] 0.00000000  2.707857e-04 #> [10,] 0.00000000  1.099960e-03 #> [11,] 0.06747194  0.000000e+00 #> [12,] 0.00000000  6.933184e-02 #>  #> , , 4 #>  #>                [,1]          [,2]          [,3]          [,4]      [,5] #>  [1,]  1.254141e-01  3.318930e-03  3.008963e-03 -1.065011e-04 0.0000000 #>  [2,]  3.318930e-03  5.296173e-04  1.628894e-04  3.709447e-05 0.0000000 #>  [3,]  3.008963e-03  1.628894e-04  7.049594e-03 -1.319653e-04 0.0000000 #>  [4,] -1.065011e-04  3.709447e-05 -1.319653e-04  6.940995e-03 0.0000000 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0716381 #>  [6,] -6.200035e-02 -8.659647e-07  6.198757e-04  6.660636e-04 0.0000000 #>  [7,]  6.426062e-03  1.229681e-04  4.716040e-06 -1.917366e-04 0.0000000 #>  [8,]  1.226043e-04  5.737582e-06  3.150242e-06 -4.118280e-06 0.0000000 #>  [9,]  1.290657e-05  3.353556e-06  4.250154e-04 -2.289083e-06 0.0000000 #> [10,] -1.970579e-04 -4.187968e-06 -2.915415e-06  4.309714e-04 0.0000000 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0000000 #> [12,] -3.392163e-03  1.197936e-06  1.108729e-04  1.080394e-04 0.0000000 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,] -6.200035e-02  6.426062e-03  1.226043e-04  1.290657e-05 -1.970579e-04 #>  [2,] -8.659647e-07  1.229681e-04  5.737582e-06  3.353556e-06 -4.187968e-06 #>  [3,]  6.198757e-04  4.716040e-06  3.150242e-06  4.250154e-04 -2.915415e-06 #>  [4,]  6.660636e-04 -1.917366e-04 -4.118280e-06 -2.289083e-06  4.309714e-04 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  6.223498e-02 -3.389985e-03  1.244983e-06  1.144439e-04  1.125074e-04 #>  [7,] -3.389985e-03  1.440290e-01  3.932002e-03  3.918499e-03 -8.940886e-05 #>  [8,]  1.244983e-06  3.932002e-03  6.217875e-04  1.967476e-04  4.712594e-05 #>  [9,]  1.144439e-04  3.918499e-03  1.967476e-04  8.842380e-03 -1.270205e-04 #> [10,]  1.125074e-04 -8.940886e-05  4.712594e-05 -1.270205e-04  8.612239e-03 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [12,]  3.426467e-03 -6.900120e-02  1.662161e-07  7.844873e-04  8.172003e-04 #>            [,11]         [,12] #>  [1,] 0.00000000 -3.392163e-03 #>  [2,] 0.00000000  1.197936e-06 #>  [3,] 0.00000000  1.108729e-04 #>  [4,] 0.00000000  1.080394e-04 #>  [5,] 0.00000000  0.000000e+00 #>  [6,] 0.00000000  3.426467e-03 #>  [7,] 0.00000000 -6.900120e-02 #>  [8,] 0.00000000  1.662161e-07 #>  [9,] 0.00000000  7.844873e-04 #> [10,] 0.00000000  8.172003e-04 #> [11,] 0.06747194  0.000000e+00 #> [12,] 0.00000000  6.933184e-02 #>  #> , , 5 #>  #>                [,1]          [,2]          [,3]          [,4]      [,5] #>  [1,]  1.373635e-01  3.848547e-03  2.712202e-03 -1.646034e-03 0.0000000 #>  [2,]  3.848547e-03  5.526587e-04  1.596136e-04 -4.931995e-05 0.0000000 #>  [3,]  2.712202e-03  1.596136e-04  7.069558e-03 -1.130075e-04 0.0000000 #>  [4,] -1.646034e-03 -4.931995e-05 -1.130075e-04  7.246562e-03 0.0000000 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0716381 #>  [6,] -6.200122e-02 -8.659647e-07  8.698599e-04  2.668902e-04 0.0000000 #>  [7,]  6.677371e-03  1.287056e-04 -9.111506e-05 -1.735485e-04 0.0000000 #>  [8,]  1.283419e-04  5.737582e-06  6.690499e-07 -5.141656e-06 0.0000000 #>  [9,] -8.654125e-05  8.102811e-07  4.242508e-04  1.591048e-06 0.0000000 #> [10,] -1.824141e-04 -5.303664e-06  9.647155e-07  4.317360e-04 0.0000000 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0000000 #> [12,] -3.390965e-03  1.197936e-06  1.500384e-04  3.812842e-05 0.0000000 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,] -6.200122e-02  6.677371e-03  1.283419e-04 -8.654125e-05 -1.824141e-04 #>  [2,] -8.659647e-07  1.287056e-04  5.737582e-06  8.102811e-07 -5.303664e-06 #>  [3,]  8.698599e-04 -9.111506e-05  6.690499e-07  4.242508e-04  9.647155e-07 #>  [4,]  2.668902e-04 -1.735485e-04 -5.141656e-06  1.591048e-06  4.317360e-04 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  6.223498e-02 -3.388740e-03  1.244983e-06  1.553650e-04  4.021231e-05 #>  [7,] -3.388740e-03  1.579825e-01  4.553790e-03  3.542767e-03 -2.094241e-03 #>  [8,]  1.244983e-06  4.553790e-03  6.488286e-04  1.939514e-04 -5.756152e-05 #>  [9,]  1.553650e-04  3.542767e-03  1.939514e-04  8.876193e-03 -1.631642e-04 #> [10,]  4.021231e-05 -2.094241e-03 -5.756152e-05 -1.631642e-04  8.984526e-03 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [12,]  3.426467e-03 -6.900104e-02  1.662161e-07  1.087986e-03  3.154726e-04 #>            [,11]         [,12] #>  [1,] 0.00000000 -3.390965e-03 #>  [2,] 0.00000000  1.197936e-06 #>  [3,] 0.00000000  1.500384e-04 #>  [4,] 0.00000000  3.812842e-05 #>  [5,] 0.00000000  0.000000e+00 #>  [6,] 0.00000000  3.426467e-03 #>  [7,] 0.00000000 -6.900104e-02 #>  [8,] 0.00000000  1.662161e-07 #>  [9,] 0.00000000  1.087986e-03 #> [10,] 0.00000000  3.154726e-04 #> [11,] 0.06747194  0.000000e+00 #> [12,] 0.00000000  6.933184e-02 #>  #> , , 6 #>  #>                [,1]          [,2]          [,3]          [,4]      [,5] #>  [1,]  0.1503952412  4.401206e-03  1.639388e-03 -2.904127e-03 0.0000000 #>  [2,]  0.0044012059  5.757001e-04  1.135695e-04 -1.225191e-04 0.0000000 #>  [3,]  0.0016393878  1.135695e-04  7.177341e-03  2.014110e-05 0.0000000 #>  [4,] -0.0029041274 -1.225191e-04  2.014110e-05  7.464311e-03 0.0000000 #>  [5,]  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 0.0716381 #>  [6,] -0.0620020860 -8.659647e-07  8.867658e-04 -2.037963e-04 0.0000000 #>  [7,]  0.0069401565  1.344432e-04 -1.676736e-04 -1.095272e-04 0.0000000 #>  [8,]  0.0001340794  5.737582e-06 -1.991414e-06 -4.787330e-06 0.0000000 #>  [9,] -0.0001681041 -1.950108e-06  4.272288e-04  4.193297e-06 0.0000000 #> [10,] -0.0001197029 -4.998249e-06  3.566964e-06  4.287580e-04 0.0000000 #> [11,]  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 0.0000000 #> [12,] -0.0033897667  1.197936e-06  1.490013e-04 -4.199903e-05 0.0000000 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,] -6.200209e-02  0.0069401565  1.340794e-04 -1.681041e-04 -1.197029e-04 #>  [2,] -8.659647e-07  0.0001344432  5.737582e-06 -1.950108e-06 -4.998249e-06 #>  [3,]  8.867658e-04 -0.0001676736 -1.991414e-06  4.272288e-04  3.566964e-06 #>  [4,] -2.037963e-04 -0.0001095272 -4.787330e-06  4.193297e-06  4.287580e-04 #>  [5,]  0.000000e+00  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  6.223498e-02 -0.0033874947  1.244983e-06  1.546562e-04 -4.285764e-05 #>  [7,] -3.387495e-03  0.1732065904  5.202618e-03  2.160191e-03 -3.731875e-03 #>  [8,]  1.244983e-06  0.0052026181  6.758696e-04  1.391860e-04 -1.468254e-04 #>  [9,]  1.546562e-04  0.0021601913  1.391860e-04  8.963324e-03 -3.467260e-05 #> [10,] -4.285764e-05 -0.0037318751 -1.468254e-04 -3.467260e-05  9.303497e-03 #> [11,]  0.000000e+00  0.0000000000  0.000000e+00  0.000000e+00  0.000000e+00 #> [12,]  3.426467e-03 -0.0690008722  1.662161e-07  1.099960e-03 -2.707857e-04 #>            [,11]         [,12] #>  [1,] 0.00000000 -3.389767e-03 #>  [2,] 0.00000000  1.197936e-06 #>  [3,] 0.00000000  1.490013e-04 #>  [4,] 0.00000000 -4.199903e-05 #>  [5,] 0.00000000  0.000000e+00 #>  [6,] 0.00000000  3.426467e-03 #>  [7,] 0.00000000 -6.900087e-02 #>  [8,] 0.00000000  1.662161e-07 #>  [9,] 0.00000000  1.099960e-03 #> [10,] 0.00000000 -2.707857e-04 #> [11,] 0.06747194  0.000000e+00 #> [12,] 0.00000000  6.933184e-02 #>  #> , , 7 #>  #>                [,1]          [,2]          [,3]          [,4]      [,5] #>  [1,]  1.645553e-01  4.976906e-03  4.782306e-06 -3.497631e-03 0.0000000 #>  [2,]  4.976906e-03  5.987415e-04  3.709447e-05 -1.628894e-04 0.0000000 #>  [3,]  4.782306e-06  3.709447e-05  7.427926e-03  1.343320e-04 0.0000000 #>  [4,] -3.497631e-03 -1.628894e-04  1.343320e-04  7.539258e-03 0.0000000 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0716381 #>  [6,] -6.200295e-02 -8.659647e-07  6.660636e-04 -6.198757e-04 0.0000000 #>  [7,]  7.214417e-03  1.401808e-04 -2.040915e-04 -1.416677e-05 0.0000000 #>  [8,]  1.398170e-04  5.737582e-06 -4.118280e-06 -3.150242e-06 0.0000000 #>  [9,] -2.096218e-04 -4.187968e-06  4.309714e-04  2.915415e-06 0.0000000 #> [10,] -2.296724e-05 -3.353556e-06  2.289083e-06  4.250154e-04 0.0000000 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.0000000 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,] -6.200295e-02  7.214417e-03  1.398170e-04 -2.096218e-04 -2.296724e-05 #>  [2,] -8.659647e-07  1.401808e-04  5.737582e-06 -4.187968e-06 -3.353556e-06 #>  [3,]  6.660636e-04 -2.040915e-04 -4.118280e-06  4.309714e-04  2.289083e-06 #>  [4,] -6.198757e-04 -1.416677e-05 -3.150242e-06  2.915415e-06  4.250154e-04 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  6.223498e-02 -3.386250e-03  1.244983e-06  1.125074e-04 -1.144439e-04 #>  [7,] -3.386250e-03  1.897554e-01  5.878488e-03  5.196896e-05 -4.508742e-03 #>  [8,]  1.244983e-06  5.878488e-03  7.029107e-04  4.712594e-05 -1.967476e-04 #>  [9,]  1.125074e-04  5.196896e-05  4.712594e-05  9.219692e-03  1.299627e-04 #> [10,] -1.144439e-04 -4.508742e-03 -1.967476e-04  1.299627e-04  9.453230e-03 #> [11,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>            [,11]         [,12] #>  [1,] 0.00000000 -3.388569e-03 #>  [2,] 0.00000000  1.197936e-06 #>  [3,] 0.00000000  1.080394e-04 #>  [4,] 0.00000000 -1.108729e-04 #>  [5,] 0.00000000  0.000000e+00 #>  [6,] 0.00000000  3.426467e-03 #>  [7,] 0.00000000 -6.900071e-02 #>  [8,] 0.00000000  1.662161e-07 #>  [9,] 0.00000000  8.172003e-04 #> [10,] 0.00000000 -7.844873e-04 #> [11,] 0.06747194  0.000000e+00 #>  #>  [ reached getOption(\"max.print\") -- omitted 1 row(s) and 17 matrix slice(s) ] #>  #> $lambda.mean #>           [,1]       [,2]       [,3]       [,4]       [,5]       [,6] #> [1,] -0.679083 -0.7432195 -0.7818002 -0.7919054 -0.7782452 -0.7518979 #> [2,] -1.549856 -1.7591244 -1.9299130 -2.0242632 -2.0246982 -1.9389059 #>            [,7]       [,8]       [,9]      [,10]      [,11]      [,12] #> [1,] -0.7273409 -0.7185724 -0.7353596 -0.7806223 -0.8496504 -0.9313656 #> [2,] -1.7976785 -1.6466622 -1.5341261 -1.4980284 -1.5558459 -1.6998908 #>          [,13]     [,14]     [,15]     [,16]     [,17]     [,18]     [,19] #> [1,] -1.011290 -1.075427 -1.114008 -1.124113 -1.110453 -1.084105 -1.059548 #> [2,] -1.899371 -2.108639 -2.279428 -2.373778 -2.374213 -2.288421 -2.147194 #>          [,20]     [,21]     [,22]     [,23]     [,24] #> [1,] -1.050780 -1.067567 -1.112830 -1.181858 -1.263573 #> [2,] -1.996177 -1.883641 -1.847543 -1.905361 -2.049406 #>  #> $lambda.cov #> , , 1 #>  #>             [,1]        [,2] #> [1,] 0.111031031 0.002952275 #> [2,] 0.002952275 0.114880251 #>  #> , , 2 #>  #>             [,1]        [,2] #> [1,] 0.123672883 0.003275323 #> [2,] 0.003275323 0.130104017 #>  #> , , 3 #>  #>             [,1]        [,2] #> [1,] 0.136830380 0.003541592 #> [2,] 0.003541592 0.145910042 #>  #> , , 4 #>  #>             [,1]        [,2] #> [1,] 0.149593768 0.003738337 #> [2,] 0.003738337 0.161078684 #>  #> , , 5 #>  #>             [,1]        [,2] #> [1,] 0.161467867 0.003876132 #> [2,] 0.003876132 0.174921870 #>  #> , , 6 #>  #>             [,1]        [,2] #> [1,] 0.172493799 0.003984471 #> [2,] 0.003984471 0.187492253 #>  #> , , 7 #>  #>             [,1]        [,2] #> [1,] 0.183192092 0.004103871 #> [2,] 0.004103871 0.199515810 #>  #> , , 8 #>  #>             [,1]        [,2] #> [1,] 0.194434525 0.004277022 #> [2,] 0.004277022 0.212174787 #>  #> , , 9 #>  #>             [,1]        [,2] #> [1,] 0.207308809 0.004539212 #> [2,] 0.004539212 0.226871186 #>  #> , , 10 #>  #>             [,1]        [,2] #> [1,] 0.222942264 0.004908079 #> [2,] 0.004908079 0.244987991 #>  #> , , 11 #>  #>             [,1]        [,2] #> [1,] 0.242227680 0.005375258 #> [2,] 0.005375258 0.267588593 #>  #> , , 12 #>  #>             [,1]        [,2] #> [1,] 0.265491167 0.005904707 #> [2,] 0.005904707 0.295057987 #>  #> , , 13 #>  #>             [,1]        [,2] #> [1,] 0.292266282 0.006441238 #> [2,] 0.006441238 0.326834106 #>  #> , , 14 #>  #>             [,1]        [,2] #> [1,] 0.321351876 0.006927658 #> [2,] 0.006927658 0.361440228 #>  #> , , 15 #>  #>             [,1]        [,2] #> [1,] 0.351188944 0.007323712 #> [2,] 0.007323712 0.396907427 #>  #> , , 16 #>  #>             [,1]        [,2] #> [1,] 0.380397001 0.007618777 #> [2,] 0.007618777 0.431442027 #>  #> , , 17 #>  #>             [,1]        [,2] #> [1,] 0.408221257 0.007833981 #> [2,] 0.007833981 0.464034915 #>  #> , , 18 #>  #>             [,1]        [,2] #> [1,] 0.434723899 0.008014972 #> [2,] 0.008014972 0.494756726 #>  #> , , 19 #>  #>             [,1]        [,2] #> [1,] 0.460721555 0.008219696 #> [2,] 0.008219696 0.524685622 #>  #> , , 20 #>  #>             [,1]        [,2] #> [1,] 0.487577799 0.008504881 #> [2,] 0.008504881 0.555595865 #>  #> , , 21 #>  #>            [,1]       [,2] #> [1,] 0.51693605 0.00891269 #> [2,] 0.00891269 0.58956268 #>  #> , , 22 #>  #>            [,1]       [,2] #> [1,] 0.55039436 0.00945864 #> [2,] 0.00945864 0.62854309 #>  #> , , 23 #>  #>            [,1]       [,2] #> [1,] 0.58910514 0.01012381 #> [2,] 0.01012381 0.67392152 #>  #> , , 24 #>  #>            [,1]       [,2] #> [1,] 0.63337341 0.01085602 #> [2,] 0.01085602 0.72606499 #>  #>  #> $plot #>"},{"path":"/reference/formula.to.structure.html","id":null,"dir":"Reference","previous_headings":"","what":"formula.to.structure ‚Äî formula.to.structure","title":"formula.to.structure ‚Äî formula.to.structure","text":"formula..structure","code":""},{"path":"/reference/formula.to.structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"formula.to.structure ‚Äî formula.to.structure","text":"","code":"# S3 method for class 'to.structure' formula(formula, data, label = \"mu\")"},{"path":"/reference/formula.to.structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"formula.to.structure ‚Äî formula.to.structure","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment glm called. label optional character naming linear predictor.","code":""},{"path":"/reference/f_joint_root.html","id":null,"dir":"Reference","previous_headings":"","what":"f_joint_root ‚Äî f_joint_root","title":"f_joint_root ‚Äî f_joint_root","text":"Calculates root function given initial value function calculate derivatives.","code":""},{"path":"/reference/f_joint_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"f_joint_root ‚Äî f_joint_root","text":"","code":"f_joint_root(f, start, tol = 1e-08, n.max = 1000)"},{"path":"/reference/f_joint_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"f_joint_root ‚Äî f_joint_root","text":"f function: function receives vector return vector size matrix representing derivatives. start vector: initial value start algorithm. tol numeric: tolerance solution. n.max numeric: maximum number iterations allowed.","code":""},{"path":"/reference/f_joint_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"f_joint_root ‚Äî f_joint_root","text":"list containing: root vector: solution system f(x)=0. f.root vector: function f evaluated root. iter numeric: number steps taken.","code":""},{"path":"/reference/f_root.html","id":null,"dir":"Reference","previous_headings":"","what":"f_root ‚Äî f_root","title":"f_root ‚Äî f_root","text":"Calculates root function given initial value function calculate derivatives.","code":""},{"path":"/reference/f_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"f_root ‚Äî f_root","text":"","code":"f_root(f, df, start, tol = 1e-08, n.max = 1000)"},{"path":"/reference/f_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"f_root ‚Äî f_root","text":"f function: function receives vector return vector size. df function: function receives vector return derivatives f respect arguments (f returns vector, must matrix). start vector: initial value start algorithm. tol numeric: tolerance solution. n.max numeric: maximum number iterations allowed.","code":""},{"path":"/reference/f_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"f_root ‚Äî f_root","text":"list containing: root vector: solution system f(x)=0. f.root vector: function f evaluated root. iter numeric: number steps taken.","code":""},{"path":"/reference/Gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma outcome for kDGLM models ‚Äî Gamma","title":"Gamma outcome for kDGLM models ‚Äî Gamma","text":"Creates outcome gamma distribution chosen parameters (can specify 2).","code":""},{"path":"/reference/Gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma outcome for kDGLM models ‚Äî Gamma","text":"","code":"Gamma(   phi = NA,   mu = NA,   alpha = NA,   beta = NA,   sigma = NA,   data,   offset = as.matrix(data)^0 )"},{"path":"/reference/Gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma outcome for kDGLM models ‚Äî Gamma","text":"phi character numeric: Name linear predictor associated shape parameter gamma distribution. numeric, parameter treated known equal value passed. character, parameter treated unknown equal exponential associated linear predictor. specified alpha. mu character: Name linear predictor associated mean parameter gamma distribution. parameter treated unknown equal exponential associated linear predictor. alpha character: Name linear predictor associated shape parameter gamma distribution. parameter treated unknown equal exponential associated linear predictor. specified phi. beta character: Name linear predictor associated rate parameter gamma distribution. parameter treated unknown equal exponential associated linear predictor. specified sigma. sigma character: Name linear predictor associated scale parameter gamma distribution. parameter treated unknown equal exponential associated linear predictor. specified beta. data numeric: Values observed data. offset numeric: offset observation. Must shape data.","code":""},{"path":"/reference/Gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gamma outcome for kDGLM models ‚Äî Gamma","text":"object class dlm_distr","code":""},{"path":"/reference/Gamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gamma outcome for kDGLM models ‚Äî Gamma","text":"evaluating posterior parameters, use method proposed ArtigokParametrico;textualkDGLM. details implementation see  ArtigoPacote;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gamma outcome for kDGLM models ‚Äî Gamma","text":"","code":"structure <- polynomial_block(mu = 1, D = 0.95)  Y <- (cornWheat$corn.log.return[1:500] - mean(cornWheat$corn.log.return[1:500]))**2 outcome <- Gamma(phi = 0.5, mu = \"mu\", data = Y) fitted.data <- fit_model(structure, corn = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     corn: Gamma #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 3508.409 #> Interval Score        : 0.00197 #> Mean Abs. Scaled Error: 0.93721 #> --- plot(fitted.data, plot.pkg = \"base\")"},{"path":"/reference/gamma_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"gamma_pred ‚Äî gamma_pred","title":"gamma_pred ‚Äî gamma_pred","text":"Calculate values predictive distribution given values parameter conjugated distribution linear predictor. data assumed Gamma distribution known shape parameter phi mean distribution Inverse-Gamma shape parameter e rate parameter b. scenario, marginal distribution data Beta prime parameters phi, alpha, beta / phi.","code":""},{"path":"/reference/gamma_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gamma_pred ‚Äî gamma_pred","text":"","code":"gamma_pred(conj.param, outcome = NULL, parms = list(), pred.cred = 0.95)"},{"path":"/reference/gamma_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gamma_pred ‚Äî gamma_pred","text":"conj.param list data.frame: parameters conjugated distributions linear predictor. outcome numeric matrix (optional): observed values current time. used function. parms list: list extra parameters model. function, must contain shape parameter phi observational model. pred.cred numeric: desired credibility credibility interval.","code":""},{"path":"/reference/gamma_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gamma_pred ‚Äî gamma_pred","text":"list containing following values: pred numeric/matrix: mean predictive distribution next observation. type shape parameter model. var.pred numeric/matrix: variance predictive distribution next observation. type shape parameter model. icl.pred numeric/matrix: percentile 100*((1-pred.cred)/2) icu.pred numeric/matrix: percentile 100*(1-(1-pred.cred)/2) log.like numeric: log likelihood outcome given conjugated parameters.","code":""},{"path":[]},{"path":"/reference/gastroBR.html","id":null,"dir":"Reference","previous_headings":"","what":"Hospital admissions from gastroenteritis in Brazil ‚Äî gastroBR","title":"Hospital admissions from gastroenteritis in Brazil ‚Äî gastroBR","text":"dataset containing number Hospital admissions gastroenteritis Brazil, per state, 2010 2022 month.","code":""},{"path":"/reference/gastroBR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hospital admissions from gastroenteritis in Brazil ‚Äî gastroBR","text":"","code":"gastroBR"},{"path":"/reference/gastroBR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hospital admissions from gastroenteritis in Brazil ‚Äî gastroBR","text":"data frame 4212 rows 4 variables: UF abbreviated state name. Date date observation. Note day placeholder just placeholder. Admissions number hospital admissions. Population estimated population.","code":""},{"path":"/reference/gastroBR.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hospital admissions from gastroenteritis in Brazil ‚Äî gastroBR","text":"Admissions: https://datasus.saude.gov.br/informacoes-de-saude-tabnet/ Population: https://www.ibge.gov.br/estatisticas/sociais/populacao.html","code":""},{"path":"/reference/generic_smoother.html","id":null,"dir":"Reference","previous_headings":"","what":"generic_smoother ‚Äî generic_smoother","title":"generic_smoother ‚Äî generic_smoother","text":"Generic smoother models.","code":""},{"path":"/reference/generic_smoother.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generic_smoother ‚Äî generic_smoother","text":"","code":"generic_smoother(mt, Ct, at, Rt, G, G.labs, G.idx)"},{"path":"/reference/generic_smoother.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generic_smoother ‚Äî generic_smoother","text":"mt matrix: matrix containing filtered mean latent states time. row represent one variable. Ct array: 3D-array representing filtered covariance matrix latent states time. third dimension represent time index. matrix: matrix containing one-step-ahead mean latent states time based upon filtered mean. row represent one variable. Rt array: 3D-array representing one-step-ahead covariance matrix latent states time based upon filtered covariance matrix. third dimension represent time index. G array: 3D-array representing transition matrix model time. G.labs matrix: character matrix containing type associated value G. G.idx matrix: numeric matrix containing index associated value G.","code":""},{"path":"/reference/generic_smoother.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generic_smoother ‚Äî generic_smoother","text":"list containing smoothed mean (mts) covariance (Cts) latent states time. dimension follows, respectively, dimensions mt Ct.","code":""},{"path":"/reference/generic_smoother.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"generic_smoother ‚Äî generic_smoother","text":"models covered package, always assume latent states Multivariate Normal distribution. assumption, can use Kalman Smoother algorithm calculate posterior states time, given everything observed (assuming already know filtered distribution states). details implementation see ArtigoPacote;textualkDGLM. details algorithm implemented see ArtigokParametrico;textualkDGLM, Petris-DLM;textualkDGLM, chapter 2, WestHarr-DLM;textualkDGLM, chapter 4, Kalman_filter_origins;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/ginv.html","id":null,"dir":"Reference","previous_headings":"","what":"ginv ‚Äî ginv","title":"ginv ‚Äî ginv","text":"function receives covariance matrix S calculates generalized inverse S.","code":""},{"path":"/reference/ginv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ginv ‚Äî ginv","text":"","code":"ginv(S)"},{"path":"/reference/ginv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ginv ‚Äî ginv","text":"S covariance matrix","code":""},{"path":"/reference/harmonic_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural blocks for seasonal trends and regressions ‚Äî harmonic_block","title":"Structural blocks for seasonal trends and regressions ‚Äî harmonic_block","text":"Creates structure harmonic block desired periodicity.","code":""},{"path":"/reference/harmonic_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural blocks for seasonal trends and regressions ‚Äî harmonic_block","text":"","code":"harmonic_block(   ...,   period,   order = 1,   name = \"Var.Sazo\",   D = 1,   h = 0,   H = 0,   a1 = 0,   R1 = 4,   monitoring = rep(FALSE, order * 2) )  har(period, order = 1, D = 0.98, a1 = 0, R1 = 4, name = \"Var.Sazo\", X = 1)"},{"path":"/reference/harmonic_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural blocks for seasonal trends and regressions ‚Äî harmonic_block","text":"... Named values planning matrix. period Positive integer: size harmonic cycle. order Positive integer: order harmonic structure. name String: optional argument providing name block. Can useful identify models meaningful labels, also, name used used auxiliary functions. D Array, Matrix, vector scalar: values discount factors associated latent states time. D array, dimensions (2n) x (2n) x t, n order harmonic block t length outcomes. D matrix, dimensions (2n) x (2n) discount matrix used observations. D vector, size t interpreted discount factor observed time (discount variable). D scalar, discount used latent states times. h Matrix, vector scalar: drift add temporal evolution (can interpreted mean random noise time). matrix, dimension (2n) x t, n order harmonic_block t length series. vector, size t, value applied first latent state (one affects linear predictors) respective time. scalar, passed value used first latent state time. H Array, Matrix, vector scalar: values covariance matrix noise factor time. H array, dimensions (2n) x (2n) x t, n order harmonic block t length series. H matrix, dimensions (2n) x (2n) values used time. H vector scalar, discount factor matrix created diagonal matrix values H diagonal. a1 Vector scalar: prior mean latent states associated block time 1. a1 vector, dimension equal two times order harmonic block. a1 scalar, value used latent states. R1 Matrix, vector scalar: prior covariance matrix latent states associated block time 1. R1 matrix, dimensions (2n) x (2n). R1 vector scalar, covariance matrix created diagonal matrix values R1 diagonal. monitoring Vector: vector flags indicating variables monitored (automated monitoring used). size 2n. default first order component structure monitored. X Vector scalar: argument providing values covariate X_t.","code":""},{"path":"/reference/harmonic_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural blocks for seasonal trends and regressions ‚Äî harmonic_block","text":"dlm_block object containing following values: FF Array: 3D-array containing regression matrix time. dimension n x k x t, n number latent states, k number linear predictors model t time series length. FF.labs Matrix: n x k character matrix describing type value element FF. G Matrix: 3D-array containing evolution matrix time. dimension n x n x t, n number latent states t time series length. G.labs Matrix: n x n character matrix describing type value element G. G.idx Matrix: n x n character matrix containing index element G. D Array: 3D-array containing discount factor matrix time. dimension n x n x t, n number latent states t time series length. h Matrix: mean random noise temporal evolution. dimension n x t. H Array: 3D-array containing covariance matrix noise time. dimension D. a1 Vector: prior mean latent vector. R1 Matrix: prior covariance matrix latent vector. var.names list: list containing variables indexes name. period Positive integer: argument. n Positive integer: number latent states associated block (2). t Positive integer: number time steps associated block. 1, block compatible blocks time length, t greater 1, block can used blocks time length. k Positive integer: number outcomes associated block. block can used blocks outcome length. pred.names Vector: name linear predictors associated block. monitoring Vector: argument. type Character: type block (Harmonic).","code":""},{"path":"/reference/harmonic_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural blocks for seasonal trends and regressions ‚Äî harmonic_block","text":"..., D, H, a1 R1 arguments, user may set one values string. , user leave block partially undefined. user must pass undefined parameter values named arguments fit_model function. Also, multiple values can passed, allowing sensitivity analysis value parameter. details implementation see ArtigoPacote;textualkDGLM. details modelling seasonal trends using harmonics context DLM's, see WestHarr-DLM;textualkDGLM, chapter 8. details dynamic regression models context DLM's, see WestHarr-DLM;textualkDGLM, chapters 6 9.","code":""},{"path":[]},{"path":[]},{"path":"/reference/harmonic_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural blocks for seasonal trends and regressions ‚Äî harmonic_block","text":"","code":"# Creating seasonal structure for a model with 2 outcomes. # One block is created for each outcome # with each block being associated with only one of the outcomes. season.1 <- harmonic_block(alpha1 = 1, period = 3) season.2 <- harmonic_block(alpha2 = 1, period = 6)  # Creating a block with shared effect between the outcomes season.3 <- harmonic_block(alpha = 1, alpha2 = 1, period = 12)"},{"path":"/reference/if.na.html","id":null,"dir":"Reference","previous_headings":"","what":"if.na ‚Äî if.na","title":"if.na ‚Äî if.na","text":"function wrapper ifelse(.na(vec),vec,val)","code":""},{"path":"/reference/if.na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"if.na ‚Äî if.na","text":"","code":"if.na(vec, val)"},{"path":"/reference/if.na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"if.na ‚Äî if.na","text":"vec vector matrix. val value replace NA .","code":""},{"path":"/reference/if.na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"if.na ‚Äî if.na","text":"vector matrix dimensions input, NA values replaced specified val argument.","code":""},{"path":"/reference/if.nan.html","id":null,"dir":"Reference","previous_headings":"","what":"if.nan ‚Äî if.nan","title":"if.nan ‚Äî if.nan","text":"function wrapper ifelse(.nan(vec),vec,val)","code":""},{"path":"/reference/if.nan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"if.nan ‚Äî if.nan","text":"","code":"if.nan(vec, val)"},{"path":"/reference/if.nan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"if.nan ‚Äî if.nan","text":"vec vector matrix. val value replace NaN .","code":""},{"path":"/reference/if.nan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"if.nan ‚Äî if.nan","text":"vector matrix dimensions input, NaN values replaced specified val argument.","code":""},{"path":"/reference/if.null.html","id":null,"dir":"Reference","previous_headings":"","what":"if.null ‚Äî if.null","title":"if.null ‚Äî if.null","text":"function wrapper ifelse(.null(.),.,.)","code":""},{"path":"/reference/if.null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"if.null ‚Äî if.null","text":"","code":"if.null(vec, val)"},{"path":"/reference/if.null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"if.null ‚Äî if.null","text":"vec vector matrix. val value replace NULL .","code":""},{"path":"/reference/if.null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"if.null ‚Äî if.null","text":"vector matrix dimensions input, NULL values replaced specified val argument.","code":""},{"path":"/reference/intervention.html","id":null,"dir":"Reference","previous_headings":"","what":"An auxiliary function for model intervention ‚Äî intervention","title":"An auxiliary function for model intervention ‚Äî intervention","text":"function adds timely modifications dlm_block, specified time model override usual value variable value chosen user.","code":""},{"path":"/reference/intervention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An auxiliary function for model intervention ‚Äî intervention","text":"","code":"intervention(   block,   time,   var.index = 1:block$n,   FF = NULL,   D = NULL,   h = NULL,   H = NULL,   G = NULL )"},{"path":"/reference/intervention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An auxiliary function for model intervention ‚Äî intervention","text":"block dlm_block: block add intervention. time Vector: sequence integers indicating time intervention. var.index Vector: sequence integers indicating variables modified intervention. FF Array: n x k x t array modified FF used intervention, n length var.index, k number linear predictors block t size time (can omitted time scalar). D Array: n x n x t array modified D used intervention, n length var.index t size time (can omitted time scalar). h matrix: n x t matrix modified h used intervention, n length var.index t size time (can omitted time scalar). H Array: n x n x t array modified H used intervention, n length var.index t size time (can omitted time scalar). G Array: n x n x t array modified G used intervention, n length var.index t size time (can omitted time scalar).","code":""},{"path":"/reference/intervention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An auxiliary function for model intervention ‚Äî intervention","text":"dlm_block added intervention.","code":""},{"path":[]},{"path":"/reference/intervention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An auxiliary function for model intervention ‚Äî intervention","text":"","code":"data <- c(AirPassengers) # Adding an artificial change, so that we can make an intervention on the data at that point # Obviously, one should NOT change their own data. data[60:144] <- data[60:144] + 500  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  # Reducing the discount factor so that the model can capture the expected change. level <- level |> intervention(time = 60, H = 1, var.index = 1) # Comment the line above to see the fit without the intervention  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome )  plot(fitted.data, plot.pkg = \"base\")"},{"path":"/reference/joint_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint prior ‚Äî joint_prior","title":"Joint prior ‚Äî joint_prior","text":"Defines joint prior structural block.","code":""},{"path":"/reference/joint_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint prior ‚Äî joint_prior","text":"","code":"joint_prior(   block,   var.index = 1:block$n,   a1 = block$a1[var.index],   R1 = block$R1[var.index, var.index] )"},{"path":"/reference/joint_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint prior ‚Äî joint_prior","text":"block dlm_block object: structural block. var.index Integer: index variables set prior. a1 Numeric: prior mean. R1 Matrix: prior covariance matrix.","code":""},{"path":"/reference/joint_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint prior ‚Äî joint_prior","text":"dlm_block object desired prior.","code":""},{"path":"/reference/joint_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Joint prior ‚Äî joint_prior","text":"discount factor must variables whose prior modified. details implementation see ArtigoPacote;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/joint_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint prior ‚Äî joint_prior","text":"","code":"polynomial_block(mu = 1, D = 0.95) |>   block_mult(5) |>   joint_prior(var.index = 1:2, R1 = matrix(c(1, 0.5, 0.5, 1), 2, 2)) #> Mixed DLM block. #> latent states:  #>     Var.Poly.1: Level (1 variable(s)) #>     Var.Poly.2: Level (1 variable(s)) #>     Var.Poly.3: Level (1 variable(s)) #>     Var.Poly.4: Level (1 variable(s)) #>     Var.Poly.5: Level (1 variable(s)) #>  #> Linear predictors:  #>     mu.1 #>     mu.2 #>     mu.3 #>     mu.4 #>     mu.5 #>  #> Status: defined #> Serie length: 1 #> Interventions at:  #> Number of latent states: 5 #> Number of linear predictors: 5"},{"path":"/reference/kdglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting kDGLM models ‚Äî kdglm","title":"Fitting kDGLM models ‚Äî kdglm","text":"Fit model given structure observed data. function can used supported family (see vignette).","code":""},{"path":"/reference/kdglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting kDGLM models ‚Äî kdglm","text":"","code":"kdglm(formula, ..., family, data = NULL, offset = NULL, p.monit = NA)"},{"path":"/reference/kdglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting kDGLM models ‚Äî kdglm","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. ... Extra arguments, including extra formulas (multinomial case) extra parameters (normal gamma cases). family description error distribution used model. kdglm can character string naming family function family function. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment glm called. offset can used specify priori known component included linear predictor fitting. NULL numeric vector length equal number cases. One offset terms can included formula instead. p.monit numeric (optional): prior probability changes latent space variables part dynamic. used performing sensitivity analysis.","code":""},{"path":"/reference/kdglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting kDGLM models ‚Äî kdglm","text":"fitted_dlm object.","code":""},{"path":"/reference/kdglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting kDGLM models ‚Äî kdglm","text":"main function kDGLM package, used fit models. details implementation see  ArtigoPacote;textualkDGLM. details methodology see  ArtigokParametrico;textualkDGLM. details Dynamic Linear Models see  WestHarr-DLM;textualkDGLM Petris-DLM;textualkDGLM.","code":""},{"path":[]},{"path":"/reference/kdglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting kDGLM models ‚Äî kdglm","text":"","code":"# Poisson case fitted.data <- kdglm(c(AirPassengers) ~ pol(2) + har(12, order = 2), family = Poisson) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     c(AirPassengers): Poisson #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -582.8016 #> Interval Score        : 140.37692 #> Mean Abs. Scaled Error:   0.51246 #> --- plot(fitted.data, plot.pkg = \"base\")   ##################################################################  # Multinomial case chickenPox$Total <- rowSums(chickenPox[, c(2, 3, 4, 6, 5)]) chickenPox$Vaccine <- chickenPox$date >= as.Date(\"2013-09-01\") fitted.data <- kdglm(`< 5 year` ~ pol(2, D = 0.95) + har(12, D = 0.975) + noise(R1 = 0.1) + Vaccine,   `5 to 9 years` ~ pol(2, D = 0.95) + har(12, D = 0.975) + noise(R1 = 0.1) + Vaccine,   `10 to 14 years` ~ pol(2, D = 0.95) + har(12, D = 0.975) + noise(R1 = 0.1) + Vaccine,   `50 years or more` ~ pol(2, D = 0.95) + har(12, D = 0.975) + noise(R1 = 0.1) + Vaccine,   N = chickenPox$Total,   family = Multinom,   data = chickenPox ) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     chickenPox: Multinomial #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -2169.169 #> Interval Score        :  255.27963 #> Mean Abs. Scaled Error:    1.24724 #> --- plot(fitted.data, plot.pkg = \"base\")   ##################################################################  # Univariate Normal case fitted.data <- kdglm(corn.log.return ~ 1, V = ~1, family = Normal, data = cornWheat[1:500, ]) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     corn.log.return: Normal #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 1277.54 #> Interval Score        : 0.07564 #> Mean Abs. Scaled Error: 0.76327 #> --- plot(fitted.data, plot.pkg = \"base\")   ##################################################################  # Gamma case Y <- (cornWheat$corn.log.return[1:500] - mean(cornWheat$corn.log.return[1:500]))**2 fitted.data <- kdglm(Y ~ 1, phi = 0.5, family = Gamma, data = cornWheat) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     Y: Gamma #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 3508.409 #> Interval Score        : 0.00197 #> Mean Abs. Scaled Error: 0.93721 #> --- plot(fitted.data, plot.pkg = \"base\")"},{"path":"/reference/lcm.html","id":null,"dir":"Reference","previous_headings":"","what":"lcm ‚Äî lcm","title":"lcm ‚Äî lcm","text":"Calculates least common multiple set integer. Internal use .","code":""},{"path":"/reference/lcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lcm ‚Äî lcm","text":"","code":"lcm(x)"},{"path":"/reference/lcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lcm ‚Äî lcm","text":"x numeric: sequence integers.","code":""},{"path":"/reference/lcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lcm ‚Äî lcm","text":"least common multiple.","code":""},{"path":"/reference/Multinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinom outcome for kDGLM models ‚Äî Multinom","title":"Multinom outcome for kDGLM models ‚Äî Multinom","text":"Creates outcome Multinomial distribution chosen parameters.","code":""},{"path":"/reference/Multinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinom outcome for kDGLM models ‚Äî Multinom","text":"","code":"Multinom(p, data, offset = as.matrix(data)^0, base.class = NULL)"},{"path":"/reference/Multinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinom outcome for kDGLM models ‚Äî Multinom","text":"p character: vector name linear predictor associated probability category (except base one, assumed last). data vector: Values observed data. offset vector: offset observation. Must shape data. base.class character integer: name index base class. Default use last column data.","code":""},{"path":"/reference/Multinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinom outcome for kDGLM models ‚Äî Multinom","text":"object class dlm_distr","code":""},{"path":"/reference/Multinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multinom outcome for kDGLM models ‚Äî Multinom","text":"evaluating posterior parameters, use method proposed ArtigokParametrico;textualkDGLM. details implementation see  ArtigoPacote;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Multinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multinom outcome for kDGLM models ‚Äî Multinom","text":"","code":"structure <- (   polynomial_block(p = 1, order = 2, D = 0.95) +     harmonic_block(p = 1, period = 12, D = 0.975) +     noise_block(p = 1, R1 = 0.1) +     regression_block(p = chickenPox$date >= as.Date(\"2013-09-01\"))   # Vaccine was introduced in September of 2013 ) * 4  outcome <- Multinom(p = structure$pred.names, data = chickenPox[, c(2, 3, 4, 6, 5)]) fitted.data <- fit_model(structure, chickenPox = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     chickenPox: Multinomial #>  #> Static coeficients (smoothed): #>                  Estimate Std. Error   t value Pr(>|t|) #> Var.Reg.1         0.39743    0.25059  1.58601    0.113    #> Var.Reg.2         0.47441    0.26448  1.79376    0.073    #> Var.Reg.3         0.48811    0.28497  1.71284    0.087    #> Var.Reg.4        -0.26900    0.23557 -1.14192    0.253    #> --- #> Signif. codes:  0 ‚Äò***‚Äô 0.001 ‚Äò**‚Äô 0.01 ‚Äò*‚Äô 0.05 ‚Äò.‚Äô 0.1 ‚Äò ‚Äô 1 #>  #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -1952.613 #> Interval Score        : 165.55741 #> Mean Abs. Scaled Error:   0.77058 #> --- plot(fitted.data, plot.pkg = \"base\")"},{"path":"/reference/multi_normal_gamma_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"update_multi_NG_chol multi_normal_gamma_pred ‚Äî multi_normal_gamma_pred","title":"update_multi_NG_chol multi_normal_gamma_pred ‚Äî multi_normal_gamma_pred","text":"update_multi_NG_chol multi_normal_gamma_pred","code":""},{"path":"/reference/multi_normal_gamma_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_multi_NG_chol multi_normal_gamma_pred ‚Äî multi_normal_gamma_pred","text":"","code":"multi_normal_gamma_pred(   conj.param,   outcome = NULL,   parms = list(),   pred.cred = 0.95 )"},{"path":"/reference/multi_normal_gamma_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_multi_NG_chol multi_normal_gamma_pred ‚Äî multi_normal_gamma_pred","text":"conj.param list data.frame: parameters conjugated distribution (Normal-Gamma) linear predictor. outcome numeric matrix (optional): observed values current time. parms list (optional): list extra parameters model. used function. pred.cred numeric: desired credibility credibility interval.","code":""},{"path":"/reference/multi_normal_gamma_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_multi_NG_chol multi_normal_gamma_pred ‚Äî multi_normal_gamma_pred","text":"list containing following values: pred numeric/matrix: mean predictive distribution next observation. type shape parameter model. var.pred numeric/matrix: variance predictive distribution next observation. type shape parameter model. icl.pred numeric/matrix: percentile 100*((1-pred.cred)/2) icu.pred numeric/matrix: percentile 100*(1-(1-pred.cred)/2) log.like numeric: log likelihood outcome given conjugated parameters.","code":""},{"path":[]},{"path":"/reference/multnom_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"multnom_pred ‚Äî multnom_pred","title":"multnom_pred ‚Äî multnom_pred","text":"Calculate values predictive distribution given values parameter conjugated distribution linear predictor. data assumed Multinomial distribution known number trial N probability vector distribution Dirichlet parameters alpha_i. scenario, marginal distribution data Dirichlet-Multinomial parameters N alpha_i.","code":""},{"path":"/reference/multnom_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multnom_pred ‚Äî multnom_pred","text":"","code":"multnom_pred(conj.param, outcome, parms = list(), pred.cred = 0.95)"},{"path":"/reference/multnom_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multnom_pred ‚Äî multnom_pred","text":"conj.param List data.frame: parameters conjugated distributions linear predictor. outcome Vector matrix: observed values current time. value passed used compute N. parms List (optional): list extra parameters model. used function. pred.cred Numeric: desired credibility credibility interval.","code":""},{"path":"/reference/multnom_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multnom_pred ‚Äî multnom_pred","text":"list containing following values: pred vector/matrix: mean predictive distribution next observation. type shape parameter model. var.pred vector/matrix: variance predictive distribution next observation. type shape parameter model. icl.pred vector/matrix: percentile 100*((1-pred.cred)/2) icu.pred vector/matrix: percentile 100*(1-(1-pred.cred)/2) log.like vector: log likelihood outcome given conjugated parameters.","code":""},{"path":[]},{"path":"/reference/noise_block.html","id":null,"dir":"Reference","previous_headings":"","what":"noise_block ‚Äî noise_block","title":"noise_block ‚Äî noise_block","text":"Creates structure Noise block. block represents independent random noise added linear predictor. variance noise formally estimated, use discount strategy similar WestHarr-DLM;textualkDGLM specify .","code":""},{"path":"/reference/noise_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"noise_block ‚Äî noise_block","text":"","code":"noise_block(..., name = \"Noise\", D = 0.99, R1 = 0.1, H = 0)  noise(name = \"Noise\", D = 0.99, R1 = 0.1, H = 0, X = 1)"},{"path":"/reference/noise_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"noise_block ‚Äî noise_block","text":"... Named values planning matrix. name String: optional argument providing name block. Can useful identify models meaningful labels, also, name used used auxiliary functions. D scalar vector: sequence values specifying desired discount factor time. length 1 t, t size series. D H specified, value D ignored. R1 scalar: prior variance noise. H scalar: variance noise. D H specified, value D ignored. X Vector scalar: argument providing values covariate X_t.","code":""},{"path":"/reference/noise_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"noise_block ‚Äî noise_block","text":"dlm_block object containing following values: FF Array: 3D-array containing regression matrix time. dimension n x k x t, n number latent states, k number linear predictors model t time series length. FF.labs Matrix: n x k character matrix describing type value element FF. G Matrix: 3D-array containing evolution matrix time. dimension n x n x t, n number latent states t time series length. G.labs Matrix: n x n character matrix describing type value element G. D Array: 3D-array containing discount factor matrix time. dimension n x n x t, n number latent states t time series length. H Array: 3D-array containing covariance matrix noise time. dimension D. a1 Vector: prior mean latent vector. R1 Matrix: prior covariance matrix latent vector. var.names list: list containing variables indexes name. order Positive integer: argument. n Positive integer: number latent states associated block (2). t Positive integer: number time steps associated block. 1, block compatible blocks time length, t greater 1, block can used blocks time length. k Positive integer: number outcomes associated block. block can used blocks outcome length. pred.names Vector: name linear predictors associated block. monitoring Vector: combination monitoring, monitoring monitoring.pulse. type Character: type block (Noise).","code":""},{"path":"/reference/noise_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"noise_block ‚Äî noise_block","text":"details implementation see ArtigoPacote;textualkDGLM. details dynamic regression models context DLMs, see WestHarr-DLM;textualkDGLM, chapters 6 9.","code":""},{"path":[]},{"path":[]},{"path":"/reference/noise_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"noise_block ‚Äî noise_block","text":"","code":"noise_block(mu = 1, D = 0.99, R1 = 1e-2) #> Noise DLM block. #> latent states:  #>     Noise: Var (1 variable(s)) #>  #> Linear predictors:  #>     mu #>  #> Status: defined #> Serie length: 1 #> Interventions at:  #> Number of latent states: 1 #> Number of linear predictors: 1"},{"path":"/reference/Normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Normal outcome for kDGLM models ‚Äî Normal","title":"Normal outcome for kDGLM models ‚Äî Normal","text":"Creates outcome Normal distribution chosen parameters (can specify 2).","code":""},{"path":"/reference/Normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normal outcome for kDGLM models ‚Äî Normal","text":"","code":"Normal(mu, V = NA, Tau = NA, Sd = NA, data)"},{"path":"/reference/Normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normal outcome for kDGLM models ‚Äî Normal","text":"mu character: Name linear predictor associated mean parameter Normal distribution. parameter treated unknown equal associated linear predictor. V character numeric: V character, interpreted names linear predictors associated variance parameter Normal distribution. V numeric, variance considered known equal value V, otherwise, variance considered unknown equal exponential linear predictor informed V. outcome Multivariate Normal, V must matrix , variance unknown, elements outside main diagonal treated linear predictor associated correlation coordinate outcome, otherwise V treated covariance matrix. user specify V Tau Sd. Tau character numeric: Tau character, interpreted names linear predictors associated precisions parameter Normal distribution. Tau numeric, precision considered known equal value Tau, otherwise, precision considered unknown equal exponential linear predictor informed Tau. outcome Multivariate Normal, Tau must matrix , precision unknown, elements outside main diagonal treated linear predictor associated correlation coordinate outcome, otherwise Tau treated precision matrix. user specify Tau V Sd. Sd character numeric: Sd character, interpreted names linear predictors associated standard deviation parameter Normal distribution. Sd numeric, standard deviation considered known equal value Sd, otherwise, precision considered unknown equal exponential linear predictor informed Sd. outcome Multivariate Normal, Tau must matrix elements outside main diagonal treated correlation (name linear predictor associated) coordinate outcome. user specify Sd V Tau. data numeric: Values observed data.","code":""},{"path":"/reference/Normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normal outcome for kDGLM models ‚Äî Normal","text":"object class dlm_distr","code":""},{"path":"/reference/Normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normal outcome for kDGLM models ‚Äî Normal","text":"V/Sigma/Tau/Sd string, use method proposed ArtigokParametrico;textualkDGLM. Otherwise, V/Sigma/Tau/Sd numeric, follow theory presented WestHarr-DLM;textualkDGLM. details implementation see  ArtigoPacote;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normal outcome for kDGLM models ‚Äî Normal","text":"","code":"# Univariate Normal case structure <- polynomial_block(mu = 1, D = 0.95) +   polynomial_block(V = 1, D = 0.95)  outcome <- Normal(mu = \"mu\", V = \"V\", data = cornWheat$corn.log.return[1:500]) fitted.data <- fit_model(structure, corn = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     corn: Normal #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 1277.54 #> Interval Score        : 0.07564 #> Mean Abs. Scaled Error: 0.76327 #> --- plot(fitted.data, plot.pkg = \"base\")   # Bivariate Normal case structure <- (polynomial_block(mu = 1, D = 0.95) +   polynomial_block(V = 1, D = 0.95)) * 2 +   polynomial_block(rho = 1, D = 0.95)  outcome <- Normal(   mu = c(\"mu.1\", \"mu.2\"),   V = matrix(c(\"V.1\", \"rho\", \"rho\", \"V.2\"), 2, 2),   data = cornWheat[1:500, c(4, 5)] ) fitted.data <- fit_model(structure, cornWheat = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     cornWheat: Normal #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : 2557.802 #> Interval Score        : 0.07505 #> Mean Abs. Scaled Error: 0.74750 #> --- plot(fitted.data, plot.pkg = \"base\")"},{"path":"/reference/normal_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"normal_pred ‚Äî normal_pred","title":"normal_pred ‚Äî normal_pred","text":"Calculate values predictive distribution given values parameter conjugated distribution linear predictor. data assumed Normal distribution known variance mean distribution Normal. scenario, marginal distribution data also Normal.","code":""},{"path":"/reference/normal_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"normal_pred ‚Äî normal_pred","text":"","code":"normal_pred(conj.param, outcome = NULL, parms = list(), pred.cred = 0.95)"},{"path":"/reference/normal_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"normal_pred ‚Äî normal_pred","text":"conj.param list data.frame: parameters conjugated distributions linear predictor. outcome numeric matrix (optional): observed values current time. used function. parms list: list extra parameters model. function, must contain observational covariance matrix, V pred.cred numeric: desired credibility credibility interval.","code":""},{"path":"/reference/normal_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"normal_pred ‚Äî normal_pred","text":"list containing following values: pred numeric/matrix: mean predictive distribution next observation. type shape parameter model. var.pred numeric/matrix: variance predictive distribution next observation. type shape parameter model. icl.pred numeric/matrix: percentile 100*((1-pred.cred)/2) icu.pred numeric/matrix: percentile 100*(1-(1-pred.cred)/2) log.like numeric: log likelihood outcome given conjugated parameters.","code":""},{"path":[]},{"path":"/reference/noticeSARI.html","id":null,"dir":"Reference","previous_headings":"","what":"SARI data from Belo Horizonte ‚Äî noticeSARI","title":"SARI data from Belo Horizonte ‚Äî noticeSARI","text":"dataset containing reports Severe Acute Respiratory Illness (SARI) 2020 April 2022 week.","code":""},{"path":"/reference/noticeSARI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SARI data from Belo Horizonte ‚Äî noticeSARI","text":"","code":"noticeSARI"},{"path":"/reference/noticeSARI.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SARI data from Belo Horizonte ‚Äî noticeSARI","text":"data frame 65404 rows 7 variables: ref.week reference week, counting since monitoring begun. reported.1.week number cases occurred period reported 1 week reference week. reported.2.week number cases occurred period reported 2 weeks reference week. reported.4.week number cases occurred period reported 4 weeks reference week. reported.6.week number cases occurred period reported 6 weeks reference week. reported.8.week number cases occurred period reported 8 weeks reference week. reported.12.week number cases occurred period reported 12 weeks reference week. occured total number cases reported (time).","code":""},{"path":"/reference/noticeSARI.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SARI data from Belo Horizonte ‚Äî noticeSARI","text":"https://datasus.saude.gov.br/informacoes-de-saude-tabnet/","code":""},{"path":"/reference/plot.dlm_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizing latent states in a fitted kDGLM model ‚Äî plot.dlm_coef","title":"Visualizing latent states in a fitted kDGLM model ‚Äî plot.dlm_coef","text":"Visualizing latent states fitted kDGLM model","code":""},{"path":"/reference/plot.dlm_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizing latent states in a fitted kDGLM model ‚Äî plot.dlm_coef","text":"","code":"# S3 method for class 'dlm_coef' plot(   x,   var = rownames(x$theta.mean)[x$dynamic],   cutoff = floor(t/10),   pred.cred = 0.95,   plot.pkg = \"auto\",   ... )"},{"path":"/reference/plot.dlm_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizing latent states in a fitted kDGLM model ‚Äî plot.dlm_coef","text":"x dlm_coef object: coefficients fitted DGLM model. var character: name variables plot (value passed creating structure). variable whose name partially match variable plotted. cutoff integer: number initial steps skipped plot. Usually, model still learning initial steps, estimated values reliable. pred.cred numeric: credibility value credibility interval. plot.pkg character: flag indicating plot produced. one 'auto', 'base', 'ggplot2' 'plotly'. ... Extra arguments passed plot method.","code":""},{"path":"/reference/plot.dlm_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizing latent states in a fitted kDGLM model ‚Äî plot.dlm_coef","text":"ggplot plotly object: plot showing predictive mean credibility interval observed data.","code":""},{"path":[]},{"path":"/reference/plot.dlm_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizing latent states in a fitted kDGLM model ‚Äî plot.dlm_coef","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome )  model.coef <- coef(fitted.data)  plot(model.coef)$plot #> NULL"},{"path":"/reference/plot.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizing a fitted kDGLM model ‚Äî plot.fitted_dlm","title":"Visualizing a fitted kDGLM model ‚Äî plot.fitted_dlm","text":"Calculate predictive mean quantile observed data show plot.","code":""},{"path":"/reference/plot.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizing a fitted kDGLM model ‚Äî plot.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' plot(   x,   outcomes = NULL,   latent.states = NULL,   linear.predictors = NULL,   pred.cred = 0.95,   lag = NA,   cutoff = floor(x$t/10),   plot.pkg = \"auto\",   ... )"},{"path":"/reference/plot.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizing a fitted kDGLM model ‚Äî plot.fitted_dlm","text":"x fitted_dlm object: fitted DGLM. outcomes character: name outcomes plot. latent.states character: name latent states plot. linear.predictors character: name linear predictors plot. pred.cred numeric: credibility value credibility interval. lag integer: number steps ahead used prediction. lag<0, smoothed distribution used , lag==0, filtered interval.score used. cutoff integer: number initial steps skipped plot. Usually, model still learning initial steps, predictions reliable. plot.pkg character: flag indicating plot produced. one 'auto', 'base', 'ggplot2' 'plotly'. ... Extra arguments passed plot method.","code":""},{"path":"/reference/plot.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizing a fitted kDGLM model ‚Äî plot.fitted_dlm","text":"ggplot plotly object: plot showing predictive mean credibility interval observed data.","code":""},{"path":[]},{"path":"/reference/plot.fitted_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizing a fitted kDGLM model ‚Äî plot.fitted_dlm","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome )  plot(fitted.data, plot.pkg = \"base\")"},{"path":"/reference/plus-.dlm_block.html","id":null,"dir":"Reference","previous_headings":"","what":"+.fitted_dlm ‚Äî +.dlm_block","title":"+.fitted_dlm ‚Äî +.dlm_block","text":"Define add operator class dlm_block. method wrapper block_superpos function.","code":""},{"path":"/reference/plus-.dlm_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"+.fitted_dlm ‚Äî +.dlm_block","text":"","code":"# S3 method for class 'dlm_block' e1 + e2"},{"path":"/reference/plus-.dlm_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"+.fitted_dlm ‚Äî +.dlm_block","text":"e1 dlm_block. e2 dlm_block.","code":""},{"path":"/reference/plus-.dlm_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"+.fitted_dlm ‚Äî +.dlm_block","text":"combined blocks dlm_block.","code":""},{"path":[]},{"path":"/reference/Poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson outcome for kDGLM models ‚Äî Poisson","title":"Poisson outcome for kDGLM models ‚Äî Poisson","text":"Creates outcome Poisson distribution chosen parameter.","code":""},{"path":"/reference/Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson outcome for kDGLM models ‚Äî Poisson","text":"","code":"Poisson(lambda, data, offset = as.matrix(data)^0)"},{"path":"/reference/Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson outcome for kDGLM models ‚Äî Poisson","text":"lambda character: name linear predictor associated rate (mean) parameter Poisson distribution. parameter treated unknown equal exponential associated linear predictor. data numeric: values observed data. offset numeric: offset observation. Must shape data.","code":""},{"path":"/reference/Poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson outcome for kDGLM models ‚Äî Poisson","text":"object class dlm_distr","code":""},{"path":"/reference/Poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson outcome for kDGLM models ‚Äî Poisson","text":"evaluating posterior parameters, use method proposed ArtigokParametrico;textualkDGLM. details implementation see  ArtigoPacote;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson outcome for kDGLM models ‚Äî Poisson","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, D = 0.95, order = 2) season <- harmonic_block(rate = 1, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data = data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     AirPassengers: Poisson #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -625.2975 #> Interval Score        : 138.36923 #> Mean Abs. Scaled Error:   0.68377 #> ---  plot(fitted.data, plot.pkg = \"base\")"},{"path":"/reference/poisson_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"poisson_pred ‚Äî poisson_pred","title":"poisson_pred ‚Äî poisson_pred","text":"Calculate values predictive distribution given values parameter conjugated distribution linear predictor. data assumed Poisson distribution mean distribution Gamma shape parameter e rate parameter b. scenario, marginal distribution data Negative Binomial dispersion parameter b/(b+1) probability.","code":""},{"path":"/reference/poisson_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"poisson_pred ‚Äî poisson_pred","text":"","code":"poisson_pred(conj.param, outcome = NULL, parms = list(), pred.cred = 0.95)"},{"path":"/reference/poisson_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"poisson_pred ‚Äî poisson_pred","text":"conj.param list data.frame: parameters conjugated distributions linear predictor. outcome numeric matrix (optional): observed values current time. used function. parms list (optional): list extra parameters model. used function. pred.cred numeric: desired credibility credibility interval.","code":""},{"path":"/reference/poisson_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"poisson_pred ‚Äî poisson_pred","text":"list containing following values: pred numeric/matrix: mean predictive distribution next observation. type shape parameter model. var.pred numeric/matrix: variance predictive distribution next observation. type shape parameter model. icl.pred numeric/matrix: percentile 100*((1-pred.cred)/2) icu.pred numeric/matrix: percentile 100*(1-(1-pred.cred)/2) log.like numeric: log likelihood outcome given conjugated parameters.","code":""},{"path":[]},{"path":"/reference/polynomial_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural blocks for polynomial trends and regressions ‚Äî polynomial_block","title":"Structural blocks for polynomial trends and regressions ‚Äî polynomial_block","text":"Creates structure polynomial block desired order.","code":""},{"path":"/reference/polynomial_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural blocks for polynomial trends and regressions ‚Äî polynomial_block","text":"","code":"polynomial_block(   ...,   order = 1,   name = \"Var.Poly\",   D = 1,   h = 0,   H = 0,   a1 = 0,   R1 = c(9, rep(1, order - 1)),   monitoring = c(TRUE, rep(FALSE, order - 1)) )  pol(order = 1, D = 0.95, a1 = 0, R1 = 9, name = \"Var.Poly\", X = 1)"},{"path":"/reference/polynomial_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural blocks for polynomial trends and regressions ‚Äî polynomial_block","text":"... Named values planning matrix. order Positive integer: order polynomial structure. name String: optional argument providing name block. Can useful identify models meaningful labels, also, name used used auxiliary functions. D Array, Matrix, vector scalar: values discount factors associated latent states time. D array, dimensions n x n x t, n order polynomial block t length outcomes. D matrix, dimensions n x n discount matrix used observations. D vector, size t interpreted discount factor observed time (discount variable). D scalar, discount used latent states times. h Matrix, vector scalar: drift add temporal evolution (can interpreted mean random noise time). matrix, dimension n x t, n number latent states (.e., order) t length series. vector, size t, value applied first latent state (one affects linear predictors) respective time. scalar, passed value used first latent state time. H Array, Matrix, vector scalar: values covariance matrix noise factor time. H array, dimensions n x n x t, n order polynomial block t length series. H matrix, dimensions n x n values used time. H vector scalar, discount factor matrix created diagonal matrix values H diagonal. a1 Vector scalar: prior mean latent states associated block time 1. a1 vector, dimension equal order polynomial block. a1 scalar, value used latent states. R1 Matrix, vector scalar: prior covariance matrix latent states associated block time 1. R1 matrix, dimensions n x n. R1 vector scalar, covariance matrix created diagonal matrix values R1 diagonal. monitoring Vector: vector flags indicating variables monitored (automated monitoring used). size n. default first order component structure monitored. X Vector scalar: argument providing values covariate X_t.","code":""},{"path":"/reference/polynomial_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural blocks for polynomial trends and regressions ‚Äî polynomial_block","text":"dlm_block object containing following values: FF Array: 3D-array containing regression matrix time. dimension n x k x t, n number latent states, k number linear predictors model t time series length. FF.labs Matrix: n x k character matrix describing type value element FF. G Matrix: 3D-array containing evolution matrix time. dimension n x n x t, n number latent states t time series length. G.labs Matrix: n x n character matrix describing type value element G. G.idx Matrix: n x n character matrix containing index element G. D Array: 3D-array containing discount factor matrix time. dimension n x n x t, n number latent states t time series length. h Matrix: mean random noise temporal evolution. dimension n x t. H Array: 3D-array containing covariance matrix noise time. dimension D. a1 Vector: prior mean latent vector. R1 Matrix: prior covariance matrix latent vector. var.names list: list containing variables indexes name. order Positive integer: argument. n Positive integer: number latent states associated block (value order). t Positive integer: number time steps associated block. 1, block compatible blocks time length, t greater 1, block can used blocks time length. k Positive integer: number outcomes associated block. block can used blocks outcome length. pred.names Vector: name linear predictors associated block. monitoring Vector: argument. type Character: type block (polynomial).","code":""},{"path":"/reference/polynomial_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural blocks for polynomial trends and regressions ‚Äî polynomial_block","text":"..., D, H, a1 R1 arguments, user may set one values string. , user leave block partially undefined. user must pass undefined parameter values named arguments fit_model function. Also, multiple values can passed, allowing sensitivity analysis value parameter. details implementation see ArtigoPacote;textualkDGLM. details polynomial trend context DLM's, see WestHarr-DLM;textualkDGLM, chapter 7. details dynamic regression models context DLM's, see WestHarr-DLM;textualkDGLM, chapters 6 9.","code":""},{"path":[]},{"path":[]},{"path":"/reference/polynomial_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural blocks for polynomial trends and regressions ‚Äî polynomial_block","text":"","code":"# Creating a first order structure for a model with 2 outcomes. # One block is created for each outcome # with each block being associated with only one of the outcomes. level.1 <- polynomial_block(alpha1 = 1, order = 1) level.2 <- polynomial_block(alpha2 = 1, order = 1)  # Creating a block with shared effect between the outcomes level.3 <- polynomial_block(alpha1 = 1, alpha2 = 1, order = 2)"},{"path":"/reference/print.dlm_block.html","id":null,"dir":"Reference","previous_headings":"","what":"print.dlm_block ‚Äî print.dlm_block","title":"print.dlm_block ‚Äî print.dlm_block","text":"method wrapper summary.dlm_block function.","code":""},{"path":"/reference/print.dlm_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.dlm_block ‚Äî print.dlm_block","text":"","code":"# S3 method for class 'dlm_block' print(x, ...)"},{"path":"/reference/print.dlm_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.dlm_block ‚Äî print.dlm_block","text":"x dlm_block object. ... Arguments passed summary.dlm_block","code":""},{"path":"/reference/print.dlm_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.dlm_block ‚Äî print.dlm_block","text":"return value, called print summary kDGLM structure.","code":""},{"path":[]},{"path":"/reference/print.dlm_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"print.dlm_distr ‚Äî print.dlm_distr","title":"print.dlm_distr ‚Äî print.dlm_distr","text":"method wrapper summary.dlm_distr function.","code":""},{"path":"/reference/print.dlm_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.dlm_distr ‚Äî print.dlm_distr","text":"","code":"# S3 method for class 'dlm_distr' print(x, ...)"},{"path":"/reference/print.dlm_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.dlm_distr ‚Äî print.dlm_distr","text":"x dlm_distr object. ... Arguments passed summary.dlm_distr","code":""},{"path":"/reference/print.dlm_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.dlm_distr ‚Äî print.dlm_distr","text":"return value, called print summary kDGLM outcome.","code":""},{"path":[]},{"path":"/reference/print.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"print.fitted_dlm ‚Äî print.fitted_dlm","title":"print.fitted_dlm ‚Äî print.fitted_dlm","text":"method wrapper summary.fitted_dlm methdd.","code":""},{"path":"/reference/print.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.fitted_dlm ‚Äî print.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' print(x, ...)"},{"path":"/reference/print.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.fitted_dlm ‚Äî print.fitted_dlm","text":"x fitted_dlm object. ... Arguments passed summary.fitted_dlm","code":""},{"path":"/reference/print.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.fitted_dlm ‚Äî print.fitted_dlm","text":"return value, called print summary fitted kDGLM model.","code":""},{"path":[]},{"path":"/reference/print.searched_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"print.searched_dlm ‚Äî print.searched_dlm","title":"print.searched_dlm ‚Äî print.searched_dlm","text":"method wrapper block_superpos function.","code":""},{"path":"/reference/print.searched_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.searched_dlm ‚Äî print.searched_dlm","text":"","code":"# S3 method for class 'searched_dlm' print(x, ...)"},{"path":"/reference/print.searched_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.searched_dlm ‚Äî print.searched_dlm","text":"x searched_dlm object. ... Arguments passed summary.searched_dlm","code":""},{"path":"/reference/print.searched_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.searched_dlm ‚Äî print.searched_dlm","text":"return value, called print summary searched_dlm object.","code":""},{"path":[]},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. generics forecast, specify stats simulate","code":""},{"path":"/reference/regression_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural blocks for regressions ‚Äî regression_block","title":"Structural blocks for regressions ‚Äî regression_block","text":"Creates block (dynamic) regression covariate X_t.","code":""},{"path":"/reference/regression_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural blocks for regressions ‚Äî regression_block","text":"","code":"regression_block(   ...,   max.lag = 0,   zero.fill = TRUE,   name = \"Var.Reg\",   D = 1,   h = 0,   H = 0,   a1 = 0,   R1 = 9,   monitoring = rep(FALSE, max.lag + 1) )  reg(   X,   max.lag = 0,   zero.fill = TRUE,   D = 0.95,   a1 = 0,   R1 = 9,   name = \"Var.Reg\" )"},{"path":"/reference/regression_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural blocks for regressions ‚Äî regression_block","text":"... Named values planning matrix. max.lag Non-negative integer: optional argument providing maximum lag explanatory variables. positive value provided, block create additional latent states measure lagged effect X_t given value. See WestHarr-DLM;textualkDGLM, subsection 9.2.2 item (3). zero.fill boolean: Boolean indicating block fill initial delay values 0's. TRUE max.lag positive, block assumes X_t=0 t<1. FALSE, block assumes user provide X_t t, X_t size t+propagation_size name String: optional argument providing name block. Can useful identify models meaningful labels, also, name used used auxiliary functions. D Array, Matrix, vector scalar: values discount factors time. D array, dimensions n x n x t, n order polynomial block t length outcomes. D matrix, dimensions n x n values used time. D vector scalar, discount factor matrix created diagonal matrix values D diagonal. h Matrix, vector scalar: drift add temporal evolution (can interpreted mean random noise time). matrix, dimension 2 x t, t length series. vector, size t, value applied first latent state (one affects linear predictors) respective time. scalar, passed value used first latent state time. H Array, Matrix, vector scalar: values covariance matrix noise factor time. H array, dimensions n x n x t, n order polynomial block t length outcomes. H matrix, dimensions n x n values used time. H vector scalar, discount factor matrix created diagonal matrix values H diagonal. a1 Vector scalar: prior mean latent states associated block time 1. a1 vector, dimension equal order polynomial block. a1 scalar, value used latent states. R1 Matrix, vector scalar: prior covariance matrix latent states associated block time 1. R1 matrix, dimensions n x n. R1 vector scalar, covariance matrix created diagonal matrix values R1 diagonal. monitoring Vector: vector flags indicating variables monitored (automated monitoring used). size n. default variable monitored. X Vector scalar: argument providing values covariate X_t.","code":""},{"path":"/reference/regression_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural blocks for regressions ‚Äî regression_block","text":"dlm_block object containing following values: FF Array: 3D-array containing regression matrix time. dimension n x k x t, n number latent states, k number linear predictors model t time series length. FF.labs Matrix: n x k character matrix describing type value element FF. G Matrix: 3D-array containing evolution matrix time. dimension n x n x t, n number latent states t time series length. G.labs Matrix: n x n character matrix describing type value element G. G.idx Matrix: n x n character matrix containing index element G. D Array: 3D-array containing discount factor matrix time. dimension n x n x t, n number latent states t time series length. h Matrix: mean random noise temporal evolution. dimension n x t. H Array: 3D-array containing covariance matrix noise time. dimension D. a1 Vector: prior mean latent vector. R1 Matrix: prior covariance matrix latent vector. var.names list: list containing variables indexes name. max.lag Positive integer: argument. n Positive integer: number latent states associated block (2). t Positive integer: number time steps associated block. 1, block compatible blocks time length, t greater 1, block can used blocks time length. k Positive integer: number outcomes associated block. block can used blocks outcome length. pred.names Vector: name linear predictors associated block. monitoring Vector: argument. type Character: type block (Harmonic).","code":""},{"path":"/reference/regression_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural blocks for regressions ‚Äî regression_block","text":"..., D, H, a1 R1 arguments, user may set one values string. , user leave block partially undefined. user must pass undefined parameter values named arguments fit_model function. Also, multiple values can passed, allowing sensitivity analysis value parameter. details implementation see ArtigoPacote;textualkDGLM. details dynamic regression models context DLM's, see WestHarr-DLM;textualkDGLM, chapters 6 9.","code":""},{"path":[]},{"path":[]},{"path":"/reference/regression_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural blocks for regressions ‚Äî regression_block","text":"","code":"structure <- (   polynomial_block(p = 1, order = 2, D = 0.95) +     harmonic_block(p = 1, period = 12, D = 0.95) +     regression_block(p = chickenPox$date >= as.Date(\"2013-09-01\"))   # Vaccine was introduced in September of 2013 ) * 4  outcome <- Multinom(p = structure$pred.names, data = chickenPox[, c(2, 3, 4, 6, 5)]) fitted.data <- fit_model(structure, chickenPox = outcome) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     chickenPox: Multinomial #>  #> Static coeficients (smoothed): #>                  Estimate Std. Error   t value Pr(>|t|) #> Var.Reg.1         0.32058    0.09625   3.33080 8.66e-04 ***  #> Var.Reg.2         0.53709    0.13266   4.04872 5.15e-05 ***  #> Var.Reg.3         0.47829    0.17849   2.67965    0.007 **  #> Var.Reg.4        -0.27518    0.10475  -2.62711    0.009 **  #> --- #> Signif. codes:  0 ‚Äò***‚Äô 0.001 ‚Äò**‚Äô 0.01 ‚Äò*‚Äô 0.05 ‚Äò.‚Äô 0.1 ‚Äò ‚Äô 1 #>  #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -1800.428 #> Interval Score        : 120.88889 #> Mean Abs. Scaled Error:   0.68065 #> --- plot(coef(fitted.data), plot.pkg = \"base\")"},{"path":"/reference/rmvnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"rmvnorm ‚Äî rmvnorm","title":"rmvnorm ‚Äî rmvnorm","text":"Obtains sample multivariate normal distribution.","code":""},{"path":"/reference/rmvnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rmvnorm ‚Äî rmvnorm","text":"","code":"rmvnorm(n, mu, Sigma, norm.x = matrnorm(k, n, seed = round(runif(1) * 1e+15)))"},{"path":"/reference/rmvnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rmvnorm ‚Äî rmvnorm","text":"n integer: sample size. mu numeric: mean vector Sigma matrix: Covariance matrix.","code":""},{"path":"/reference/rowQuantile.html","id":null,"dir":"Reference","previous_headings":"","what":"rowQuantile ‚Äî rowQuantile","title":"rowQuantile ‚Äî rowQuantile","text":"function calculates row-wise quantile matrix.","code":""},{"path":"/reference/rowQuantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rowQuantile ‚Äî rowQuantile","text":"","code":"rowQuantile(X, q)"},{"path":"/reference/rowQuantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rowQuantile ‚Äî rowQuantile","text":"X matrix. q numeric: number 0 1.","code":""},{"path":"/reference/rowQuantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rowQuantile ‚Äî rowQuantile","text":"numeric: chosen quantile row X.","code":""},{"path":"/reference/simulate.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw samples from the distribution of the latent states ‚Äî simulate.fitted_dlm","title":"Draw samples from the distribution of the latent states ‚Äî simulate.fitted_dlm","text":"function draws samples latent states using backward sampling algorithm. See WestHarr-DLM;textualkDGLM, chapter 15, details.","code":""},{"path":"/reference/simulate.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw samples from the distribution of the latent states ‚Äî simulate.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' simulate(object, nsim, seed = NULL, lag = -1, ...)"},{"path":"/reference/simulate.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw samples from the distribution of the latent states ‚Äî simulate.fitted_dlm","text":"object fitted_dlm: fitted model sample. nsim integer: number samples draw. seed integer: object specifying random number generator initialized. lag integer: relative offset forecast. Values time t calculated based filtered values time t-h. lag negative, smoothed distribution latent states used. ... Extra arguments passed plot method.","code":""},{"path":"/reference/simulate.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw samples from the distribution of the latent states ‚Äî simulate.fitted_dlm","text":"list containing following values: theta array: array containing sample latent states. Dimensions n x t x nsim, n number latent states model t number observed values. lambda array: array containing sample linear predictors. Dimensions k x t x nsim, k number linear predictors model t number observed values. param list: named list containing, model outcome, array samples parameters observational model. array dimensions l x t x nsim, l number parameters observational model t number observed values.","code":""},{"path":[]},{"path":"/reference/simulate.fitted_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw samples from the distribution of the latent states ‚Äî simulate.fitted_dlm","text":"","code":"structure <- polynomial_block(mu = 1, D = 0.95) +   polynomial_block(V = 1, D = 0.95)  outcome <- Normal(mu = \"mu\", V = \"V\", data = cornWheat$corn.log.return[1:500]) fitted.data <- fit_model(structure, corn = outcome)  sample <- simulate(fitted.data, 5000)"},{"path":"/reference/smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for model smoothing ‚Äî smoothing","title":"Auxiliary function for model smoothing ‚Äî smoothing","text":"Auxiliary function model smoothing","code":""},{"path":"/reference/smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for model smoothing ‚Äî smoothing","text":"","code":"smoothing(model)"},{"path":"/reference/smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for model smoothing ‚Äî smoothing","text":"model fitted_dlm object.","code":""},{"path":"/reference/smoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for model smoothing ‚Äî smoothing","text":"fitted_dlm object smoothed means (mts) covariance matrix (Cts) observation.","code":""},{"path":[]},{"path":"/reference/specify.dlm_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify method for dlm blocks ‚Äî specify.dlm_block","title":"Specify method for dlm blocks ‚Äî specify.dlm_block","text":"Sets values undefined parameters block passed user.","code":""},{"path":"/reference/specify.dlm_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify method for dlm blocks ‚Äî specify.dlm_block","text":"","code":"# S3 method for class 'dlm_block' specify(x, ...)"},{"path":"/reference/specify.dlm_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify method for dlm blocks ‚Äî specify.dlm_block","text":"x dlm_block: undefined dlm_block object undefined parameters shall substituted. ... set named values unknown parameter.","code":""},{"path":"/reference/specify.dlm_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify method for dlm blocks ‚Äî specify.dlm_block","text":"initual block, undefined parameters set chosen values.","code":""},{"path":[]},{"path":"/reference/specify.dlm_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify method for dlm blocks ‚Äî specify.dlm_block","text":"","code":"season <- harmonic_block(rate = 1, period = 12, D = \"D.sazo\") |>   specify(D.sazo = 0.975)"},{"path":"/reference/summary.dlm_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a kDGLM structure ‚Äî summary.dlm_block","title":"Summary for a kDGLM structure ‚Äî summary.dlm_block","text":"Prints report dlm_block object.","code":""},{"path":"/reference/summary.dlm_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a kDGLM structure ‚Äî summary.dlm_block","text":"","code":"# S3 method for class 'dlm_block' summary(object, ...)"},{"path":"/reference/summary.dlm_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a kDGLM structure ‚Äî summary.dlm_block","text":"object dlm_block object.","code":""},{"path":"/reference/summary.dlm_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for a kDGLM structure ‚Äî summary.dlm_block","text":"return value, called print summary kDGLM structure.","code":""},{"path":[]},{"path":"/reference/summary.dlm_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a kDGLM outcome ‚Äî summary.dlm_distr","title":"Summary for a kDGLM outcome ‚Äî summary.dlm_distr","text":"Prints report dlm_distr object.","code":""},{"path":"/reference/summary.dlm_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a kDGLM outcome ‚Äî summary.dlm_distr","text":"","code":"# S3 method for class 'dlm_distr' summary(object, ...)"},{"path":"/reference/summary.dlm_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a kDGLM outcome ‚Äî summary.dlm_distr","text":"object dlm_distr object.","code":""},{"path":"/reference/summary.dlm_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for a kDGLM outcome ‚Äî summary.dlm_distr","text":"return value, called print summary kDGLM outcome.","code":""},{"path":[]},{"path":"/reference/summary.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a fitted kDGLM model ‚Äî summary.fitted_dlm","title":"Summary for a fitted kDGLM model ‚Äî summary.fitted_dlm","text":"Prints report fitted_dlm object.","code":""},{"path":"/reference/summary.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a fitted kDGLM model ‚Äî summary.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' summary(   object,   t = object$t,   lag = -1,   metric.lag = 1,   metric.cutoff = floor(object$t/10),   pred.cred = 0.95,   ... )"},{"path":"/reference/summary.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a fitted kDGLM model ‚Äî summary.fitted_dlm","text":"object fitted_dlm object. t Integer: time index latent states. lag Integer: number steps ahead used evaluating latent states. Use lag<0 smoothed distribution, lag==0 filtered distribution lag=h h-step-ahead prediction. metric.lag Integer: number steps ahead used evaluating predictions used calculating metrics. Use metric.lag<0 smoothed distribution, metric.lag==0 filtered distribution metric.lag=h h-step-ahead prediction. metric.cutoff Integer: cutoff time index metric calculation. Values time ignored. pred.cred numeric: credibility interval used interval score. ... Extra arguments passed coef method.#'","code":""},{"path":"/reference/summary.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for a fitted kDGLM model ‚Äî summary.fitted_dlm","text":"return value, called print summary fitted kDGLM model.","code":""},{"path":[]},{"path":"/reference/summary.fitted_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for a fitted kDGLM model ‚Äî summary.fitted_dlm","text":"","code":"data <- c(AirPassengers)  level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  outcome <- Poisson(lambda = \"rate\", data)  fitted.data <- fit_model(level, season,   AirPassengers = outcome ) summary(fitted.data) #> Fitted DGLM with 1 outcomes. #>  #> distributions: #>     AirPassengers: Poisson #>  #> --- #> No static coeficients. #> --- #> See the coef.fitted_dlm for the coeficients with temporal dynamic. #>  #> One-step-ahead prediction #> Log-likelihood        : -580.2514 #> Interval Score        : 129.48462 #> Mean Abs. Scaled Error:   0.47013 #> ---"},{"path":"/reference/summary.searched_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a searched_dlm object ‚Äî summary.searched_dlm","title":"Summary for a searched_dlm object ‚Äî summary.searched_dlm","text":"Prints report searched_dlm object.","code":""},{"path":"/reference/summary.searched_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a searched_dlm object ‚Äî summary.searched_dlm","text":"","code":"# S3 method for class 'searched_dlm' summary(object, ...)"},{"path":"/reference/summary.searched_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a searched_dlm object ‚Äî summary.searched_dlm","text":"object searched_dlm object.","code":""},{"path":"/reference/summary.searched_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for a searched_dlm object ‚Äî summary.searched_dlm","text":"return value, called print summary searched_dlm object.","code":""},{"path":[]},{"path":"/reference/tf_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural blocks for auto regressive trends and regressions ‚Äî TF_block","title":"Structural blocks for auto regressive trends and regressions ‚Äî TF_block","text":"Creates structure Auto Regressive (AR) block (see WestHarr-DLM;textualkDGLM, chapter 9) desired order. package suppose structure model linear, linearization applied evolution equation, described WestHarr-DLM;textualkDGLM, chapter 13. block also supports Transfer Functions, necessary specify associated pulse calling TF_block function (see arg.).","code":""},{"path":"/reference/tf_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural blocks for auto regressive trends and regressions ‚Äî TF_block","text":"","code":"TF_block(   ...,   order,   noise.var = NULL,   noise.disc = NULL,   pulse = 0,   name = \"Var.AR\",   AR.support = \"free\",   h = 0,   a1 = 0,   R1 = 4,   monitoring = TRUE,   multi.states = FALSE,   D.coef = 1,   h.coef = 0,   H.coef = 0,   a1.coef = c(1, rep(0, order - 1)),   R1.coef = c(1, rep(0.25, order - 1)),   monitoring.coef = rep(FALSE, order),   D.pulse = 1,   h.pulse = 0,   H.pulse = 0,   a1.pulse = 0,   R1.pulse = 4,   monitoring.pulse = FALSE )  AR(   order = 1,   noise.var = NULL,   noise.disc = NULL,   a1 = 0,   R1 = 9,   a1.coef = c(1, rep(0, order - 1)),   R1.coef = c(1, rep(0.25, order - 1)),   name = \"Var.AR\",   X = 1 )  TF(   pulse,   order = 1,   noise.var = NULL,   noise.disc = NULL,   a1 = 0,   R1 = 9,   a1.coef = c(1, rep(0, order - 1)),   R1.coef = c(1, rep(0.25, order - 1)),   a1.pulse = 0,   R1.pulse = 4,   name = \"Var.AR\",   X = 1 )"},{"path":"/reference/tf_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural blocks for auto regressive trends and regressions ‚Äî TF_block","text":"... Named values planning matrix. order Positive integer: order AR block. noise.var Non-negative scalar: variance white noise added latent state. noise.disc Vector scalar: value discount factor associated current latent state. noise.disc vector, size t interpreted discount factor observed time. D scalar, discount used observation. pulse Vector scalar: optional argument providing values pulse Transfer Function. Default 0 (Transfer Function). name String: optional argument providing name block. Can useful identify models meaningful labels, also, name used used auxiliary functions. AR.support String: Either \"constrained\" \"free\" (default). AR.support \"constrained\", AR coefficients forced interval (-1,1), otherwise, coefficients unrestricted. Beware , restriction coefficients, guarantee estimated coefficients imply stationary process, furthermore, order AR block greater 1. restriction coefficients support available AR blocks order equal 1. h Vector scalar: drift add states temporal evolution (can interpreted mean random noise time). vector, size t, value applied respective time. scalar, passed value used observations. a1 Vector scalar: prior mean states associated block time 1. a1 vector, dimension equal order AR block. a1 scalar, value used coefficients. R1 Matrix, vector scalar: prior covariance matrix states associated block time 1. R1 matrix, dimensions n x n, n order AR block. R1 vector scalar, covariance matrix created diagonal matrix values R1 diagonal. monitoring bool: flag indicating latent state monitored (automated monitoring used). default TRUE. multi.states bool: FALSE (default) single latent state created affecting linear predictor affected pulses. TRUE, linear predictor latent state, latent states share AR coefficients pulse effects (state pulse though). D.coef Array, Matrix, vector scalar: values discount factors associated AR coefficients time. D.coef array, dimensions n x n x t, n order AR block t length outcomes. D.coef matrix, dimensions n x n discount matrix used observations. D.coef vector, size t interpreted discount factor observed time (discount variable). D.coef scalar, discount used AR coefficients times. h.coef Matrix, vector scalar: drift add AR coefficients temporal evolution (can interpreted mean random noise time). matrix, dimension n x t, n order AR block t length series. scalar, passed value used coefficients time. H.coef Array, Matrix, vector scalar: values covariance matrix noise factor associated AR coefficients time. H.coef array, dimensions n x n x t, n order AR block t length outcomes. H.coef matrix, dimensions n x n values used time. H.coef vector scalar, discount factor matrix created diagonal matrix values H.coef diagonal. a1.coef Vector scalar: prior mean AR coefficients associated block time 1. a1.coef vector, dimension equal order AR block. a1.coef scalar, value used coefficients. coefficients restricted interval (-1,1), a1.coef interpreted mean atanh(rho), rho AR coefficient. R1.coef Matrix, vector scalar: prior covariance matrix coefficients associated block time 1. R1.coef matrix, dimensions n x n, n order AR block. R1.coef vector scalar, covariance matrix created diagonal matrix values R1.coef diagonal. coefficients restricted interval (-1,1), R1.coef interpreted covariance matrix atanh(rho), rho AR coefficient. monitoring.coef Vector: vector flags indicating AR coefficients monitored (automated monitoring used). size n, n order AR block. default coefficient monitored. D.pulse Array, Matrix, vector scalar: values discount factors associated pulse coefficients time. D.pulse array, dimensions n x n x t, n number pulses t length outcomes. D.pulse matrix, dimensions n x n discount matrix used observations. D.pulse vector, size t interpreted discount factor observed time (discount variable). D scalar, discount used pulse coefficients times. h.pulse Matrix, vector scalar: drift add pulse effect temporal evolution (can interpreted mean random noise time). matrix, dimension n x t, n number pulses t length series. scalar, passed value used latent state time. H.pulse Array, Matrix, vector scalar: values covariance matrix noise factor associated pulse coefficients time. H.pulse array, dimensions n x n x t, n number pulses t length outcomes. H.pulse matrix, dimensions n x n values used time. H.pulse vector scalar, covariance matrix created diagonal matrix values H.pulse diagonal. a1.pulse Vector scalar: prior mean coefficients associated pulses time 1. a1.pulse vector, dimension equal number pulses. a1.pulse scalar, value used coefficients. R1.pulse Matrix, vector scalar: prior covariance matrix coefficients associated pulses time 1. R1.pulse matrix, dimensions n x n, n number pulses. R1.pulse vector scalar, covariance matrix created diagonal matrix values R1.pulse diagonal. monitoring.pulse Vector: vector flags indicating pulse coefficients monitored (automated monitoring used). size n, n number pulses. default pulse coefficient monitored. X Vector scalar: argument providing values pulse Transfer Function.","code":""},{"path":"/reference/tf_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural blocks for auto regressive trends and regressions ‚Äî TF_block","text":"dlm_block object containing following values: FF Array: 3D-array containing regression matrix time. dimension n x k x t, n number latent states, k number linear predictors model t time series length. FF.labs Matrix: n x k character matrix describing type value element FF. G Matrix: 3D-array containing evolution matrix time. dimension n x n x t, n number latent states t time series length. G.labs Matrix: n x n character matrix describing type value element G. G.idx Matrix: n x n character matrix containing index element G. D Array: 3D-array containing discount factor matrix time. dimension n x n x t, n number latent states t time series length. H Array: 3D-array containing covariance matrix noise time. dimension D. a1 Vector: prior mean latent vector. R1 Matrix: prior covariance matrix latent vector. var.names list: list containing variables indexes name. order Positive integer: argument. n Positive integer: number latent states associated block (2). t Positive integer: number time steps associated block. 1, block compatible blocks time length, t greater 1, block can used blocks time length. k Positive integer: number outcomes associated block. block can used blocks outcome length. pred.names Vector: name linear predictors associated block. monitoring Vector: combination monitoring, monitoring monitoring.pulse. type Character: type block (AR). AR.support Character: argument.","code":""},{"path":"/reference/tf_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural blocks for auto regressive trends and regressions ‚Äî TF_block","text":"..., noise.var, noise.disc, D, H, a1, R1, a1, R1, a1.pulse, R1.pulse, D.pulse, h.pulse, H.pulse arguments, user may set one values string. , user leave block partially undefined. user must pass undefined parameter values named arguments fit_model function. Also, multiple values can passed, allowing sensitivity analysis value parameter. details implementation see ArtigoPacote;textualkDGLM. details Auto regressive models context DLM's, see WestHarr-DLM;textualkDGLM, chapter 9. details linearization non-linear evolution equations context DLM's, see WestHarr-DLM;textualkDGLM, chapter 13. details dynamic regression models context DLM's, see WestHarr-DLM;textualkDGLM, chapters 6 9.","code":""},{"path":[]},{"path":[]},{"path":"/reference/tf_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural blocks for auto regressive trends and regressions ‚Äî TF_block","text":"","code":"#### AR block #### TF_block(mu = 1, order = 2, noise.disc = 0.9) #> AR DLM block. #> latent states:  #>     Var.AR.State: mu.Lag.0, mu.Lag.1 (2 variable(s)) #>     Var.AR.Coef: Lag.0, Lag.1 (2 variable(s)) #>  #> Linear predictors:  #>     mu #>  #> Status: defined #> Serie length: 1 #> Interventions at:  #> Number of latent states: 4 #> Number of linear predictors: 1  #### Transfer function #### TF_block(mu = 1, pulse = beaver1$activ, order = 1, noise.disc = 0.9) #> Mixed DLM block. #> latent states:  #>     Var.AR.State: mu.Lag.0 (1 variable(s)) #>     Var.AR.Coef: Lag.0 (1 variable(s)) #>     Var.AR.Pulse.effect: 1 (1 variable(s)) #>  #> Linear predictors:  #>     mu #>  #> Status: defined #> Serie length: 114 #> Interventions at:  #> Number of latent states: 3 #> Number of linear predictors: 1"},{"path":"/reference/times-.dlm_block.html","id":null,"dir":"Reference","previous_headings":"","what":"*.fitted_dlm ‚Äî *.dlm_block","title":"*.fitted_dlm ‚Äî *.dlm_block","text":"Define product operator class dlm_block. method wrapper block_mult function.","code":""},{"path":"/reference/times-.dlm_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"*.fitted_dlm ‚Äî *.dlm_block","text":"","code":"# S3 method for class 'dlm_block' e1 * e2"},{"path":"/reference/times-.dlm_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"*.fitted_dlm ‚Äî *.dlm_block","text":"e1 dlm_block (e2 integer) integer (e2 dlm_block). e2 integer (e1 dlm_block) dlm_block (e1 integer).","code":""},{"path":"/reference/times-.dlm_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"*.fitted_dlm ‚Äî *.dlm_block","text":"combined replicated blocks dlm_block.","code":""},{"path":[]},{"path":"/reference/update.fitted_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"update.fitted_dlm ‚Äî update.fitted_dlm","title":"update.fitted_dlm ‚Äî update.fitted_dlm","text":"update.fitted_dlm","code":""},{"path":"/reference/update.fitted_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update.fitted_dlm ‚Äî update.fitted_dlm","text":"","code":"# S3 method for class 'fitted_dlm' update(object, ...)"},{"path":"/reference/update.fitted_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update.fitted_dlm ‚Äî update.fitted_dlm","text":"object fitted_dlm: fitted model updated. ... Extra variables necessary updating (covariates, observed values, etc.).","code":""},{"path":"/reference/update.fitted_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update.fitted_dlm ‚Äî update.fitted_dlm","text":"fitted_dlm object.","code":""},{"path":"/reference/update.fitted_dlm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"update.fitted_dlm ‚Äî update.fitted_dlm","text":"covariate necessary updating, passed named argument. name must follow structure: <block name>.Covariate<.index>. one pulse associated block index omitted. pulse necessary updating, passed named argument. name must follow structure: <block name>.Pulse<.index>. one pulse associated block index omitted. offset necessary updating, passed along observed data. See example.","code":""},{"path":[]},{"path":"/reference/update.fitted_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"update.fitted_dlm ‚Äî update.fitted_dlm","text":"","code":"level <- polynomial_block(rate = 1, order = 2, D = 0.95) season <- harmonic_block(rate = 1, order = 2, period = 12, D = 0.975)  # Only first 100 observations (for the sake of the example) outcome <- Poisson(lambda = \"rate\", data = c(AirPassengers)[1:100])  fitted.data <- fit_model(level, season,   AirPassengers = outcome )  updated.fit <- update(fitted.data, AirPassengers = list(data = c(AirPassengers)[101:144])) # If a offset was present, the user should pass its value when updating # updated.fit=update(fitted.data, #                     AirPassengers=list( #                      data=c(AirPassengers)[101:144], #                      offset= ... ))"},{"path":"/reference/update_Gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"update_Gamma ‚Äî update_Gamma","title":"update_Gamma ‚Äî update_Gamma","text":"Calculate posterior parameter Inverse-Gamma, assuming observed values came Gamma model shape parameter (phi) known mean (mu) prior distribution Inverse-Gamma.","code":""},{"path":"/reference/update_Gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_Gamma ‚Äî update_Gamma","text":"","code":"update_Gamma(conj.param, ft, Qt, y, parms)"},{"path":"/reference/update_Gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_Gamma ‚Äî update_Gamma","text":"conj.param list: vector containing parameters Inverse-Gamma (alpha,beta). ft numeric: vector representing means normal distribution. used default method. Qt matrix: matrix representing covariance matrix normal distribution. used default method. y numeric: vector containing observations. parms list: list extra known parameters distribution. kernel, parms containing shape parameter (phi) observational gamma model.","code":""},{"path":"/reference/update_Gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_Gamma ‚Äî update_Gamma","text":"parameters posterior distribution.","code":""},{"path":[]},{"path":"/reference/update_Multinom.html","id":null,"dir":"Reference","previous_headings":"","what":"update_Multinom ‚Äî update_Multinom","title":"update_Multinom ‚Äî update_Multinom","text":"Calculate posterior parameter Dirichlet, assuming observed values came Multinomial model number trials known prior distribution probabilities category joint distribution Dirichlet.","code":""},{"path":"/reference/update_Multinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_Multinom ‚Äî update_Multinom","text":"","code":"update_Multinom(conj.param, ft, Qt, y, parms = list())"},{"path":"/reference/update_Multinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_Multinom ‚Äî update_Multinom","text":"conj.param list: vector containing concentration parameters Dirichlet. ft vector: vector representing means normal distribution. used default method. Qt matrix: matrix representing covariance matrix normal distribution. used default method. y vector: vector containing observations. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/update_Multinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_Multinom ‚Äî update_Multinom","text":"parameters posterior distribution.","code":""},{"path":[]},{"path":"/reference/update_multi_NG_correl.html","id":null,"dir":"Reference","previous_headings":"","what":"update_multi_NG_correl ‚Äî update_multi_NG_correl","title":"update_multi_NG_correl ‚Äî update_multi_NG_correl","text":"update_multi_NG_correl","code":""},{"path":"/reference/update_multi_NG_correl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_multi_NG_correl ‚Äî update_multi_NG_correl","text":"","code":"update_multi_NG_correl(conj.param, ft, Qt, y, parms)"},{"path":"/reference/update_multi_NG_correl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_multi_NG_correl ‚Äî update_multi_NG_correl","text":"parameters posterior distribution.","code":""},{"path":"/reference/update_NG.html","id":null,"dir":"Reference","previous_headings":"","what":"update_NG ‚Äî update_NG","title":"update_NG ‚Äî update_NG","text":"Calculate posterior parameter Normal-Gamma, assuming observed values came Normal model prior distribution mean precision joint distribution Normal-Gamma","code":""},{"path":"/reference/update_NG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_NG ‚Äî update_NG","text":"","code":"update_NG(conj.param, ft, Qt, y, parms = list())"},{"path":"/reference/update_NG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_NG ‚Äî update_NG","text":"conj.param list: vector containing parameters Normal-Gamma (mu0,c0,alpha,beta). ft numeric: vector representing means normal distribution. used default method. Qt matrix: matrix representing covariance matrix normal distribution. used default method. y numeric: vector containing observations. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/update_NG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_NG ‚Äî update_NG","text":"parameters posterior distribution.","code":""},{"path":"/reference/update_NG2.html","id":null,"dir":"Reference","previous_headings":"","what":"update_NG ‚Äî update_NG2","title":"update_NG ‚Äî update_NG2","text":"Calculate posterior parameter Normal-Gamma, assuming observed values came Normal model prior distribution mean precision joint distribution Normal-Gamma","code":""},{"path":"/reference/update_NG2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_NG ‚Äî update_NG2","text":"","code":"update_NG2(conj.param, ft, Qt, y, parms = list())"},{"path":"/reference/update_NG2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_NG ‚Äî update_NG2","text":"conj.param list: vector containing parameters Normal-Gamma (mu0,c0,alpha,beta). ft numeric: vector representing means normal distribution. used default method. Qt matrix: matrix representing covariance matrix normal distribution. used default method. y numeric: vector containing observations. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/update_NG2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_NG ‚Äî update_NG2","text":"parameters posterior distribution.","code":""},{"path":"/reference/update_Normal.html","id":null,"dir":"Reference","previous_headings":"","what":"update_Normal ‚Äî update_Normal","title":"update_Normal ‚Äî update_Normal","text":"Calculate posterior parameter Normal, assuming observed values came Normal model covariance known prior distribution mean vector Normal distribution","code":""},{"path":"/reference/update_Normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_Normal ‚Äî update_Normal","text":"","code":"update_Normal(conj.param, ft, Qt, y, parms)"},{"path":"/reference/update_Normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_Normal ‚Äî update_Normal","text":"conj.param list: vector containing concentration parameters Normal. ft numeric: vector representing means normal distribution. used default method. Qt matrix: matrix representing covariance matrix normal distribution. used default method. y numeric: vector containing observations. parms list: list extra known parameters distribution. kernel, parms containing covariance matrix parameter (V) observational Normal model.","code":""},{"path":"/reference/update_Normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_Normal ‚Äî update_Normal","text":"parameters posterior distribution.","code":""},{"path":[]},{"path":"/reference/update_Poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"update_Poisson ‚Äî update_Poisson","title":"update_Poisson ‚Äî update_Poisson","text":"Calculate posterior parameter Gamma, assuming observed values came Poisson model rate parameter (lambda) prior distribution Gamma.","code":""},{"path":"/reference/update_Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_Poisson ‚Äî update_Poisson","text":"","code":"update_Poisson(conj.param, ft, Qt, y, parms)"},{"path":"/reference/update_Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_Poisson ‚Äî update_Poisson","text":"conj.param list: vector containing parameters Gamma (alpha,beta). ft numeric: vector representing means normal distribution. used default method. Qt matrix: matrix representing covariance matrix normal distribution. used default method. y numeric: vector containing observations. parms list: list extra known parameters distribution. used kernel.","code":""},{"path":"/reference/update_Poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_Poisson ‚Äî update_Poisson","text":"parameters posterior distribution.","code":""},{"path":[]},{"path":"/reference/var_decomp.html","id":null,"dir":"Reference","previous_headings":"","what":"var_decomp ‚Äî var_decomp","title":"var_decomp ‚Äî var_decomp","text":"function receives covariance matrix S creates matrix Q, t(Q)","code":""},{"path":"/reference/var_decomp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"var_decomp ‚Äî var_decomp","text":"","code":"var_decomp(S)"},{"path":"/reference/var_decomp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"var_decomp ‚Äî var_decomp","text":"S covariance matrix","code":""},{"path":"/reference/zero_sum_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero sum prior ‚Äî zero_sum_prior","title":"Zero sum prior ‚Äî zero_sum_prior","text":"Defines prior structural block latent states sum zero probability one.","code":""},{"path":"/reference/zero_sum_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero sum prior ‚Äî zero_sum_prior","text":"","code":"zero_sum_prior(   block,   var.index = 1:block$n,   weights = rep(1, length(var.index)) )"},{"path":"/reference/zero_sum_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero sum prior ‚Äî zero_sum_prior","text":"block dlm_block object: structural block. var.index integer: index variables set prior. weights numeric: vector indicating linear transformation data 0 probability 1. Default equivalent zero-sum restriction.","code":""},{"path":"/reference/zero_sum_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero sum prior ‚Äî zero_sum_prior","text":"dlm_block object desired prior.","code":""},{"path":"/reference/zero_sum_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero sum prior ‚Äî zero_sum_prior","text":"covariance matrix evolution drift parameter also altered guarantee zero sum condition always hold. discount factor must variables whose prior modified. details implementation see ArtigoPacote;textualkDGLM.","code":""},{"path":[]},{"path":[]},{"path":"/reference/zero_sum_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero sum prior ‚Äî zero_sum_prior","text":"","code":"polynomial_block(mu = 1, D = 0.95) |>   block_mult(5) |>   zero_sum_prior() #> Mixed DLM block. #> latent states:  #>     Var.Poly.1: Level (1 variable(s)) #>     Var.Poly.2: Level (1 variable(s)) #>     Var.Poly.3: Level (1 variable(s)) #>     Var.Poly.4: Level (1 variable(s)) #>     Var.Poly.5: Level (1 variable(s)) #>  #> Linear predictors:  #>     mu.1 #>     mu.2 #>     mu.3 #>     mu.4 #>     mu.5 #>  #> Status: defined #> Serie length: 1 #> Interventions at:  #> Number of latent states: 5 #> Number of linear predictors: 5"}]
